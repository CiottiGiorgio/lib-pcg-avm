# flake8: noqa
# fmt: off
# mypy: disable-error-code="no-any-return, no-untyped-call, misc, type-arg"
# This file was automatically generated by algokit-client-generator.
# DO NOT MODIFY IT BY HAND.
# requires: algokit-utils@^1.2.0
import base64
import dataclasses
import decimal
import typing
from abc import ABC, abstractmethod

import algokit_utils
import algosdk
from algosdk.v2client import models
from algosdk.atomic_transaction_composer import (
    AtomicTransactionComposer,
    AtomicTransactionResponse,
    SimulateAtomicTransactionResponse,
    TransactionSigner,
    TransactionWithSigner
)

_APP_SPEC_JSON = r"""{
    "hints": {
        "bounded_rand_uint128(byte[32],uint128,uint128,uint16)uint128[]": {
            "call_config": {
                "no_op": "CALL"
            }
        }
    },
    "source": {
        "approval": "I3ByYWdtYSB2ZXJzaW9uIDEwCgpzbWFydF9jb250cmFjdHMubGliX3BjZzEyOF9leHBvc2VyLmNvbnRyYWN0LkxpYlBjZzEyOEV4cG9zZXJBbGdvcHkuYXBwcm92YWxfcHJvZ3JhbToKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9saWJfcGNnMTI4X2V4cG9zZXIvY29udHJhY3QucHk6OAogICAgLy8gY2xhc3MgTGliUGNnMTI4RXhwb3NlckFsZ29weShhcmM0LkFSQzRDb250cmFjdCk6CiAgICB0eG4gTnVtQXBwQXJncwogICAgYnogbWFpbl9iYXJlX3JvdXRpbmdANQogICAgbWV0aG9kICJib3VuZGVkX3JhbmRfdWludDEyOChieXRlWzMyXSx1aW50MTI4LHVpbnQxMjgsdWludDE2KXVpbnQxMjhbXSIKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDAKICAgIG1hdGNoIG1haW5fYm91bmRlZF9yYW5kX3VpbnQxMjhfcm91dGVAMgogICAgZXJyIC8vIHJlamVjdCB0cmFuc2FjdGlvbgoKbWFpbl9ib3VuZGVkX3JhbmRfdWludDEyOF9yb3V0ZUAyOgogICAgLy8gc21hcnRfY29udHJhY3RzL2xpYl9wY2cxMjhfZXhwb3Nlci9jb250cmFjdC5weTo5CiAgICAvLyBAYXJjNC5hYmltZXRob2QKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBpcyBub3QgY3JlYXRpbmcKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9saWJfcGNnMTI4X2V4cG9zZXIvY29udHJhY3QucHk6OAogICAgLy8gY2xhc3MgTGliUGNnMTI4RXhwb3NlckFsZ29weShhcmM0LkFSQzRDb250cmFjdCk6CiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAxCiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAyCiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAzCiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyA0CiAgICAvLyBzbWFydF9jb250cmFjdHMvbGliX3BjZzEyOF9leHBvc2VyL2NvbnRyYWN0LnB5OjkKICAgIC8vIEBhcmM0LmFiaW1ldGhvZAogICAgY2FsbHN1YiBib3VuZGVkX3JhbmRfdWludDEyOAogICAgYnl0ZSAweDE1MWY3Yzc1CiAgICBzd2FwCiAgICBjb25jYXQKICAgIGxvZwogICAgaW50IDEKICAgIHJldHVybgoKbWFpbl9iYXJlX3JvdXRpbmdANToKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9saWJfcGNnMTI4X2V4cG9zZXIvY29udHJhY3QucHk6OAogICAgLy8gY2xhc3MgTGliUGNnMTI4RXhwb3NlckFsZ29weShhcmM0LkFSQzRDb250cmFjdCk6CiAgICBpbnQgMAogICAgaW50IDQKICAgIHR4biBPbkNvbXBsZXRpb24KICAgIG1hdGNoIG1haW5fY3JlYXRlQDYgbWFpbl91cGRhdGVANwogICAgZXJyIC8vIHJlamVjdCB0cmFuc2FjdGlvbgoKbWFpbl9jcmVhdGVANjoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9saWJfcGNnMTI4X2V4cG9zZXIvY29udHJhY3QucHk6OAogICAgLy8gY2xhc3MgTGliUGNnMTI4RXhwb3NlckFsZ29weShhcmM0LkFSQzRDb250cmFjdCk6CiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgIQogICAgYXNzZXJ0IC8vIGlzIGNyZWF0aW5nCiAgICBpbnQgMQogICAgcmV0dXJuCgptYWluX3VwZGF0ZUA3OgogICAgLy8gc21hcnRfY29udHJhY3RzL2xpYl9wY2cxMjhfZXhwb3Nlci9jb250cmFjdC5weToyNQogICAgLy8gQGFyYzQuYmFyZW1ldGhvZChhbGxvd19hY3Rpb25zPVsiVXBkYXRlQXBwbGljYXRpb24iXSkKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gaXMgbm90IGNyZWF0aW5nCiAgICAvLyBzbWFydF9jb250cmFjdHMvbGliX3BjZzEyOF9leHBvc2VyL2NvbnRyYWN0LnB5OjI1LTI2CiAgICAvLyBAYXJjNC5iYXJlbWV0aG9kKGFsbG93X2FjdGlvbnM9WyJVcGRhdGVBcHBsaWNhdGlvbiJdKQogICAgLy8gZGVmIHVwZGF0ZShzZWxmKSAtPiBOb25lOgogICAgY2FsbHN1YiB1cGRhdGUKICAgIGludCAxCiAgICByZXR1cm4KCgovLyBzbWFydF9jb250cmFjdHMubGliX3BjZzEyOF9leHBvc2VyLmNvbnRyYWN0LkxpYlBjZzEyOEV4cG9zZXJBbGdvcHkuYm91bmRlZF9yYW5kX3VpbnQxMjgoc2VlZDogYnl0ZXMsIGxvd2VyX2JvdW5kOiBieXRlcywgdXBwZXJfYm91bmQ6IGJ5dGVzLCBsZW5ndGg6IGJ5dGVzKSAtPiBieXRlczoKYm91bmRlZF9yYW5kX3VpbnQxMjg6CiAgICAvLyBzbWFydF9jb250cmFjdHMvbGliX3BjZzEyOF9leHBvc2VyL2NvbnRyYWN0LnB5OjktMTYKICAgIC8vIEBhcmM0LmFiaW1ldGhvZAogICAgLy8gZGVmIGJvdW5kZWRfcmFuZF91aW50MTI4KAogICAgLy8gICAgIHNlbGYsCiAgICAvLyAgICAgc2VlZDogYXJjNC5TdGF0aWNBcnJheVthcmM0LkJ5dGUsIExpdGVyYWxbMzJdXSwKICAgIC8vICAgICBsb3dlcl9ib3VuZDogYXJjNC5VSW50MTI4LAogICAgLy8gICAgIHVwcGVyX2JvdW5kOiBhcmM0LlVJbnQxMjgsCiAgICAvLyAgICAgbGVuZ3RoOiBhcmM0LlVJbnQxNiwKICAgIC8vICkgLT4gYXJjNC5EeW5hbWljQXJyYXlbYXJjNC5VSW50MTI4XToKICAgIHByb3RvIDQgMQogICAgLy8gc21hcnRfY29udHJhY3RzL2xpYl9wY2cxMjhfZXhwb3Nlci9jb250cmFjdC5weToxNwogICAgLy8gc3RhdGUgPSBwY2cxMjhfaW5pdChzZWVkLmJ5dGVzKQogICAgZnJhbWVfZGlnIC00CiAgICBjYWxsc3ViIHBjZzEyOF9pbml0CiAgICBjb3ZlciAzCiAgICBjb3ZlciAyCiAgICBzd2FwCiAgICAvLyBzbWFydF9jb250cmFjdHMvbGliX3BjZzEyOF9leHBvc2VyL2NvbnRyYWN0LnB5OjIwCiAgICAvLyBzdGF0ZSwgbG93ZXJfYm91bmQubmF0aXZlLCB1cHBlcl9ib3VuZC5uYXRpdmUsIGxlbmd0aC5uYXRpdmUKICAgIGZyYW1lX2RpZyAtMQogICAgYnRvaQogICAgY292ZXIgMgogICAgLy8gc21hcnRfY29udHJhY3RzL2xpYl9wY2cxMjhfZXhwb3Nlci9jb250cmFjdC5weToxOS0yMQogICAgLy8gc3RhdGUsIHNlcXVlbmNlID0gcGNnMTI4X3JhbmRvbSgKICAgIC8vICAgICBzdGF0ZSwgbG93ZXJfYm91bmQubmF0aXZlLCB1cHBlcl9ib3VuZC5uYXRpdmUsIGxlbmd0aC5uYXRpdmUKICAgIC8vICkKICAgIHN3YXAKICAgIHVuY292ZXIgMwogICAgdW5jb3ZlciA0CiAgICBmcmFtZV9kaWcgLTMKICAgIGZyYW1lX2RpZyAtMgogICAgdW5jb3ZlciA2CiAgICBjYWxsc3ViIHBjZzEyOF9yYW5kb20KICAgIGNvdmVyIDQKICAgIHBvcG4gNAogICAgLy8gc21hcnRfY29udHJhY3RzL2xpYl9wY2cxMjhfZXhwb3Nlci9jb250cmFjdC5weToyMwogICAgLy8gcmV0dXJuIHNlcXVlbmNlCiAgICByZXRzdWIKCgovLyBsaWJfcGNnLnhzaF9ycl9xdWFkcnVwbGVfNjRfMzIucGNnMTI4X2luaXQoc2VlZDogYnl0ZXMpIC0+IHVpbnQ2NCwgdWludDY0LCB1aW50NjQsIHVpbnQ2NDoKcGNnMTI4X2luaXQ6CiAgICAvLyBsaWJfcGNnL3hzaF9ycl9xdWFkcnVwbGVfNjRfMzIucHk6MjEtMjIKICAgIC8vIEBzdWJyb3V0aW5lCiAgICAvLyBkZWYgcGNnMTI4X2luaXQoc2VlZDogQnl0ZXMpIC0+IFBDRzEyOFNUQVRFOgogICAgcHJvdG8gMSA0CiAgICAvLyBsaWJfcGNnL3hzaF9ycl9xdWFkcnVwbGVfNjRfMzIucHk6MzIKICAgIC8vIGFzc2VydCBzZWVkLmxlbmd0aCA9PSAzMgogICAgZnJhbWVfZGlnIC0xCiAgICBsZW4KICAgIGludCAzMgogICAgPT0KICAgIGFzc2VydAogICAgLy8gbGliX3BjZy94c2hfcnJfcXVhZHJ1cGxlXzY0XzMyLnB5OjM1CiAgICAvLyBfX3BjZzMyX2luaXQob3AuZXh0cmFjdF91aW50NjQoc2VlZCwgMCksIFVJbnQ2NChQQ0dfRklSU1RfSU5DUkVNRU5UKSksCiAgICBmcmFtZV9kaWcgLTEKICAgIGludCAwCiAgICBleHRyYWN0X3VpbnQ2NAogICAgaW50IDE0NDI2OTUwNDA4ODg5NjM0MDcKICAgIGNhbGxzdWIgX19wY2czMl9pbml0CiAgICAvLyBsaWJfcGNnL3hzaF9ycl9xdWFkcnVwbGVfNjRfMzIucHk6MzYKICAgIC8vIF9fcGNnMzJfaW5pdChvcC5leHRyYWN0X3VpbnQ2NChzZWVkLCA4KSwgVUludDY0KFBDR19TRUNPTkRfSU5DUkVNRU5UKSksCiAgICBmcmFtZV9kaWcgLTEKICAgIGludCA4CiAgICBleHRyYWN0X3VpbnQ2NAogICAgaW50IDE0NDI2OTUwNDA4ODg5NjM0MDkKICAgIGNhbGxzdWIgX19wY2czMl9pbml0CiAgICAvLyBsaWJfcGNnL3hzaF9ycl9xdWFkcnVwbGVfNjRfMzIucHk6MzcKICAgIC8vIF9fcGNnMzJfaW5pdChvcC5leHRyYWN0X3VpbnQ2NChzZWVkLCAxNiksIFVJbnQ2NChQQ0dfVEhJUkRfSU5DUkVNRU5UKSksCiAgICBmcmFtZV9kaWcgLTEKICAgIGludCAxNgogICAgZXh0cmFjdF91aW50NjQKICAgIGludCAxNDQyNjk1MDQwODg4OTYzNDExCiAgICBjYWxsc3ViIF9fcGNnMzJfaW5pdAogICAgLy8gbGliX3BjZy94c2hfcnJfcXVhZHJ1cGxlXzY0XzMyLnB5OjM4CiAgICAvLyBfX3BjZzMyX2luaXQob3AuZXh0cmFjdF91aW50NjQoc2VlZCwgMjQpLCBVSW50NjQoUENHX0ZPVVJUSF9JTkNSRU1FTlQpKSwKICAgIGZyYW1lX2RpZyAtMQogICAgaW50IDI0CiAgICBleHRyYWN0X3VpbnQ2NAogICAgaW50IDE0NDI2OTUwNDA4ODg5NjM0MTMKICAgIGNhbGxzdWIgX19wY2czMl9pbml0CiAgICAvLyBsaWJfcGNnL3hzaF9ycl9xdWFkcnVwbGVfNjRfMzIucHk6MzQtMzkKICAgIC8vIHJldHVybiAoCiAgICAvLyAgICAgX19wY2czMl9pbml0KG9wLmV4dHJhY3RfdWludDY0KHNlZWQsIDApLCBVSW50NjQoUENHX0ZJUlNUX0lOQ1JFTUVOVCkpLAogICAgLy8gICAgIF9fcGNnMzJfaW5pdChvcC5leHRyYWN0X3VpbnQ2NChzZWVkLCA4KSwgVUludDY0KFBDR19TRUNPTkRfSU5DUkVNRU5UKSksCiAgICAvLyAgICAgX19wY2czMl9pbml0KG9wLmV4dHJhY3RfdWludDY0KHNlZWQsIDE2KSwgVUludDY0KFBDR19USElSRF9JTkNSRU1FTlQpKSwKICAgIC8vICAgICBfX3BjZzMyX2luaXQob3AuZXh0cmFjdF91aW50NjQoc2VlZCwgMjQpLCBVSW50NjQoUENHX0ZPVVJUSF9JTkNSRU1FTlQpKSwKICAgIC8vICkKICAgIHJldHN1YgoKCi8vIGxpYl9wY2cueHNoX3JyXzY0XzMyLl9fcGNnMzJfaW5pdChpbml0aWFsX3N0YXRlOiB1aW50NjQsIGluY3I6IHVpbnQ2NCkgLT4gdWludDY0OgpfX3BjZzMyX2luaXQ6CiAgICAvLyBsaWJfcGNnL3hzaF9ycl82NF8zMi5weToyMTQtMjE1CiAgICAvLyBAc3Vicm91dGluZQogICAgLy8gZGVmIF9fcGNnMzJfaW5pdChpbml0aWFsX3N0YXRlOiBQQ0czMlNUQVRFLCBpbmNyOiBVSW50NjQpIC0+IFBDRzMyU1RBVEU6CiAgICBwcm90byAyIDEKICAgIC8vIGxpYl9wY2cveHNoX3JyXzY0XzMyLnB5OjIzMAogICAgLy8gc3RhdGUgPSBfX3BjZzMyX3N0ZXAoVUludDY0KDApLCBpbmNyKQogICAgaW50IDAKICAgIGZyYW1lX2RpZyAtMQogICAgY2FsbHN1YiBfX3BjZzMyX3N0ZXAKICAgIC8vIGxpYl9wY2cveHNoX3JyXzY0XzMyLnB5OjIzMQogICAgLy8gX2hpZ2hfYWRkdywgc3RhdGUgPSBvcC5hZGR3KHN0YXRlLCBpbml0aWFsX3N0YXRlKQogICAgZnJhbWVfZGlnIC0yCiAgICBhZGR3CiAgICBidXJ5IDEKICAgIC8vIGxpYl9wY2cveHNoX3JyXzY0XzMyLnB5OjIzMwogICAgLy8gcmV0dXJuIF9fcGNnMzJfc3RlcChzdGF0ZSwgaW5jcikKICAgIGZyYW1lX2RpZyAtMQogICAgY2FsbHN1YiBfX3BjZzMyX3N0ZXAKICAgIHJldHN1YgoKCi8vIGxpYl9wY2cueHNoX3JyXzY0XzMyLl9fcGNnMzJfc3RlcChzdGF0ZTogdWludDY0LCBpbmNyOiB1aW50NjQpIC0+IHVpbnQ2NDoKX19wY2czMl9zdGVwOgogICAgLy8gbGliX3BjZy94c2hfcnJfNjRfMzIucHk6MjM2LTIzNwogICAgLy8gQHN1YnJvdXRpbmUKICAgIC8vIGRlZiBfX3BjZzMyX3N0ZXAoc3RhdGU6IFBDRzMyU1RBVEUsIGluY3I6IFVJbnQ2NCkgLT4gUENHMzJTVEFURToKICAgIHByb3RvIDIgMQogICAgLy8gbGliX3BjZy94c2hfcnJfNjRfMzIucHk6MjQ4CiAgICAvLyBfaGlnaF9tdWwsIGxvd19tdWwgPSBvcC5tdWx3KHN0YXRlLCBQQ0dfTVVMVElQTElFUikKICAgIGZyYW1lX2RpZyAtMgogICAgaW50IDYzNjQxMzYyMjM4NDY3OTMwMDUKICAgIG11bHcKICAgIGJ1cnkgMQogICAgLy8gbGliX3BjZy94c2hfcnJfNjRfMzIucHk6MjQ5CiAgICAvLyBfaGlnaF9hZGQsIGxvd19hZGQgPSBvcC5hZGR3KGxvd19tdWwsIGluY3IpCiAgICBmcmFtZV9kaWcgLTEKICAgIGFkZHcKICAgIGJ1cnkgMQogICAgLy8gbGliX3BjZy94c2hfcnJfNjRfMzIucHk6MjUxCiAgICAvLyByZXR1cm4gbG93X2FkZAogICAgcmV0c3ViCgoKLy8gbGliX3BjZy54c2hfcnJfcXVhZHJ1cGxlXzY0XzMyLnBjZzEyOF9yYW5kb20oc3RhdGUuMDogdWludDY0LCBzdGF0ZS4xOiB1aW50NjQsIHN0YXRlLjI6IHVpbnQ2NCwgc3RhdGUuMzogdWludDY0LCBsb3dlcl9ib3VuZDogYnl0ZXMsIHVwcGVyX2JvdW5kOiBieXRlcywgbGVuZ3RoOiB1aW50NjQpIC0+IHVpbnQ2NCwgdWludDY0LCB1aW50NjQsIHVpbnQ2NCwgYnl0ZXM6CnBjZzEyOF9yYW5kb206CiAgICAvLyBsaWJfcGNnL3hzaF9ycl9xdWFkcnVwbGVfNjRfMzIucHk6NDItNDgKICAgIC8vIEBzdWJyb3V0aW5lCiAgICAvLyBkZWYgcGNnMTI4X3JhbmRvbSgKICAgIC8vICAgICBzdGF0ZTogUENHMTI4U1RBVEUsCiAgICAvLyAgICAgbG93ZXJfYm91bmQ6IEJpZ1VJbnQsCiAgICAvLyAgICAgdXBwZXJfYm91bmQ6IEJpZ1VJbnQsCiAgICAvLyAgICAgbGVuZ3RoOiBVSW50NjQsCiAgICAvLyApIC0+IHR1cGxlW1BDRzEyOFNUQVRFLCBhcmM0LkR5bmFtaWNBcnJheVthcmM0LlVJbnQxMjhdXToKICAgIHByb3RvIDcgNQogICAgaW50IDAKICAgIGR1cG4gMgogICAgYnl0ZSAiIgogICAgLy8gbGliX3BjZy94c2hfcnJfcXVhZHJ1cGxlXzY0XzMyLnB5OjY3CiAgICAvLyByZXN1bHQgPSBhcmM0LkR5bmFtaWNBcnJheVthcmM0LlVJbnQxMjhdKCkKICAgIGJ5dGUgMHgwMDAwCiAgICAvLyBsaWJfcGNnL3hzaF9ycl9xdWFkcnVwbGVfNjRfMzIucHk6NjkKICAgIC8vIGlmIGxvd2VyX2JvdW5kID09IDAgYW5kIHVwcGVyX2JvdW5kID09IDA6CiAgICBmcmFtZV9kaWcgLTMKICAgIGJ5dGUgMHgKICAgIGI9PQogICAgYnogcGNnMTI4X3JhbmRvbV9lbHNlX2JvZHlANwogICAgZnJhbWVfZGlnIC0yCiAgICBieXRlIDB4CiAgICBiPT0KICAgIGJ6IHBjZzEyOF9yYW5kb21fZWxzZV9ib2R5QDcKICAgIC8vIGxpYl9wY2cveHNoX3JyX3F1YWRydXBsZV82NF8zMi5weTo3MAogICAgLy8gZm9yIGkgaW4gdXJhbmdlKGxlbmd0aCk6ICAjIG5vcWE6IEIwMDcKICAgIGludCAwCiAgICBmcmFtZV9idXJ5IDMKCnBjZzEyOF9yYW5kb21fZm9yX2hlYWRlckAzOgogICAgLy8gbGliX3BjZy94c2hfcnJfcXVhZHJ1cGxlXzY0XzMyLnB5OjcwCiAgICAvLyBmb3IgaSBpbiB1cmFuZ2UobGVuZ3RoKTogICMgbm9xYTogQjAwNwogICAgZnJhbWVfZGlnIDMKICAgIGZyYW1lX2RpZyAtMQogICAgPAogICAgYnogcGNnMTI4X3JhbmRvbV9hZnRlcl9pZl9lbHNlQDIwCiAgICAvLyBsaWJfcGNnL3hzaF9ycl9xdWFkcnVwbGVfNjRfMzIucHk6NzEKICAgIC8vIHN0YXRlLCBuID0gX19wY2cxMjhfcmFuZG9tKHN0YXRlKQogICAgZnJhbWVfZGlnIC03CiAgICBmcmFtZV9kaWcgLTYKICAgIGZyYW1lX2RpZyAtNQogICAgZnJhbWVfZGlnIC00CiAgICBjYWxsc3ViIF9fcGNnMTI4X3JhbmRvbQogICAgY292ZXIgNAogICAgZnJhbWVfYnVyeSAtNAogICAgZnJhbWVfYnVyeSAtNQogICAgZnJhbWVfYnVyeSAtNgogICAgZnJhbWVfYnVyeSAtNwogICAgLy8gbGliX3BjZy94c2hfcnJfcXVhZHJ1cGxlXzY0XzMyLnB5OjczCiAgICAvLyByZXN1bHQuYXBwZW5kKGFyYzQuVUludDEyOChuKSkKICAgIGZyYW1lX2RpZyA0CiAgICBleHRyYWN0IDIgMAogICAgc3dhcAogICAgZHVwCiAgICBsZW4KICAgIGludCAxNgogICAgPD0KICAgIGFzc2VydCAvLyBvdmVyZmxvdwogICAgaW50IDE2CiAgICBiemVybwogICAgYnwKICAgIGNvbmNhdAogICAgZHVwCiAgICBsZW4KICAgIGludCAxNgogICAgLwogICAgaXRvYgogICAgZXh0cmFjdCA2IDIKICAgIHN3YXAKICAgIGNvbmNhdAogICAgZnJhbWVfYnVyeSA0CiAgICAvLyBsaWJfcGNnL3hzaF9ycl9xdWFkcnVwbGVfNjRfMzIucHk6NzAKICAgIC8vIGZvciBpIGluIHVyYW5nZShsZW5ndGgpOiAgIyBub3FhOiBCMDA3CiAgICBmcmFtZV9kaWcgMwogICAgaW50IDEKICAgICsKICAgIGZyYW1lX2J1cnkgMwogICAgYiBwY2cxMjhfcmFuZG9tX2Zvcl9oZWFkZXJAMwoKcGNnMTI4X3JhbmRvbV9lbHNlX2JvZHlANzoKICAgIC8vIGxpYl9wY2cveHNoX3JyX3F1YWRydXBsZV82NF8zMi5weTo3NQogICAgLy8gaWYgdXBwZXJfYm91bmQgIT0gMDoKICAgIGZyYW1lX2RpZyAtMgogICAgYnl0ZSAweAogICAgYiE9CiAgICBieiBwY2cxMjhfcmFuZG9tX2Vsc2VfYm9keUA5CiAgICAvLyBsaWJfcGNnL3hzaF9ycl9xdWFkcnVwbGVfNjRfMzIucHk6NzYKICAgIC8vIGFzc2VydCB1cHBlcl9ib3VuZCA+IEJpZ1VJbnQoMSkKICAgIGZyYW1lX2RpZyAtMgogICAgYnl0ZSAweDAxCiAgICBiPgogICAgYXNzZXJ0CiAgICAvLyBsaWJfcGNnL3hzaF9ycl9xdWFkcnVwbGVfNjRfMzIucHk6NzcKICAgIC8vIGFzc2VydCB1cHBlcl9ib3VuZCA8IEJpZ1VJbnQoMSA8PCAxMjgpCiAgICBmcmFtZV9kaWcgLTIKICAgIGJ5dGUgMHgwMTAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwCiAgICBiPAogICAgYXNzZXJ0CiAgICAvLyBsaWJfcGNnL3hzaF9ycl9xdWFkcnVwbGVfNjRfMzIucHk6NzgKICAgIC8vIGFzc2VydCBsb3dlcl9ib3VuZCA8IHVwcGVyX2JvdW5kIC0gQmlnVUludCgxKQogICAgZnJhbWVfZGlnIC0yCiAgICBieXRlIDB4MDEKICAgIGItCiAgICBmcmFtZV9kaWcgLTMKICAgIGI+CiAgICBhc3NlcnQKICAgIC8vIGxpYl9wY2cveHNoX3JyX3F1YWRydXBsZV82NF8zMi5weTo4MAogICAgLy8gYWJzb2x1dGVfYm91bmQgPSB1cHBlcl9ib3VuZCAtIGxvd2VyX2JvdW5kCiAgICBmcmFtZV9kaWcgLTIKICAgIGZyYW1lX2RpZyAtMwogICAgYi0KICAgIGZyYW1lX2J1cnkgMAogICAgYiBwY2cxMjhfcmFuZG9tX2FmdGVyX2lmX2Vsc2VAMTAKCnBjZzEyOF9yYW5kb21fZWxzZV9ib2R5QDk6CiAgICAvLyBsaWJfcGNnL3hzaF9ycl9xdWFkcnVwbGVfNjRfMzIucHk6ODIKICAgIC8vIGFzc2VydCBsb3dlcl9ib3VuZCA8IEJpZ1VJbnQoMSA8PCAxMjggLSAxKQogICAgZnJhbWVfZGlnIC0zCiAgICBieXRlIDB4ODAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAKICAgIGI8CiAgICBhc3NlcnQKICAgIC8vIGxpYl9wY2cveHNoX3JyX3F1YWRydXBsZV82NF8zMi5weTo4NAogICAgLy8gYWJzb2x1dGVfYm91bmQgPSBCaWdVSW50KDEgPDwgMTI4KSAtIGxvd2VyX2JvdW5kCiAgICBieXRlIDB4MDEwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMAogICAgZnJhbWVfZGlnIC0zCiAgICBiLQogICAgZnJhbWVfYnVyeSAwCgpwY2cxMjhfcmFuZG9tX2FmdGVyX2lmX2Vsc2VAMTA6CiAgICAvLyBsaWJfcGNnL3hzaF9ycl9xdWFkcnVwbGVfNjRfMzIucHk6ODYKICAgIC8vIHRocmVzaG9sZCA9IF9fdWludDEyOF90d29zKGFic29sdXRlX2JvdW5kKSAlIGFic29sdXRlX2JvdW5kCiAgICBmcmFtZV9kaWcgMAogICAgZHVwCiAgICBjYWxsc3ViIF9fdWludDEyOF90d29zCiAgICBzd2FwCiAgICBiJQogICAgZnJhbWVfYnVyeSAyCiAgICAvLyBsaWJfcGNnL3hzaF9ycl9xdWFkcnVwbGVfNjRfMzIucHk6ODgKICAgIC8vIGZvciBpIGluIHVyYW5nZShsZW5ndGgpOiAgIyBub3FhOiBCMDA3CiAgICBpbnQgMAogICAgZnJhbWVfYnVyeSAzCgpwY2cxMjhfcmFuZG9tX2Zvcl9oZWFkZXJAMTE6CiAgICAvLyBsaWJfcGNnL3hzaF9ycl9xdWFkcnVwbGVfNjRfMzIucHk6ODgKICAgIC8vIGZvciBpIGluIHVyYW5nZShsZW5ndGgpOiAgIyBub3FhOiBCMDA3CiAgICBmcmFtZV9kaWcgMwogICAgZnJhbWVfZGlnIC0xCiAgICA8CiAgICBieiBwY2cxMjhfcmFuZG9tX2FmdGVyX2ZvckAxOQoKcGNnMTI4X3JhbmRvbV93aGlsZV90b3BAMTM6CiAgICAvLyBsaWJfcGNnL3hzaF9ycl9xdWFkcnVwbGVfNjRfMzIucHk6OTAKICAgIC8vIHN0YXRlLCBjYW5kaWRhdGUgPSBfX3BjZzEyOF9yYW5kb20oc3RhdGUpCiAgICBmcmFtZV9kaWcgLTcKICAgIGZyYW1lX2RpZyAtNgogICAgZnJhbWVfZGlnIC01CiAgICBmcmFtZV9kaWcgLTQKICAgIGNhbGxzdWIgX19wY2cxMjhfcmFuZG9tCiAgICBkdXAKICAgIGNvdmVyIDUKICAgIGZyYW1lX2J1cnkgMQogICAgZnJhbWVfYnVyeSAtNAogICAgZnJhbWVfYnVyeSAtNQogICAgZnJhbWVfYnVyeSAtNgogICAgZnJhbWVfYnVyeSAtNwogICAgLy8gbGliX3BjZy94c2hfcnJfcXVhZHJ1cGxlXzY0XzMyLnB5OjkxCiAgICAvLyBpZiBjYW5kaWRhdGUgPj0gdGhyZXNob2xkOgogICAgZnJhbWVfZGlnIDIKICAgIGI+PQogICAgYnogcGNnMTI4X3JhbmRvbV93aGlsZV90b3BAMTMKICAgIC8vIGxpYl9wY2cveHNoX3JyX3F1YWRydXBsZV82NF8zMi5weTo5MwogICAgLy8gcmVzdWx0LmFwcGVuZChhcmM0LlVJbnQxMjgoKGNhbmRpZGF0ZSAlIGFic29sdXRlX2JvdW5kKSArIGxvd2VyX2JvdW5kKSkKICAgIGZyYW1lX2RpZyA0CiAgICBleHRyYWN0IDIgMAogICAgZnJhbWVfZGlnIDEKICAgIGZyYW1lX2RpZyAwCiAgICBiJQogICAgZnJhbWVfZGlnIC0zCiAgICBiKwogICAgZHVwCiAgICBsZW4KICAgIGludCAxNgogICAgPD0KICAgIGFzc2VydCAvLyBvdmVyZmxvdwogICAgaW50IDE2CiAgICBiemVybwogICAgYnwKICAgIGNvbmNhdAogICAgZHVwCiAgICBsZW4KICAgIGludCAxNgogICAgLwogICAgaXRvYgogICAgZXh0cmFjdCA2IDIKICAgIHN3YXAKICAgIGNvbmNhdAogICAgZnJhbWVfYnVyeSA0CiAgICAvLyBsaWJfcGNnL3hzaF9ycl9xdWFkcnVwbGVfNjRfMzIucHk6ODgKICAgIC8vIGZvciBpIGluIHVyYW5nZShsZW5ndGgpOiAgIyBub3FhOiBCMDA3CiAgICBmcmFtZV9kaWcgMwogICAgaW50IDEKICAgICsKICAgIGZyYW1lX2J1cnkgMwogICAgYiBwY2cxMjhfcmFuZG9tX2Zvcl9oZWFkZXJAMTEKCnBjZzEyOF9yYW5kb21fYWZ0ZXJfZm9yQDE5OgoKcGNnMTI4X3JhbmRvbV9hZnRlcl9pZl9lbHNlQDIwOgogICAgLy8gbGliX3BjZy94c2hfcnJfcXVhZHJ1cGxlXzY0XzMyLnB5Ojk1CiAgICAvLyByZXR1cm4gc3RhdGUsIHJlc3VsdC5jb3B5KCkKICAgIGZyYW1lX2RpZyAtNwogICAgZnJhbWVfZGlnIC02CiAgICBmcmFtZV9kaWcgLTUKICAgIGZyYW1lX2RpZyAtNAogICAgZnJhbWVfZGlnIDQKICAgIHVuY292ZXIgOQogICAgdW5jb3ZlciA5CiAgICB1bmNvdmVyIDkKICAgIHVuY292ZXIgOQogICAgdW5jb3ZlciA5CiAgICByZXRzdWIKCgovLyBsaWJfcGNnLnhzaF9ycl9xdWFkcnVwbGVfNjRfMzIuX19wY2cxMjhfcmFuZG9tKHN0YXRlLjA6IHVpbnQ2NCwgc3RhdGUuMTogdWludDY0LCBzdGF0ZS4yOiB1aW50NjQsIHN0YXRlLjM6IHVpbnQ2NCkgLT4gdWludDY0LCB1aW50NjQsIHVpbnQ2NCwgdWludDY0LCBieXRlczoKX19wY2cxMjhfcmFuZG9tOgogICAgLy8gbGliX3BjZy94c2hfcnJfcXVhZHJ1cGxlXzY0XzMyLnB5Ojk4LTk5CiAgICAvLyBAc3Vicm91dGluZQogICAgLy8gZGVmIF9fcGNnMTI4X3JhbmRvbShzdGF0ZTogUENHMTI4U1RBVEUpIC0+IHR1cGxlW1BDRzEyOFNUQVRFLCBCaWdVSW50XToKICAgIHByb3RvIDQgNQogICAgLy8gbGliX3BjZy94c2hfcnJfcXVhZHJ1cGxlXzY0XzMyLnB5OjExMwogICAgLy8gbmV3X3N0YXRlMSwgcm4xID0gX19wY2czMl9yYW5kb20oc3RhdGVbMF0pCiAgICBmcmFtZV9kaWcgLTQKICAgIGNhbGxzdWIgX19wY2czMl9yYW5kb20KICAgIHN3YXAKICAgIC8vIGxpYl9wY2cveHNoX3JyX3F1YWRydXBsZV82NF8zMi5weToxMTYKICAgIC8vIHN0YXRlWzFdLCBVSW50NjQoUENHX1NFQ09ORF9JTkNSRU1FTlQpIDw8IChuZXdfc3RhdGUxID09IDApCiAgICBkdXAKICAgICEKICAgIGludCAxNDQyNjk1MDQwODg4OTYzNDA5CiAgICBzd2FwCiAgICBzaGwKICAgIC8vIGxpYl9wY2cveHNoX3JyX3F1YWRydXBsZV82NF8zMi5weToxMTUtMTE3CiAgICAvLyBuZXdfc3RhdGUyID0gX19wY2czMl9zdGVwKAogICAgLy8gICAgIHN0YXRlWzFdLCBVSW50NjQoUENHX1NFQ09ORF9JTkNSRU1FTlQpIDw8IChuZXdfc3RhdGUxID09IDApCiAgICAvLyApCiAgICBmcmFtZV9kaWcgLTMKICAgIHN3YXAKICAgIGNhbGxzdWIgX19wY2czMl9zdGVwCiAgICAvLyBsaWJfcGNnL3hzaF9ycl9xdWFkcnVwbGVfNjRfMzIucHk6MTIwCiAgICAvLyBzdGF0ZVsyXSwgVUludDY0KFBDR19USElSRF9JTkNSRU1FTlQpIDw8IChuZXdfc3RhdGUyID09IDApCiAgICBkdXAKICAgICEKICAgIGludCAxNDQyNjk1MDQwODg4OTYzNDExCiAgICBzd2FwCiAgICBzaGwKICAgIC8vIGxpYl9wY2cveHNoX3JyX3F1YWRydXBsZV82NF8zMi5weToxMTktMTIxCiAgICAvLyBuZXdfc3RhdGUzID0gX19wY2czMl9zdGVwKAogICAgLy8gICAgIHN0YXRlWzJdLCBVSW50NjQoUENHX1RISVJEX0lOQ1JFTUVOVCkgPDwgKG5ld19zdGF0ZTIgPT0gMCkKICAgIC8vICkKICAgIGZyYW1lX2RpZyAtMgogICAgc3dhcAogICAgY2FsbHN1YiBfX3BjZzMyX3N0ZXAKICAgIC8vIGxpYl9wY2cveHNoX3JyX3F1YWRydXBsZV82NF8zMi5weToxMjQKICAgIC8vIHN0YXRlWzNdLCBVSW50NjQoUENHX0ZPVVJUSF9JTkNSRU1FTlQpIDw8IChuZXdfc3RhdGUzID09IDApCiAgICBkdXAKICAgICEKICAgIGludCAxNDQyNjk1MDQwODg4OTYzNDEzCiAgICBzd2FwCiAgICBzaGwKICAgIC8vIGxpYl9wY2cveHNoX3JyX3F1YWRydXBsZV82NF8zMi5weToxMjMtMTI1CiAgICAvLyBuZXdfc3RhdGU0ID0gX19wY2czMl9zdGVwKAogICAgLy8gICAgIHN0YXRlWzNdLCBVSW50NjQoUENHX0ZPVVJUSF9JTkNSRU1FTlQpIDw8IChuZXdfc3RhdGUzID09IDApCiAgICAvLyApCiAgICBmcmFtZV9kaWcgLTEKICAgIHN3YXAKICAgIGNhbGxzdWIgX19wY2czMl9zdGVwCiAgICBzd2FwCiAgICAvLyBsaWJfcGNnL3hzaF9ycl9xdWFkcnVwbGVfNjRfMzIucHk6MTMwCiAgICAvLyBvcC5pdG9iKHJuMSA8PCAzMiB8IF9fcGNnMzJfb3V0cHV0KHN0YXRlWzFdKSkKICAgIHVuY292ZXIgNAogICAgaW50IDMyCiAgICBzaGwKICAgIGZyYW1lX2RpZyAtMwogICAgY2FsbHN1YiBfX3BjZzMyX291dHB1dAogICAgfAogICAgaXRvYgogICAgLy8gbGliX3BjZy94c2hfcnJfcXVhZHJ1cGxlXzY0XzMyLnB5OjEzMQogICAgLy8gKyBvcC5pdG9iKF9fcGNnMzJfb3V0cHV0KHN0YXRlWzJdKSA8PCAzMiB8IF9fcGNnMzJfb3V0cHV0KHN0YXRlWzNdKSkKICAgIGZyYW1lX2RpZyAtMgogICAgY2FsbHN1YiBfX3BjZzMyX291dHB1dAogICAgaW50IDMyCiAgICBzaGwKICAgIGZyYW1lX2RpZyAtMQogICAgY2FsbHN1YiBfX3BjZzMyX291dHB1dAogICAgfAogICAgaXRvYgogICAgLy8gbGliX3BjZy94c2hfcnJfcXVhZHJ1cGxlXzY0XzMyLnB5OjEzMC0xMzEKICAgIC8vIG9wLml0b2Iocm4xIDw8IDMyIHwgX19wY2czMl9vdXRwdXQoc3RhdGVbMV0pKQogICAgLy8gKyBvcC5pdG9iKF9fcGNnMzJfb3V0cHV0KHN0YXRlWzJdKSA8PCAzMiB8IF9fcGNnMzJfb3V0cHV0KHN0YXRlWzNdKSkKICAgIGNvbmNhdAogICAgLy8gbGliX3BjZy94c2hfcnJfcXVhZHJ1cGxlXzY0XzMyLnB5OjEyNy0xMzMKICAgIC8vIHJldHVybiAoCiAgICAvLyAgICAgKG5ld19zdGF0ZTEsIG5ld19zdGF0ZTIsIG5ld19zdGF0ZTMsIG5ld19zdGF0ZTQpLAogICAgLy8gICAgIEJpZ1VJbnQuZnJvbV9ieXRlcygKICAgIC8vICAgICAgICAgb3AuaXRvYihybjEgPDwgMzIgfCBfX3BjZzMyX291dHB1dChzdGF0ZVsxXSkpCiAgICAvLyAgICAgICAgICsgb3AuaXRvYihfX3BjZzMyX291dHB1dChzdGF0ZVsyXSkgPDwgMzIgfCBfX3BjZzMyX291dHB1dChzdGF0ZVszXSkpCiAgICAvLyAgICAgKSwKICAgIC8vICkKICAgIHVuY292ZXIgNAogICAgdW5jb3ZlciA0CiAgICB1bmNvdmVyIDMKICAgIHVuY292ZXIgNAogICAgdW5jb3ZlciA0CiAgICByZXRzdWIKCgovLyBsaWJfcGNnLnhzaF9ycl82NF8zMi5fX3BjZzMyX3JhbmRvbShzdGF0ZTogdWludDY0KSAtPiB1aW50NjQsIHVpbnQ2NDoKX19wY2czMl9yYW5kb206CiAgICAvLyBsaWJfcGNnL3hzaF9ycl82NF8zMi5weToyNTQtMjU1CiAgICAvLyBAc3Vicm91dGluZQogICAgLy8gZGVmIF9fcGNnMzJfcmFuZG9tKHN0YXRlOiBQQ0czMlNUQVRFKSAtPiB0dXBsZVtQQ0czMlNUQVRFLCBVSW50NjRdOgogICAgcHJvdG8gMSAyCiAgICAvLyBsaWJfcGNnL3hzaF9ycl82NF8zMi5weToyNzEKICAgIC8vIHJldHVybiBfX3BjZzMyX3N0ZXAoc3RhdGUsIFVJbnQ2NChQQ0dfRklSU1RfSU5DUkVNRU5UKSksIF9fcGNnMzJfb3V0cHV0KHN0YXRlKQogICAgZnJhbWVfZGlnIC0xCiAgICBpbnQgMTQ0MjY5NTA0MDg4ODk2MzQwNwogICAgY2FsbHN1YiBfX3BjZzMyX3N0ZXAKICAgIGZyYW1lX2RpZyAtMQogICAgY2FsbHN1YiBfX3BjZzMyX291dHB1dAogICAgcmV0c3ViCgoKLy8gbGliX3BjZy54c2hfcnJfNjRfMzIuX19wY2czMl9vdXRwdXQoc3RhdGU6IHVpbnQ2NCkgLT4gdWludDY0OgpfX3BjZzMyX291dHB1dDoKICAgIC8vIGxpYl9wY2cveHNoX3JyXzY0XzMyLnB5OjI3NC0yNzYKICAgIC8vICMgVE9ETzogVHJ5IG1lcmdpbmcgb3V0cHV0IGFuZCByb3RhdGlvbiBpbnRvIGEgc2luZ2xlIGZ1bmN0aW9uIGFuZCBtZWFzdXJlIHRoZSBlZmZlY3Qgb24gcGVyZm9ybWFuY2UuCiAgICAvLyBAc3Vicm91dGluZQogICAgLy8gZGVmIF9fcGNnMzJfb3V0cHV0KHN0YXRlOiBQQ0czMlNUQVRFKSAtPiBVSW50NjQ6CiAgICBwcm90byAxIDEKICAgIC8vIGxpYl9wY2cveHNoX3JyXzY0XzMyLnB5OjI3OQogICAgLy8gX19tYXNrX3RvX3VpbnQzMigoKHN0YXRlID4+IDE4KSBeIHN0YXRlKSA+PiAyNyksIHN0YXRlID4+IDU5CiAgICBmcmFtZV9kaWcgLTEKICAgIGludCAxOAogICAgc2hyCiAgICBmcmFtZV9kaWcgLTEKICAgIF4KICAgIGludCAyNwogICAgc2hyCiAgICBjYWxsc3ViIF9fbWFza190b191aW50MzIKICAgIGZyYW1lX2RpZyAtMQogICAgaW50IDU5CiAgICBzaHIKICAgIC8vIGxpYl9wY2cveHNoX3JyXzY0XzMyLnB5OjI3OC0yODAKICAgIC8vIHJldHVybiBfX3BjZzMyX3JvdGF0aW9uKAogICAgLy8gICAgIF9fbWFza190b191aW50MzIoKChzdGF0ZSA+PiAxOCkgXiBzdGF0ZSkgPj4gMjcpLCBzdGF0ZSA+PiA1OQogICAgLy8gKQogICAgY2FsbHN1YiBfX3BjZzMyX3JvdGF0aW9uCiAgICByZXRzdWIKCgovLyBsaWJfcGNnLnhzaF9ycl82NF8zMi5fX21hc2tfdG9fdWludDMyKHZhbHVlOiB1aW50NjQpIC0+IHVpbnQ2NDoKX19tYXNrX3RvX3VpbnQzMjoKICAgIC8vIGxpYl9wY2cveHNoX3JyXzY0XzMyLnB5OjI5Ny0yOTgKICAgIC8vIEBzdWJyb3V0aW5lCiAgICAvLyBkZWYgX19tYXNrX3RvX3VpbnQzMih2YWx1ZTogVUludDY0KSAtPiBVSW50NjQ6CiAgICBwcm90byAxIDEKICAgIC8vIGxpYl9wY2cveHNoX3JyXzY0XzMyLnB5OjMwMAogICAgLy8gcmV0dXJuIHZhbHVlICYgKCgxIDw8IDMyKSAtIDEpCiAgICBmcmFtZV9kaWcgLTEKICAgIGludCA0Mjk0OTY3Mjk1CiAgICAmCiAgICByZXRzdWIKCgovLyBsaWJfcGNnLnhzaF9ycl82NF8zMi5fX3BjZzMyX3JvdGF0aW9uKHZhbHVlOiB1aW50NjQsIHJvdDogdWludDY0KSAtPiB1aW50NjQ6Cl9fcGNnMzJfcm90YXRpb246CiAgICAvLyBsaWJfcGNnL3hzaF9ycl82NF8zMi5weToyODMtMjg0CiAgICAvLyBAc3Vicm91dGluZQogICAgLy8gZGVmIF9fcGNnMzJfcm90YXRpb24odmFsdWU6IFVJbnQ2NCwgcm90OiBVSW50NjQpIC0+IFVJbnQ2NDoKICAgIHByb3RvIDIgMQogICAgLy8gbGliX3BjZy94c2hfcnJfNjRfMzIucHk6Mjg2CiAgICAvLyByZXR1cm4gKHZhbHVlID4+IHJvdCkgfCBfX21hc2tfdG9fdWludDMyKHZhbHVlIDw8IChfX3VpbnQ2NF90d29zKHJvdCkgJiAzMSkpCiAgICBmcmFtZV9kaWcgLTIKICAgIGZyYW1lX2RpZyAtMQogICAgc2hyCiAgICBmcmFtZV9kaWcgLTEKICAgIGNhbGxzdWIgX191aW50NjRfdHdvcwogICAgaW50IDMxCiAgICAmCiAgICBmcmFtZV9kaWcgLTIKICAgIHN3YXAKICAgIHNobAogICAgY2FsbHN1YiBfX21hc2tfdG9fdWludDMyCiAgICB8CiAgICByZXRzdWIKCgovLyBsaWJfcGNnLnhzaF9ycl82NF8zMi5fX3VpbnQ2NF90d29zKHZhbHVlOiB1aW50NjQpIC0+IHVpbnQ2NDoKX191aW50NjRfdHdvczoKICAgIC8vIGxpYl9wY2cveHNoX3JyXzY0XzMyLnB5OjI4OS0yOTAKICAgIC8vIEBzdWJyb3V0aW5lCiAgICAvLyBkZWYgX191aW50NjRfdHdvcyh2YWx1ZTogVUludDY0KSAtPiBVSW50NjQ6CiAgICBwcm90byAxIDEKICAgIC8vIGxpYl9wY2cveHNoX3JyXzY0XzMyLnB5OjI5MgogICAgLy8gX2FkZHdfaGlnaCwgYWRkd19sb3cgPSBvcC5hZGR3KH52YWx1ZSwgMSkKICAgIGZyYW1lX2RpZyAtMQogICAgfgogICAgaW50IDEKICAgIGFkZHcKICAgIGJ1cnkgMQogICAgLy8gbGliX3BjZy94c2hfcnJfNjRfMzIucHk6Mjk0CiAgICAvLyByZXR1cm4gYWRkd19sb3cKICAgIHJldHN1YgoKCi8vIGxpYl9wY2cueHNoX3JyX3F1YWRydXBsZV82NF8zMi5fX3VpbnQxMjhfdHdvcyh2YWx1ZTogYnl0ZXMpIC0+IGJ5dGVzOgpfX3VpbnQxMjhfdHdvczoKICAgIC8vIGxpYl9wY2cveHNoX3JyX3F1YWRydXBsZV82NF8zMi5weToxMzYtMTM3CiAgICAvLyBAc3Vicm91dGluZQogICAgLy8gZGVmIF9fdWludDEyOF90d29zKHZhbHVlOiBCaWdVSW50KSAtPiBCaWdVSW50OgogICAgcHJvdG8gMSAxCiAgICAvLyBsaWJfcGNnL3hzaF9ycl9xdWFkcnVwbGVfNjRfMzIucHk6MTM5CiAgICAvLyByZXR1cm4gKEJpZ1VJbnQuZnJvbV9ieXRlcyh+dmFsdWUuYnl0ZXMpICsgMSkgJiBCaWdVSW50KCgxIDw8IDEyOCkgLSAxKQogICAgZnJhbWVfZGlnIC0xCiAgICBifgogICAgYnl0ZSAweDAxCiAgICBiKwogICAgYnl0ZSAweGZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmCiAgICBiJgogICAgcmV0c3ViCgoKLy8gc21hcnRfY29udHJhY3RzLmxpYl9wY2cxMjhfZXhwb3Nlci5jb250cmFjdC5MaWJQY2cxMjhFeHBvc2VyQWxnb3B5LnVwZGF0ZSgpIC0+IHZvaWQ6CnVwZGF0ZToKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9saWJfcGNnMTI4X2V4cG9zZXIvY29udHJhY3QucHk6MjUtMjYKICAgIC8vIEBhcmM0LmJhcmVtZXRob2QoYWxsb3dfYWN0aW9ucz1bIlVwZGF0ZUFwcGxpY2F0aW9uIl0pCiAgICAvLyBkZWYgdXBkYXRlKHNlbGYpIC0+IE5vbmU6CiAgICBwcm90byAwIDAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9saWJfcGNnMTI4X2V4cG9zZXIvY29udHJhY3QucHk6MjcKICAgIC8vIGFzc2VydCBUeG4uc2VuZGVyID09IEdsb2JhbC5jcmVhdG9yX2FkZHJlc3MKICAgIHR4biBTZW5kZXIKICAgIGdsb2JhbCBDcmVhdG9yQWRkcmVzcwogICAgPT0KICAgIGFzc2VydAogICAgcmV0c3ViCg==",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCgpzbWFydF9jb250cmFjdHMubGliX3BjZzEyOF9leHBvc2VyLmNvbnRyYWN0LkxpYlBjZzEyOEV4cG9zZXJBbGdvcHkuY2xlYXJfc3RhdGVfcHJvZ3JhbToKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9saWJfcGNnMTI4X2V4cG9zZXIvY29udHJhY3QucHk6OAogICAgLy8gY2xhc3MgTGliUGNnMTI4RXhwb3NlckFsZ29weShhcmM0LkFSQzRDb250cmFjdCk6CiAgICBpbnQgMQogICAgcmV0dXJuCg=="
    },
    "state": {
        "global": {
            "num_byte_slices": 0,
            "num_uints": 0
        },
        "local": {
            "num_byte_slices": 0,
            "num_uints": 0
        }
    },
    "schema": {
        "global": {
            "declared": {},
            "reserved": {}
        },
        "local": {
            "declared": {},
            "reserved": {}
        }
    },
    "contract": {
        "name": "LibPcg128ExposerAlgopy",
        "methods": [
            {
                "name": "bounded_rand_uint128",
                "args": [
                    {
                        "type": "byte[32]",
                        "name": "seed"
                    },
                    {
                        "type": "uint128",
                        "name": "lower_bound"
                    },
                    {
                        "type": "uint128",
                        "name": "upper_bound"
                    },
                    {
                        "type": "uint16",
                        "name": "length"
                    }
                ],
                "returns": {
                    "type": "uint128[]"
                }
            }
        ],
        "networks": {}
    },
    "bare_call_config": {
        "no_op": "CREATE",
        "update_application": "CALL"
    }
}"""
APP_SPEC = algokit_utils.ApplicationSpecification.from_json(_APP_SPEC_JSON)
_TReturn = typing.TypeVar("_TReturn")


class _ArgsBase(ABC, typing.Generic[_TReturn]):
    @staticmethod
    @abstractmethod
    def method() -> str:
        ...


_TArgs = typing.TypeVar("_TArgs", bound=_ArgsBase[typing.Any])


@dataclasses.dataclass(kw_only=True)
class _TArgsHolder(typing.Generic[_TArgs]):
    args: _TArgs


def _filter_none(value: dict | typing.Any) -> dict | typing.Any:
    if isinstance(value, dict):
        return {k: _filter_none(v) for k, v in value.items() if v is not None}
    return value


def _as_dict(data: typing.Any, *, convert_all: bool = True) -> dict[str, typing.Any]:
    if data is None:
        return {}
    if not dataclasses.is_dataclass(data):
        raise TypeError(f"{data} must be a dataclass")
    if convert_all:
        result = dataclasses.asdict(data) # type: ignore[call-overload]
    else:
        result = {f.name: getattr(data, f.name) for f in dataclasses.fields(data)}
    return _filter_none(result)


def _convert_transaction_parameters(
    transaction_parameters: algokit_utils.TransactionParameters | None,
) -> algokit_utils.TransactionParametersDict:
    return typing.cast(algokit_utils.TransactionParametersDict, _as_dict(transaction_parameters))


def _convert_call_transaction_parameters(
    transaction_parameters: algokit_utils.TransactionParameters | None,
) -> algokit_utils.OnCompleteCallParametersDict:
    return typing.cast(algokit_utils.OnCompleteCallParametersDict, _as_dict(transaction_parameters))


def _convert_create_transaction_parameters(
    transaction_parameters: algokit_utils.TransactionParameters | None,
    on_complete: algokit_utils.OnCompleteActionName,
) -> algokit_utils.CreateCallParametersDict:
    result = typing.cast(algokit_utils.CreateCallParametersDict, _as_dict(transaction_parameters))
    on_complete_enum = on_complete.replace("_", " ").title().replace(" ", "") + "OC"
    result["on_complete"] = getattr(algosdk.transaction.OnComplete, on_complete_enum)
    return result


def _convert_deploy_args(
    deploy_args: algokit_utils.DeployCallArgs | None,
) -> algokit_utils.ABICreateCallArgsDict | None:
    if deploy_args is None:
        return None

    deploy_args_dict = typing.cast(algokit_utils.ABICreateCallArgsDict, _as_dict(deploy_args))
    if isinstance(deploy_args, _TArgsHolder):
        deploy_args_dict["args"] = _as_dict(deploy_args.args)
        deploy_args_dict["method"] = deploy_args.args.method()

    return deploy_args_dict


@dataclasses.dataclass(kw_only=True)
class BoundedRandUint128Args(_ArgsBase[list[int]]):
    seed: bytes | bytearray | tuple[int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int]
    lower_bound: int
    upper_bound: int
    length: int

    @staticmethod
    def method() -> str:
        return "bounded_rand_uint128(byte[32],uint128,uint128,uint16)uint128[]"


@dataclasses.dataclass(kw_only=True)
class SimulateOptions:
    allow_more_logs: bool = dataclasses.field(default=False)
    allow_empty_signatures: bool = dataclasses.field(default=False)
    extra_opcode_budget: int = dataclasses.field(default=0)
    exec_trace_config: models.SimulateTraceConfig | None         = dataclasses.field(default=None)


class Composer:

    def __init__(self, app_client: algokit_utils.ApplicationClient, atc: AtomicTransactionComposer):
        self.app_client = app_client
        self.atc = atc

    def build(self) -> AtomicTransactionComposer:
        return self.atc

    def simulate(self, options: SimulateOptions | None = None) -> SimulateAtomicTransactionResponse:
        request = models.SimulateRequest(
            allow_more_logs=options.allow_more_logs,
            allow_empty_signatures=options.allow_empty_signatures,
            extra_opcode_budget=options.extra_opcode_budget,
            exec_trace_config=options.exec_trace_config,
            txn_groups=[]
        ) if options else None
        result = self.atc.simulate(self.app_client.algod_client, request)
        return result

    def execute(self) -> AtomicTransactionResponse:
        return self.app_client.execute_atc(self.atc)

    def bounded_rand_uint128(
        self,
        *,
        seed: bytes | bytearray | tuple[int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int],
        lower_bound: int,
        upper_bound: int,
        length: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Adds a call to `bounded_rand_uint128(byte[32],uint128,uint128,uint16)uint128[]` ABI method
        
        :param bytes | bytearray | tuple[int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int] seed: The `seed` ABI parameter
        :param int lower_bound: The `lower_bound` ABI parameter
        :param int upper_bound: The `upper_bound` ABI parameter
        :param int length: The `length` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = BoundedRandUint128Args(
            seed=seed,
            lower_bound=lower_bound,
            upper_bound=upper_bound,
            length=length,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def create_bare(
        self,
        *,
        on_complete: typing.Literal["no_op"] = "no_op",
        transaction_parameters: algokit_utils.CreateTransactionParameters | None = None,
    ) -> "Composer":
        """Adds a call to create an application using the no_op bare method
        
        :param typing.Literal[no_op] on_complete: On completion type to use
        :param algokit_utils.CreateTransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        self.app_client.compose_create(
            self.atc,
            call_abi_method=False,
            transaction_parameters=_convert_create_transaction_parameters(transaction_parameters, on_complete),
        )
        return self

    def update_bare(
        self,
        *,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Adds a calls to the update_application bare method
        
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        self.app_client.compose_update(
            self.atc,
            call_abi_method=False,
            transaction_parameters=_convert_transaction_parameters(transaction_parameters),
        )
        return self

    def clear_state(
        self,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
        app_args: list[bytes] | None = None,
    ) -> "Composer":
        """Adds a call to the application with on completion set to ClearState
    
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :param list[bytes] | None app_args: (optional) Application args to pass"""
    
        self.app_client.compose_clear_state(self.atc, _convert_transaction_parameters(transaction_parameters), app_args)
        return self


class LibPcg128ExposerAlgopyClient:
    """A class for interacting with the LibPcg128ExposerAlgopy app providing high productivity and
    strongly typed methods to deploy and call the app"""

    @typing.overload
    def __init__(
        self,
        algod_client: algosdk.v2client.algod.AlgodClient,
        *,
        app_id: int = 0,
        signer: TransactionSigner | algokit_utils.Account | None = None,
        sender: str | None = None,
        suggested_params: algosdk.transaction.SuggestedParams | None = None,
        template_values: algokit_utils.TemplateValueMapping | None = None,
        app_name: str | None = None,
    ) -> None:
        ...

    @typing.overload
    def __init__(
        self,
        algod_client: algosdk.v2client.algod.AlgodClient,
        *,
        creator: str | algokit_utils.Account,
        indexer_client: algosdk.v2client.indexer.IndexerClient | None = None,
        existing_deployments: algokit_utils.AppLookup | None = None,
        signer: TransactionSigner | algokit_utils.Account | None = None,
        sender: str | None = None,
        suggested_params: algosdk.transaction.SuggestedParams | None = None,
        template_values: algokit_utils.TemplateValueMapping | None = None,
        app_name: str | None = None,
    ) -> None:
        ...

    def __init__(
        self,
        algod_client: algosdk.v2client.algod.AlgodClient,
        *,
        creator: str | algokit_utils.Account | None = None,
        indexer_client: algosdk.v2client.indexer.IndexerClient | None = None,
        existing_deployments: algokit_utils.AppLookup | None = None,
        app_id: int = 0,
        signer: TransactionSigner | algokit_utils.Account | None = None,
        sender: str | None = None,
        suggested_params: algosdk.transaction.SuggestedParams | None = None,
        template_values: algokit_utils.TemplateValueMapping | None = None,
        app_name: str | None = None,
    ) -> None:
        """
        LibPcg128ExposerAlgopyClient can be created with an app_id to interact with an existing application, alternatively
        it can be created with a creator and indexer_client specified to find existing applications by name and creator.
        
        :param AlgodClient algod_client: AlgoSDK algod client
        :param int app_id: The app_id of an existing application, to instead find the application by creator and name
        use the creator and indexer_client parameters
        :param str | Account creator: The address or Account of the app creator to resolve the app_id
        :param IndexerClient indexer_client: AlgoSDK indexer client, only required if deploying or finding app_id by
        creator and app name
        :param AppLookup existing_deployments:
        :param TransactionSigner | Account signer: Account or signer to use to sign transactions, if not specified and
        creator was passed as an Account will use that.
        :param str sender: Address to use as the sender for all transactions, will use the address associated with the
        signer if not specified.
        :param TemplateValueMapping template_values: Values to use for TMPL_* template variables, dictionary keys should
        *NOT* include the TMPL_ prefix
        :param str | None app_name: Name of application to use when deploying, defaults to name defined on the
        Application Specification
            """

        self.app_spec = APP_SPEC
        
        # calling full __init__ signature, so ignoring mypy warning about overloads
        self.app_client = algokit_utils.ApplicationClient(  # type: ignore[call-overload, misc]
            algod_client=algod_client,
            app_spec=self.app_spec,
            app_id=app_id,
            creator=creator,
            indexer_client=indexer_client,
            existing_deployments=existing_deployments,
            signer=signer,
            sender=sender,
            suggested_params=suggested_params,
            template_values=template_values,
            app_name=app_name,
        )

    @property
    def algod_client(self) -> algosdk.v2client.algod.AlgodClient:
        return self.app_client.algod_client

    @property
    def app_id(self) -> int:
        return self.app_client.app_id

    @app_id.setter
    def app_id(self, value: int) -> None:
        self.app_client.app_id = value

    @property
    def app_address(self) -> str:
        return self.app_client.app_address

    @property
    def sender(self) -> str | None:
        return self.app_client.sender

    @sender.setter
    def sender(self, value: str) -> None:
        self.app_client.sender = value

    @property
    def signer(self) -> TransactionSigner | None:
        return self.app_client.signer

    @signer.setter
    def signer(self, value: TransactionSigner) -> None:
        self.app_client.signer = value

    @property
    def suggested_params(self) -> algosdk.transaction.SuggestedParams | None:
        return self.app_client.suggested_params

    @suggested_params.setter
    def suggested_params(self, value: algosdk.transaction.SuggestedParams | None) -> None:
        self.app_client.suggested_params = value

    def bounded_rand_uint128(
        self,
        *,
        seed: bytes | bytearray | tuple[int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int],
        lower_bound: int,
        upper_bound: int,
        length: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[list[int]]:
        """Calls `bounded_rand_uint128(byte[32],uint128,uint128,uint16)uint128[]` ABI method
        
        :param bytes | bytearray | tuple[int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int] seed: The `seed` ABI parameter
        :param int lower_bound: The `lower_bound` ABI parameter
        :param int upper_bound: The `upper_bound` ABI parameter
        :param int length: The `length` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[list[int]]: The result of the transaction"""

        args = BoundedRandUint128Args(
            seed=seed,
            lower_bound=lower_bound,
            upper_bound=upper_bound,
            length=length,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def create_bare(
        self,
        *,
        on_complete: typing.Literal["no_op"] = "no_op",
        transaction_parameters: algokit_utils.CreateTransactionParameters | None = None,
    ) -> algokit_utils.TransactionResponse:
        """Creates an application using the no_op bare method
        
        :param typing.Literal[no_op] on_complete: On completion type to use
        :param algokit_utils.CreateTransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.TransactionResponse: The result of the transaction"""

        result = self.app_client.create(
            call_abi_method=False,
            transaction_parameters=_convert_create_transaction_parameters(transaction_parameters, on_complete),
        )
        return result

    def update_bare(
        self,
        *,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.TransactionResponse:
        """Calls the update_application bare method
        
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.TransactionResponse: The result of the transaction"""

        result = self.app_client.update(
            call_abi_method=False,
            transaction_parameters=_convert_transaction_parameters(transaction_parameters),
        )
        return result

    def clear_state(
        self,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
        app_args: list[bytes] | None = None,
    ) -> algokit_utils.TransactionResponse:
        """Calls the application with on completion set to ClearState
    
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :param list[bytes] | None app_args: (optional) Application args to pass
        :returns algokit_utils.TransactionResponse: The result of the transaction"""
    
        return self.app_client.clear_state(_convert_transaction_parameters(transaction_parameters), app_args)

    def deploy(
        self,
        version: str | None = None,
        *,
        signer: TransactionSigner | None = None,
        sender: str | None = None,
        allow_update: bool | None = None,
        allow_delete: bool | None = None,
        on_update: algokit_utils.OnUpdate = algokit_utils.OnUpdate.Fail,
        on_schema_break: algokit_utils.OnSchemaBreak = algokit_utils.OnSchemaBreak.Fail,
        template_values: algokit_utils.TemplateValueMapping | None = None,
        create_args: algokit_utils.DeployCallArgs | None = None,
        update_args: algokit_utils.DeployCallArgs | None = None,
        delete_args: algokit_utils.DeployCallArgs | None = None,
    ) -> algokit_utils.DeployResponse:
        """Deploy an application and update client to reference it.
        
        Idempotently deploy (create, update/delete if changed) an app against the given name via the given creator
        account, including deploy-time template placeholder substitutions.
        To understand the architecture decisions behind this functionality please see
        <https://github.com/algorandfoundation/algokit-cli/blob/main/docs/architecture-decisions/2023-01-12_smart-contract-deployment.md>
        
        ```{note}
        If there is a breaking state schema change to an existing app (and `on_schema_break` is set to
        'ReplaceApp' the existing app will be deleted and re-created.
        ```
        
        ```{note}
        If there is an update (different TEAL code) to an existing app (and `on_update` is set to 'ReplaceApp')
        the existing app will be deleted and re-created.
        ```
        
        :param str version: version to use when creating or updating app, if None version will be auto incremented
        :param algosdk.atomic_transaction_composer.TransactionSigner signer: signer to use when deploying app
        , if None uses self.signer
        :param str sender: sender address to use when deploying app, if None uses self.sender
        :param bool allow_delete: Used to set the `TMPL_DELETABLE` template variable to conditionally control if an app
        can be deleted
        :param bool allow_update: Used to set the `TMPL_UPDATABLE` template variable to conditionally control if an app
        can be updated
        :param OnUpdate on_update: Determines what action to take if an application update is required
        :param OnSchemaBreak on_schema_break: Determines what action to take if an application schema requirements
        has increased beyond the current allocation
        :param dict[str, int|str|bytes] template_values: Values to use for `TMPL_*` template variables, dictionary keys
        should *NOT* include the TMPL_ prefix
        :param algokit_utils.DeployCallArgs | None create_args: Arguments used when creating an application
        :param algokit_utils.DeployCallArgs | None update_args: Arguments used when updating an application
        :param algokit_utils.DeployCallArgs | None delete_args: Arguments used when deleting an application
        :return DeployResponse: details action taken and relevant transactions
        :raises DeploymentError: If the deployment failed"""

        return self.app_client.deploy(
            version,
            signer=signer,
            sender=sender,
            allow_update=allow_update,
            allow_delete=allow_delete,
            on_update=on_update,
            on_schema_break=on_schema_break,
            template_values=template_values,
            create_args=_convert_deploy_args(create_args),
            update_args=_convert_deploy_args(update_args),
            delete_args=_convert_deploy_args(delete_args),
        )

    def compose(self, atc: AtomicTransactionComposer | None = None) -> Composer:
        return Composer(self.app_client, atc or AtomicTransactionComposer())
