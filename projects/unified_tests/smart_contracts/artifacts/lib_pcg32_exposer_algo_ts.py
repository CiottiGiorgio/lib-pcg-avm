# flake8: noqa
# fmt: off
# mypy: ignore-errors
# This file was automatically generated by algokit-client-generator.
# DO NOT MODIFY IT BY HAND.
# requires: algokit-utils@^3.0.0

# common
import dataclasses
import typing
# core algosdk
import algosdk
from algosdk.transaction import OnComplete
from algosdk.atomic_transaction_composer import TransactionSigner
from algosdk.source_map import SourceMap
from algosdk.transaction import Transaction
from algosdk.v2client.models import SimulateTraceConfig
# utils
import algokit_utils
from algokit_utils import AlgorandClient as _AlgoKitAlgorandClient

_APP_SPEC_JSON = r"""{"arcs": [22, 28], "bareActions": {"call": ["UpdateApplication"], "create": ["NoOp"]}, "methods": [{"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "byte[8]", "name": "seed"}, {"type": "uint32", "name": "lower_bound"}, {"type": "uint32", "name": "upper_bound"}, {"type": "uint16", "name": "length"}], "name": "bounded_rand_uint32", "returns": {"type": "uint32[]"}, "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "byte[8]", "name": "seed"}, {"type": "uint16", "name": "lower_bound"}, {"type": "uint16", "name": "upper_bound"}, {"type": "uint16", "name": "length"}], "name": "bounded_rand_uint16", "returns": {"type": "uint16[]"}, "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "byte[8]", "name": "seed"}, {"type": "uint8", "name": "lower_bound"}, {"type": "uint8", "name": "upper_bound"}, {"type": "uint16", "name": "length"}], "name": "bounded_rand_uint8", "returns": {"type": "uint8[]"}, "events": [], "readonly": false, "recommendations": {}}], "name": "LibPcg32ExposerAlgoTs", "state": {"keys": {"box": {}, "global": {}, "local": {}}, "maps": {"box": {}, "global": {}, "local": {}}, "schema": {"global": {"bytes": 0, "ints": 0}, "local": {"bytes": 0, "ints": 0}}}, "structs": {}, "byteCode": {"approval": "CiAHAQACCK3+1eTUhf2oWM+Cnrvv796CFP////8PJgIEFR98dQIAADEbQQByggME7Qb3CgSNfM55BNCjXh42GgCOAwA6AB4AAiNDMRkURDEYRDYaATYaAjYaAzYaBIgCayhMULAiQzEZFEQxGEQ2GgE2GgI2GgM2GgSIAfMoTFCwIkMxGRREMRhENhoBNhoCNhoDNhoEiAF5KExQsCJDgQQjMRmOAgAJAANC/5wxGBREIkMxGESIAmwiQ4oBAov/IQQdRQEhBR5FAYv/gRKRi/8bgRuRIQYai/+BO5FKkUwcIh5FAYEfGk8CTJAhBhoZiYoFAoAARwaL/4GAgAQMRIv/FlcGAov8JRJAABCL/IEQEkAACIv8gSASQQDMIkSL/IEDkUmMASVMCYwGi/1AADWL/kAAMCOMA4sDi/8MQQAci/uI/3UWiwaLAViLB0xQjAeLAyIIjAOM+0L/3Iv7iweMAYwAiYv+QQBri/4iDUQii/yQi/4NRIv+IgmL/Q1Ei/6L/QmMAIsASRwiHkUBIQYaTBiMBSOMBIsEi/8MQf+8i/uI/xVJTgKMAkyLBQ9BAB+LAosAGIv9CBaLBosBWIsHTFCMB4sEIgiMBIz7Qv/IjPtC/8sii/yQSSIJi/0NRIv9CYwAQv+eI0L/MYoBAYv/FSUSRIv/FyMhBB1FASEFHkUBHkUBIQQdRQEhBR5FAYmKBAGL/Ij/04v9F4v+F4v/F0lOBClOBE8DgSBOBE4EiP69RQEjiwOLAAxBACyLAVcCAIsDSU4CgQQLJAiLAkxaFlcEBFBJFYEEChZXBgJMUIwBIgiMA0L/zIsBjACJigQBi/yI/3WL/ReL/heL/xdJTgQpTgRPA4EQTgROBIj+X0UBI4sDiwAMQQAqiwFXAgCLA0lOAiQLJAiLAkxZFlcGAlBJFSQKFlcGAkxQjAEiCIwDQv/OiwGMAImKBAGL/Ij/GYv9F4v+F4v/F0lOBClOBE8DJU4ETgSI/gRFASOLA4sADEEAKIsBVwIAJIsDSU4DCIsCTCJYFxZXBwFQSRUWVwYCTFCMASIIjANC/9CLAYwAiYoAADEAMgkSRIk=", "clear": "CoEBQw=="}, "compilerInfo": {"compiler": "puya", "compilerVersion": {"major": 4, "minor": 3, "patch": 1}}, "events": [], "networks": {}, "source": {"approval": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYXJjNC9pbmRleC5kLnRzOjpDb250cmFjdC5hcHByb3ZhbFByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBpbnRjYmxvY2sgMSAwIDIgOCA2MzY0MTM2MjIzODQ2NzkzMDA1IDE0NDI2OTUwNDA4ODg5NjM0MDcgNDI5NDk2NzI5NQogICAgYnl0ZWNibG9jayAweDE1MWY3Yzc1IDB4MDAwMAogICAgLy8gc21hcnRfY29udHJhY3RzL2xpYl9wY2czMl9leHBvc2VyX3RzL2NvbnRyYWN0LmFsZ28udHM6NQogICAgLy8gZXhwb3J0IGNsYXNzIExpYlBjZzMyRXhwb3NlckFsZ29UcyBleHRlbmRzIENvbnRyYWN0IHsKICAgIHR4biBOdW1BcHBBcmdzCiAgICBieiBtYWluX2JhcmVfcm91dGluZ0A4CiAgICBwdXNoYnl0ZXNzIDB4ZWQwNmY3MGEgMHg4ZDdjY2U3OSAweGQwYTM1ZTFlIC8vIG1ldGhvZCAiYm91bmRlZF9yYW5kX3VpbnQzMihieXRlWzhdLHVpbnQzMix1aW50MzIsdWludDE2KXVpbnQzMltdIiwgbWV0aG9kICJib3VuZGVkX3JhbmRfdWludDE2KGJ5dGVbOF0sdWludDE2LHVpbnQxNix1aW50MTYpdWludDE2W10iLCBtZXRob2QgImJvdW5kZWRfcmFuZF91aW50OChieXRlWzhdLHVpbnQ4LHVpbnQ4LHVpbnQxNil1aW50OFtdIgogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMAogICAgbWF0Y2ggbWFpbl9ib3VuZGVkX3JhbmRfdWludDMyX3JvdXRlQDMgbWFpbl9ib3VuZGVkX3JhbmRfdWludDE2X3JvdXRlQDQgbWFpbl9ib3VuZGVkX3JhbmRfdWludDhfcm91dGVANQoKbWFpbl9hZnRlcl9pZl9lbHNlQDEzOgogICAgLy8gc21hcnRfY29udHJhY3RzL2xpYl9wY2czMl9leHBvc2VyX3RzL2NvbnRyYWN0LmFsZ28udHM6NQogICAgLy8gZXhwb3J0IGNsYXNzIExpYlBjZzMyRXhwb3NlckFsZ29UcyBleHRlbmRzIENvbnRyYWN0IHsKICAgIGludGNfMSAvLyAwCiAgICByZXR1cm4KCm1haW5fYm91bmRlZF9yYW5kX3VpbnQ4X3JvdXRlQDU6CiAgICAvLyBzbWFydF9jb250cmFjdHMvbGliX3BjZzMyX2V4cG9zZXJfdHMvY29udHJhY3QuYWxnby50czozNC0zOQogICAgLy8gcHVibGljIGJvdW5kZWRfcmFuZF91aW50OCgKICAgIC8vICAgc2VlZDogU3RhdGljQXJyYXk8Qnl0ZSwgOD4sCiAgICAvLyAgIGxvd2VyX2JvdW5kOiBVaW50Tjw4PiwKICAgIC8vICAgdXBwZXJfYm91bmQ6IFVpbnROPDg+LAogICAgLy8gICBsZW5ndGg6IFVpbnROPDE2PgogICAgLy8gKTogRHluYW1pY0FycmF5PFVpbnROPDg+PiB7CiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIG5vdCBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBub3QgY3JlYXRpbmcKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9saWJfcGNnMzJfZXhwb3Nlcl90cy9jb250cmFjdC5hbGdvLnRzOjUKICAgIC8vIGV4cG9ydCBjbGFzcyBMaWJQY2czMkV4cG9zZXJBbGdvVHMgZXh0ZW5kcyBDb250cmFjdCB7CiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAxCiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAyCiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAzCiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyA0CiAgICAvLyBzbWFydF9jb250cmFjdHMvbGliX3BjZzMyX2V4cG9zZXJfdHMvY29udHJhY3QuYWxnby50czozNC0zOQogICAgLy8gcHVibGljIGJvdW5kZWRfcmFuZF91aW50OCgKICAgIC8vICAgc2VlZDogU3RhdGljQXJyYXk8Qnl0ZSwgOD4sCiAgICAvLyAgIGxvd2VyX2JvdW5kOiBVaW50Tjw4PiwKICAgIC8vICAgdXBwZXJfYm91bmQ6IFVpbnROPDg+LAogICAgLy8gICBsZW5ndGg6IFVpbnROPDE2PgogICAgLy8gKTogRHluYW1pY0FycmF5PFVpbnROPDg+PiB7CiAgICBjYWxsc3ViIGJvdW5kZWRfcmFuZF91aW50OAogICAgYnl0ZWNfMCAvLyAweDE1MWY3Yzc1CiAgICBzd2FwCiAgICBjb25jYXQKICAgIGxvZwogICAgaW50Y18wIC8vIDEKICAgIHJldHVybgoKbWFpbl9ib3VuZGVkX3JhbmRfdWludDE2X3JvdXRlQDQ6CiAgICAvLyBzbWFydF9jb250cmFjdHMvbGliX3BjZzMyX2V4cG9zZXJfdHMvY29udHJhY3QuYWxnby50czoyMC0yNQogICAgLy8gcHVibGljIGJvdW5kZWRfcmFuZF91aW50MTYoCiAgICAvLyAgIHNlZWQ6IFN0YXRpY0FycmF5PEJ5dGUsIDg+LAogICAgLy8gICBsb3dlcl9ib3VuZDogVWludE48MTY+LAogICAgLy8gICB1cHBlcl9ib3VuZDogVWludE48MTY+LAogICAgLy8gICBsZW5ndGg6IFVpbnROPDE2PgogICAgLy8gKTogRHluYW1pY0FycmF5PFVpbnROPDE2Pj4gewogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBub3QgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gbm90IGNyZWF0aW5nCiAgICAvLyBzbWFydF9jb250cmFjdHMvbGliX3BjZzMyX2V4cG9zZXJfdHMvY29udHJhY3QuYWxnby50czo1CiAgICAvLyBleHBvcnQgY2xhc3MgTGliUGNnMzJFeHBvc2VyQWxnb1RzIGV4dGVuZHMgQ29udHJhY3QgewogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMgogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMwogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgNAogICAgLy8gc21hcnRfY29udHJhY3RzL2xpYl9wY2czMl9leHBvc2VyX3RzL2NvbnRyYWN0LmFsZ28udHM6MjAtMjUKICAgIC8vIHB1YmxpYyBib3VuZGVkX3JhbmRfdWludDE2KAogICAgLy8gICBzZWVkOiBTdGF0aWNBcnJheTxCeXRlLCA4PiwKICAgIC8vICAgbG93ZXJfYm91bmQ6IFVpbnROPDE2PiwKICAgIC8vICAgdXBwZXJfYm91bmQ6IFVpbnROPDE2PiwKICAgIC8vICAgbGVuZ3RoOiBVaW50TjwxNj4KICAgIC8vICk6IER5bmFtaWNBcnJheTxVaW50TjwxNj4+IHsKICAgIGNhbGxzdWIgYm91bmRlZF9yYW5kX3VpbnQxNgogICAgYnl0ZWNfMCAvLyAweDE1MWY3Yzc1CiAgICBzd2FwCiAgICBjb25jYXQKICAgIGxvZwogICAgaW50Y18wIC8vIDEKICAgIHJldHVybgoKbWFpbl9ib3VuZGVkX3JhbmRfdWludDMyX3JvdXRlQDM6CiAgICAvLyBzbWFydF9jb250cmFjdHMvbGliX3BjZzMyX2V4cG9zZXJfdHMvY29udHJhY3QuYWxnby50czo2LTExCiAgICAvLyBwdWJsaWMgYm91bmRlZF9yYW5kX3VpbnQzMigKICAgIC8vICAgc2VlZDogU3RhdGljQXJyYXk8Qnl0ZSwgOD4sCiAgICAvLyAgIGxvd2VyX2JvdW5kOiBVaW50TjwzMj4sCiAgICAvLyAgIHVwcGVyX2JvdW5kOiBVaW50TjwzMj4sCiAgICAvLyAgIGxlbmd0aDogVWludE48MTY+CiAgICAvLyApOiBEeW5hbWljQXJyYXk8VWludE48MzI+PiB7CiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIG5vdCBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBub3QgY3JlYXRpbmcKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9saWJfcGNnMzJfZXhwb3Nlcl90cy9jb250cmFjdC5hbGdvLnRzOjUKICAgIC8vIGV4cG9ydCBjbGFzcyBMaWJQY2czMkV4cG9zZXJBbGdvVHMgZXh0ZW5kcyBDb250cmFjdCB7CiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAxCiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAyCiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAzCiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyA0CiAgICAvLyBzbWFydF9jb250cmFjdHMvbGliX3BjZzMyX2V4cG9zZXJfdHMvY29udHJhY3QuYWxnby50czo2LTExCiAgICAvLyBwdWJsaWMgYm91bmRlZF9yYW5kX3VpbnQzMigKICAgIC8vICAgc2VlZDogU3RhdGljQXJyYXk8Qnl0ZSwgOD4sCiAgICAvLyAgIGxvd2VyX2JvdW5kOiBVaW50TjwzMj4sCiAgICAvLyAgIHVwcGVyX2JvdW5kOiBVaW50TjwzMj4sCiAgICAvLyAgIGxlbmd0aDogVWludE48MTY+CiAgICAvLyApOiBEeW5hbWljQXJyYXk8VWludE48MzI+PiB7CiAgICBjYWxsc3ViIGJvdW5kZWRfcmFuZF91aW50MzIKICAgIGJ5dGVjXzAgLy8gMHgxNTFmN2M3NQogICAgc3dhcAogICAgY29uY2F0CiAgICBsb2cKICAgIGludGNfMCAvLyAxCiAgICByZXR1cm4KCm1haW5fYmFyZV9yb3V0aW5nQDg6CiAgICAvLyBzbWFydF9jb250cmFjdHMvbGliX3BjZzMyX2V4cG9zZXJfdHMvY29udHJhY3QuYWxnby50czo1CiAgICAvLyBleHBvcnQgY2xhc3MgTGliUGNnMzJFeHBvc2VyQWxnb1RzIGV4dGVuZHMgQ29udHJhY3QgewogICAgcHVzaGludCA0IC8vIDQKICAgIGludGNfMSAvLyAwCiAgICB0eG4gT25Db21wbGV0aW9uCiAgICBtYXRjaCBtYWluX3VwZGF0ZUA5IG1haW5fX19hbGdvdHNfXy5kZWZhdWx0Q3JlYXRlQDEwCiAgICBiIG1haW5fYWZ0ZXJfaWZfZWxzZUAxMwoKbWFpbl9fX2FsZ290c19fLmRlZmF1bHRDcmVhdGVAMTA6CiAgICAvLyBzbWFydF9jb250cmFjdHMvbGliX3BjZzMyX2V4cG9zZXJfdHMvY29udHJhY3QuYWxnby50czo1CiAgICAvLyBleHBvcnQgY2xhc3MgTGliUGNnMzJFeHBvc2VyQWxnb1RzIGV4dGVuZHMgQ29udHJhY3QgewogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgICEKICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gY3JlYXRpbmcKICAgIGludGNfMCAvLyAxCiAgICByZXR1cm4KCm1haW5fdXBkYXRlQDk6CiAgICAvLyBzbWFydF9jb250cmFjdHMvbGliX3BjZzMyX2V4cG9zZXJfdHMvY29udHJhY3QuYWxnby50czo0OAogICAgLy8gQGJhcmVtZXRob2QoeyBhbGxvd0FjdGlvbnM6IFsnVXBkYXRlQXBwbGljYXRpb24nXSB9KQogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gbm90IGNyZWF0aW5nCiAgICBjYWxsc3ViIHVwZGF0ZQogICAgaW50Y18wIC8vIDEKICAgIHJldHVybgoKCi8vIGxpYl9wY2cvcGNnMzIuYWxnby50czo6X19wY2czMlVuYm91bmRlZFJhbmRvbShzdGF0ZTogdWludDY0KSAtPiB1aW50NjQsIHVpbnQ2NDoKX19wY2czMlVuYm91bmRlZFJhbmRvbToKICAgIC8vIGxpYl9wY2cvcGNnMzIuYWxnby50czoyOQogICAgLy8gZXhwb3J0IGZ1bmN0aW9uIF9fcGNnMzJVbmJvdW5kZWRSYW5kb20oc3RhdGU6IFBDRzMyU1RBVEUpOiBbUENHMzJTVEFURSwgdWludDY0XSB7CiAgICBwcm90byAxIDIKICAgIC8vIGxpYl9wY2cvcGNnMzIuYWxnby50czoxNwogICAgLy8gY29uc3QgWywgbXVsTG93XSA9IG9wLm11bHcoc3RhdGUsIHBjZ011bHRpcGxpZXIpOwogICAgZnJhbWVfZGlnIC0xCiAgICAvLyBsaWJfcGNnL2NvbnN0cy5hbGdvLnRzOjQKICAgIC8vIGV4cG9ydCBjb25zdCBwY2dNdWx0aXBsaWVyID0gVWludDY0KDYzNjQxMzYyMjM4NDY3OTMwMDVuKTsKICAgIGludGMgNCAvLyA2MzY0MTM2MjIzODQ2NzkzMDA1CiAgICAvLyBsaWJfcGNnL3BjZzMyLmFsZ28udHM6MTcKICAgIC8vIGNvbnN0IFssIG11bExvd10gPSBvcC5tdWx3KHN0YXRlLCBwY2dNdWx0aXBsaWVyKTsKICAgIG11bHcKICAgIGJ1cnkgMQogICAgLy8gbGliX3BjZy9jb25zdHMuYWxnby50czo2CiAgICAvLyBleHBvcnQgY29uc3QgcGNnRmlyc3RJbmNyZW1lbnQgPSBVaW50NjQoMTQ0MjY5NTA0MDg4ODk2MzQwN24pOwogICAgaW50YyA1IC8vIDE0NDI2OTUwNDA4ODg5NjM0MDcKICAgIC8vIGxpYl9wY2cvcGNnMzIuYWxnby50czoxOAogICAgLy8gY29uc3QgWywgYWRkTG93XSA9IG9wLmFkZHcobXVsTG93LCBpbmNyKTsKICAgIGFkZHcKICAgIGJ1cnkgMQogICAgLy8gbGliX3BjZy9wY2czMi5hbGdvLnRzOjI0CiAgICAvLyBjb25zdCB4b3JzaGlmdGVkID0gX19tYXNrVG9VaW50MzIob3Auc2hyKG9wLnNocihzdGF0ZSwgMTgpIF4gc3RhdGUsIDI3KSk7CiAgICBmcmFtZV9kaWcgLTEKICAgIHB1c2hpbnQgMTggLy8gMTgKICAgIHNocgogICAgZnJhbWVfZGlnIC0xCiAgICBeCiAgICBwdXNoaW50IDI3IC8vIDI3CiAgICBzaHIKICAgIC8vIGxpYl9wY2cvcGNnMzIuYWxnby50czoxMwogICAgLy8gcmV0dXJuIHZhbHVlICYgKG9wLnNobCgxLCAzMikgLSAxKTsKICAgIGludGMgNiAvLyA0Mjk0OTY3Mjk1CiAgICAmCiAgICAvLyBsaWJfcGNnL3BjZzMyLmFsZ28udHM6MjUKICAgIC8vIGNvbnN0IHJvdCA9IG9wLnNocihzdGF0ZSwgNTkpOwogICAgZnJhbWVfZGlnIC0xCiAgICBwdXNoaW50IDU5IC8vIDU5CiAgICBzaHIKICAgIC8vIGxpYl9wY2cvcGNnMzIuYWxnby50czoyNgogICAgLy8gcmV0dXJuIG9wLnNocih4b3JzaGlmdGVkLCByb3QpIHwgX19tYXNrVG9VaW50MzIob3Auc2hsKHhvcnNoaWZ0ZWQsIF9fdWludDY0VHdvcyhyb3QpICYgMzEpKTsKICAgIGR1cDIKICAgIHNocgogICAgLy8gbGliX3BjZy9wY2czMi5hbGdvLnRzOjgKICAgIC8vIGNvbnN0IFssIGFkZExvd10gPSBvcC5hZGR3KH52YWx1ZSwgMSk7CiAgICBzd2FwCiAgICB+CiAgICBpbnRjXzAgLy8gMQogICAgYWRkdwogICAgYnVyeSAxCiAgICAvLyBsaWJfcGNnL3BjZzMyLmFsZ28udHM6MjYKICAgIC8vIHJldHVybiBvcC5zaHIoeG9yc2hpZnRlZCwgcm90KSB8IF9fbWFza1RvVWludDMyKG9wLnNobCh4b3JzaGlmdGVkLCBfX3VpbnQ2NFR3b3Mocm90KSAmIDMxKSk7CiAgICBwdXNoaW50IDMxIC8vIDMxCiAgICAmCiAgICB1bmNvdmVyIDIKICAgIHN3YXAKICAgIHNobAogICAgLy8gbGliX3BjZy9wY2czMi5hbGdvLnRzOjEzCiAgICAvLyByZXR1cm4gdmFsdWUgJiAob3Auc2hsKDEsIDMyKSAtIDEpOwogICAgaW50YyA2IC8vIDQyOTQ5NjcyOTUKICAgICYKICAgIC8vIGxpYl9wY2cvcGNnMzIuYWxnby50czoyNgogICAgLy8gcmV0dXJuIG9wLnNocih4b3JzaGlmdGVkLCByb3QpIHwgX19tYXNrVG9VaW50MzIob3Auc2hsKHhvcnNoaWZ0ZWQsIF9fdWludDY0VHdvcyhyb3QpICYgMzEpKTsKICAgIHwKICAgIC8vIGxpYl9wY2cvcGNnMzIuYWxnby50czozMAogICAgLy8gcmV0dXJuIFtfX3BjZzMyU3RlcChzdGF0ZSwgcGNnRmlyc3RJbmNyZW1lbnQpLCBfX3BjZzMyT3V0cHV0KHN0YXRlKV07CiAgICByZXRzdWIKCgovLyBsaWJfcGNnL3BjZzMyLmFsZ28udHM6Ol9fcGNnMzJCb3VuZGVkU2VxdWVuY2Uoc3RhdGU6IHVpbnQ2NCwgYml0U2l6ZTogdWludDY0LCBsb3dlckJvdW5kOiB1aW50NjQsIHVwcGVyQm91bmQ6IHVpbnQ2NCwgbGVuZ3RoOiB1aW50NjQpIC0+IHVpbnQ2NCwgYnl0ZXM6Cl9fcGNnMzJCb3VuZGVkU2VxdWVuY2U6CiAgICAvLyBsaWJfcGNnL3BjZzMyLmFsZ28udHM6MzMtMzkKICAgIC8vIGZ1bmN0aW9uIF9fcGNnMzJCb3VuZGVkU2VxdWVuY2UoCiAgICAvLyAgIHN0YXRlOiBQQ0czMlNUQVRFLAogICAgLy8gICBiaXRTaXplOiB1aW50NjQsCiAgICAvLyAgIGxvd2VyQm91bmQ6IHVpbnQ2NCwKICAgIC8vICAgdXBwZXJCb3VuZDogdWludDY0LAogICAgLy8gICBsZW5ndGg6IHVpbnQ2NAogICAgLy8gKTogW1BDRzMyU1RBVEUsIGJ5dGVzXSB7CiAgICBwcm90byA1IDIKICAgIHB1c2hieXRlcyAiIgogICAgZHVwbiA2CiAgICAvLyBsaWJfcGNnL3BjZzMyLmFsZ28udHM6NDIKICAgIC8vIGFzc2VydChsZW5ndGggPCBvcC5zaGwoMSwgMTYpKTsKICAgIGZyYW1lX2RpZyAtMQogICAgcHVzaGludCA2NTUzNiAvLyA2NTUzNgogICAgPAogICAgYXNzZXJ0CiAgICAvLyBsaWJfcGNnL3BjZzMyLmFsZ28udHM6NDMKICAgIC8vIHJlc3VsdCA9IG5ldyBVaW50TjwxNj4obGVuZ3RoKS5ieXRlczsKICAgIGZyYW1lX2RpZyAtMQogICAgaXRvYgogICAgZXh0cmFjdCA2IDIKICAgIC8vIGxpYl9wY2cvcGNnMzIuYWxnby50czo0NQogICAgLy8gYXNzZXJ0KGJpdFNpemUgPT09IDggfHwgYml0U2l6ZSA9PT0gMTYgfHwgYml0U2l6ZSA9PT0gMzIpOwogICAgZnJhbWVfZGlnIC00CiAgICBpbnRjXzMgLy8gOAogICAgPT0KICAgIGJueiBfX3BjZzMyQm91bmRlZFNlcXVlbmNlX2Jvb2xfdHJ1ZUAzCiAgICBmcmFtZV9kaWcgLTQKICAgIHB1c2hpbnQgMTYgLy8gMTYKICAgID09CiAgICBibnogX19wY2czMkJvdW5kZWRTZXF1ZW5jZV9ib29sX3RydWVAMwogICAgZnJhbWVfZGlnIC00CiAgICBwdXNoaW50IDMyIC8vIDMyCiAgICA9PQogICAgYnogX19wY2czMkJvdW5kZWRTZXF1ZW5jZV9ib29sX2ZhbHNlQDQKCl9fcGNnMzJCb3VuZGVkU2VxdWVuY2VfYm9vbF90cnVlQDM6CiAgICBpbnRjXzAgLy8gMQoKX19wY2czMkJvdW5kZWRTZXF1ZW5jZV9ib29sX21lcmdlQDU6CiAgICAvLyBsaWJfcGNnL3BjZzMyLmFsZ28udHM6NDUKICAgIC8vIGFzc2VydChiaXRTaXplID09PSA4IHx8IGJpdFNpemUgPT09IDE2IHx8IGJpdFNpemUgPT09IDMyKTsKICAgIGFzc2VydAogICAgLy8gbGliX3BjZy9wY2czMi5hbGdvLnRzOjQ2CiAgICAvLyBjb25zdCBieXRlU2l6ZSA9IG9wLnNocihiaXRTaXplLCAzKTsKICAgIGZyYW1lX2RpZyAtNAogICAgcHVzaGludCAzIC8vIDMKICAgIHNocgogICAgZHVwCiAgICBmcmFtZV9idXJ5IDEKICAgIC8vIGxpYl9wY2cvcGNnMzIuYWxnby50czo0NwogICAgLy8gY29uc3QgdHJ1bmNhdGVkU3RhcnRDYWNoZWQ6IHVpbnQ2NCA9IFVpbnQ2NCg4KSAtIGJ5dGVTaXplOwogICAgaW50Y18zIC8vIDgKICAgIHN3YXAKICAgIC0KICAgIGZyYW1lX2J1cnkgNgogICAgLy8gbGliX3BjZy9wY2czMi5hbGdvLnRzOjUxCiAgICAvLyBpZiAobG93ZXJCb3VuZCA9PT0gMCAmJiB1cHBlckJvdW5kID09PSAwKSB7CiAgICBmcmFtZV9kaWcgLTMKICAgIGJueiBfX3BjZzMyQm91bmRlZFNlcXVlbmNlX2Vsc2VfYm9keUAxMQogICAgZnJhbWVfZGlnIC0yCiAgICBibnogX19wY2czMkJvdW5kZWRTZXF1ZW5jZV9lbHNlX2JvZHlAMTEKICAgIC8vIGxpYl9wY2cvcGNnMzIuYWxnby50czo1MgogICAgLy8gZm9yIChsZXQgaSA9IFVpbnQ2NCgwKTsgaSA8IGxlbmd0aDsgaSA9IGkgKyAxKSB7CiAgICBpbnRjXzEgLy8gMAogICAgZnJhbWVfYnVyeSAzCgpfX3BjZzMyQm91bmRlZFNlcXVlbmNlX3doaWxlX3RvcEA4OgogICAgLy8gbGliX3BjZy9wY2czMi5hbGdvLnRzOjUyCiAgICAvLyBmb3IgKGxldCBpID0gVWludDY0KDApOyBpIDwgbGVuZ3RoOyBpID0gaSArIDEpIHsKICAgIGZyYW1lX2RpZyAzCiAgICBmcmFtZV9kaWcgLTEKICAgIDwKICAgIGJ6IF9fcGNnMzJCb3VuZGVkU2VxdWVuY2VfYWZ0ZXJfaWZfZWxzZUAyNAogICAgLy8gbGliX3BjZy9wY2czMi5hbGdvLnRzOjUzCiAgICAvLyBjb25zdCBbbmV3U3RhdGUsIG5dID0gX19wY2czMlVuYm91bmRlZFJhbmRvbShzdGF0ZSk7CiAgICBmcmFtZV9kaWcgLTUKICAgIGNhbGxzdWIgX19wY2czMlVuYm91bmRlZFJhbmRvbQogICAgLy8gbGliX3BjZy9wY2czMi5hbGdvLnRzOjU2CiAgICAvLyByZXN1bHQgPSBvcC5jb25jYXQocmVzdWx0LCBvcC5leHRyYWN0KG9wLml0b2IobiksIHRydW5jYXRlZFN0YXJ0Q2FjaGVkLCBieXRlU2l6ZSkpOwogICAgaXRvYgogICAgZnJhbWVfZGlnIDYKICAgIGZyYW1lX2RpZyAxCiAgICBleHRyYWN0MwogICAgZnJhbWVfZGlnIDcKICAgIHN3YXAKICAgIGNvbmNhdAogICAgZnJhbWVfYnVyeSA3CiAgICAvLyBsaWJfcGNnL3BjZzMyLmFsZ28udHM6NTIKICAgIC8vIGZvciAobGV0IGkgPSBVaW50NjQoMCk7IGkgPCBsZW5ndGg7IGkgPSBpICsgMSkgewogICAgZnJhbWVfZGlnIDMKICAgIGludGNfMCAvLyAxCiAgICArCiAgICBmcmFtZV9idXJ5IDMKICAgIGZyYW1lX2J1cnkgLTUKICAgIGIgX19wY2czMkJvdW5kZWRTZXF1ZW5jZV93aGlsZV90b3BAOAoKX19wY2czMkJvdW5kZWRTZXF1ZW5jZV9hZnRlcl9pZl9lbHNlQDI0OgogICAgLy8gbGliX3BjZy9wY2czMi5hbGdvLnRzOjg4CiAgICAvLyByZXR1cm4gW3N0YXRlLCByZXN1bHRdOwogICAgZnJhbWVfZGlnIC01CiAgICBmcmFtZV9kaWcgNwogICAgZnJhbWVfYnVyeSAxCiAgICBmcmFtZV9idXJ5IDAKICAgIHJldHN1YgoKX19wY2czMkJvdW5kZWRTZXF1ZW5jZV9lbHNlX2JvZHlAMTE6CiAgICAvLyBsaWJfcGNnL3BjZzMyLmFsZ28udHM6NTkKICAgIC8vIGlmICh1cHBlckJvdW5kICE9PSAwKSB7CiAgICBmcmFtZV9kaWcgLTIKICAgIGJ6IF9fcGNnMzJCb3VuZGVkU2VxdWVuY2VfZWxzZV9ib2R5QDEzCiAgICAvLyBsaWJfcGNnL3BjZzMyLmFsZ28udHM6NjAKICAgIC8vIGFzc2VydCh1cHBlckJvdW5kID4gMSk7CiAgICBmcmFtZV9kaWcgLTIKICAgIGludGNfMCAvLyAxCiAgICA+CiAgICBhc3NlcnQKICAgIC8vIGxpYl9wY2cvcGNnMzIuYWxnby50czo2MQogICAgLy8gYXNzZXJ0KHVwcGVyQm91bmQgPCBvcC5zaGwoMSwgYml0U2l6ZSkpOwogICAgaW50Y18wIC8vIDEKICAgIGZyYW1lX2RpZyAtNAogICAgc2hsCiAgICBmcmFtZV9kaWcgLTIKICAgID4KICAgIGFzc2VydAogICAgLy8gbGliX3BjZy9wY2czMi5hbGdvLnRzOjYyCiAgICAvLyBhc3NlcnQobG93ZXJCb3VuZCA8IHVwcGVyQm91bmQgLSAxKTsKICAgIGZyYW1lX2RpZyAtMgogICAgaW50Y18wIC8vIDEKICAgIC0KICAgIGZyYW1lX2RpZyAtMwogICAgPgogICAgYXNzZXJ0CiAgICAvLyBsaWJfcGNnL3BjZzMyLmFsZ28udHM6NjQKICAgIC8vIGFic29sdXRlQm91bmQgPSB1cHBlckJvdW5kIC0gbG93ZXJCb3VuZDsKICAgIGZyYW1lX2RpZyAtMgogICAgZnJhbWVfZGlnIC0zCiAgICAtCiAgICBmcmFtZV9idXJ5IDAKCl9fcGNnMzJCb3VuZGVkU2VxdWVuY2VfYWZ0ZXJfaWZfZWxzZUAxNDoKICAgIC8vIGxpYl9wY2cvcGNnMzIuYWxnby50czo4CiAgICAvLyBjb25zdCBbLCBhZGRMb3ddID0gb3AuYWRkdyh+dmFsdWUsIDEpOwogICAgZnJhbWVfZGlnIDAKICAgIGR1cAogICAgfgogICAgaW50Y18wIC8vIDEKICAgIGFkZHcKICAgIGJ1cnkgMQogICAgLy8gbGliX3BjZy9wY2czMi5hbGdvLnRzOjEzCiAgICAvLyByZXR1cm4gdmFsdWUgJiAob3Auc2hsKDEsIDMyKSAtIDEpOwogICAgaW50YyA2IC8vIDQyOTQ5NjcyOTUKICAgICYKICAgIC8vIGxpYl9wY2cvcGNnMzIuYWxnby50czo3MQogICAgLy8gY29uc3QgdGhyZXNob2xkOiB1aW50NjQgPSBfX21hc2tUb1VpbnQzMihfX3VpbnQ2NFR3b3MoYWJzb2x1dGVCb3VuZCkpICUgYWJzb2x1dGVCb3VuZDsKICAgIHN3YXAKICAgICUKICAgIGZyYW1lX2J1cnkgNQogICAgLy8gbGliX3BjZy9wY2czMi5hbGdvLnRzOjczCiAgICAvLyBmb3IgKGxldCBpID0gVWludDY0KDApOyBpIDwgbGVuZ3RoOyBpID0gaSArIDEpIHsKICAgIGludGNfMSAvLyAwCiAgICBmcmFtZV9idXJ5IDQKCl9fcGNnMzJCb3VuZGVkU2VxdWVuY2Vfd2hpbGVfdG9wQDE1OgogICAgLy8gbGliX3BjZy9wY2czMi5hbGdvLnRzOjczCiAgICAvLyBmb3IgKGxldCBpID0gVWludDY0KDApOyBpIDwgbGVuZ3RoOyBpID0gaSArIDEpIHsKICAgIGZyYW1lX2RpZyA0CiAgICBmcmFtZV9kaWcgLTEKICAgIDwKICAgIGJ6IF9fcGNnMzJCb3VuZGVkU2VxdWVuY2VfYWZ0ZXJfaWZfZWxzZUAyNAoKX19wY2czMkJvdW5kZWRTZXF1ZW5jZV93aGlsZV90b3BAMTc6CiAgICAvLyBsaWJfcGNnL3BjZzMyLmFsZ28udHM6NzUKICAgIC8vIGNvbnN0IFtuZXdTdGF0ZSwgY2FuZGlkYXRlXSA9IF9fcGNnMzJVbmJvdW5kZWRSYW5kb20oc3RhdGUpOwogICAgZnJhbWVfZGlnIC01CiAgICBjYWxsc3ViIF9fcGNnMzJVbmJvdW5kZWRSYW5kb20KICAgIGR1cAogICAgY292ZXIgMgogICAgZnJhbWVfYnVyeSAyCiAgICBzd2FwCiAgICAvLyBsaWJfcGNnL3BjZzMyLmFsZ28udHM6NzcKICAgIC8vIGlmIChjYW5kaWRhdGUgPj0gdGhyZXNob2xkKSB7CiAgICBmcmFtZV9kaWcgNQogICAgPj0KICAgIGJ6IF9fcGNnMzJCb3VuZGVkU2VxdWVuY2VfYWZ0ZXJfaWZfZWxzZUAyMAogICAgLy8gbGliX3BjZy9wY2czMi5hbGdvLnRzOjgwCiAgICAvLyBvcC5leHRyYWN0KG9wLml0b2IoKGNhbmRpZGF0ZSAlIGFic29sdXRlQm91bmQpICsgbG93ZXJCb3VuZCksIHRydW5jYXRlZFN0YXJ0Q2FjaGVkLCBieXRlU2l6ZSkKICAgIGZyYW1lX2RpZyAyCiAgICBmcmFtZV9kaWcgMAogICAgJQogICAgZnJhbWVfZGlnIC0zCiAgICArCiAgICBpdG9iCiAgICBmcmFtZV9kaWcgNgogICAgZnJhbWVfZGlnIDEKICAgIGV4dHJhY3QzCiAgICAvLyBsaWJfcGNnL3BjZzMyLmFsZ28udHM6NzgtODEKICAgIC8vIHJlc3VsdCA9IG9wLmNvbmNhdCgKICAgIC8vICAgcmVzdWx0LAogICAgLy8gICBvcC5leHRyYWN0KG9wLml0b2IoKGNhbmRpZGF0ZSAlIGFic29sdXRlQm91bmQpICsgbG93ZXJCb3VuZCksIHRydW5jYXRlZFN0YXJ0Q2FjaGVkLCBieXRlU2l6ZSkKICAgIC8vICk7CiAgICBmcmFtZV9kaWcgNwogICAgc3dhcAogICAgY29uY2F0CiAgICBmcmFtZV9idXJ5IDcKICAgIC8vIGxpYl9wY2cvcGNnMzIuYWxnby50czo3MwogICAgLy8gZm9yIChsZXQgaSA9IFVpbnQ2NCgwKTsgaSA8IGxlbmd0aDsgaSA9IGkgKyAxKSB7CiAgICBmcmFtZV9kaWcgNAogICAgaW50Y18wIC8vIDEKICAgICsKICAgIGZyYW1lX2J1cnkgNAogICAgZnJhbWVfYnVyeSAtNQogICAgYiBfX3BjZzMyQm91bmRlZFNlcXVlbmNlX3doaWxlX3RvcEAxNQoKX19wY2czMkJvdW5kZWRTZXF1ZW5jZV9hZnRlcl9pZl9lbHNlQDIwOgogICAgZnJhbWVfYnVyeSAtNQogICAgYiBfX3BjZzMyQm91bmRlZFNlcXVlbmNlX3doaWxlX3RvcEAxNwoKX19wY2czMkJvdW5kZWRTZXF1ZW5jZV9lbHNlX2JvZHlAMTM6CiAgICAvLyBsaWJfcGNnL3BjZzMyLmFsZ28udHM6NjYKICAgIC8vIGFzc2VydChsb3dlckJvdW5kIDwgb3Auc2hsKDEsIGJpdFNpemUpIC0gMSk7CiAgICBpbnRjXzAgLy8gMQogICAgZnJhbWVfZGlnIC00CiAgICBzaGwKICAgIGR1cAogICAgaW50Y18wIC8vIDEKICAgIC0KICAgIGZyYW1lX2RpZyAtMwogICAgPgogICAgYXNzZXJ0CiAgICAvLyBsaWJfcGNnL3BjZzMyLmFsZ28udHM6NjgKICAgIC8vIGFic29sdXRlQm91bmQgPSBvcC5zaGwoMSwgYml0U2l6ZSkgLSBsb3dlckJvdW5kOwogICAgZnJhbWVfZGlnIC0zCiAgICAtCiAgICBmcmFtZV9idXJ5IDAKICAgIGIgX19wY2czMkJvdW5kZWRTZXF1ZW5jZV9hZnRlcl9pZl9lbHNlQDE0CgpfX3BjZzMyQm91bmRlZFNlcXVlbmNlX2Jvb2xfZmFsc2VANDoKICAgIGludGNfMSAvLyAwCiAgICBiIF9fcGNnMzJCb3VuZGVkU2VxdWVuY2VfYm9vbF9tZXJnZUA1CgoKLy8gbGliX3BjZy9wY2czMi5hbGdvLnRzOjpwY2czMkluaXQoc2VlZDogYnl0ZXMpIC0+IHVpbnQ2NDoKcGNnMzJJbml0OgogICAgLy8gbGliX3BjZy9wY2czMi5hbGdvLnRzOjk4CiAgICAvLyBleHBvcnQgZnVuY3Rpb24gcGNnMzJJbml0KHNlZWQ6IGJ5dGVzKTogUENHMzJTVEFURSB7CiAgICBwcm90byAxIDEKICAgIC8vIGxpYl9wY2cvcGNnMzIuYWxnby50czo5OQogICAgLy8gYXNzZXJ0KHNlZWQubGVuZ3RoID09PSA4KTsKICAgIGZyYW1lX2RpZyAtMQogICAgbGVuCiAgICBpbnRjXzMgLy8gOAogICAgPT0KICAgIGFzc2VydAogICAgLy8gbGliX3BjZy9wY2czMi5hbGdvLnRzOjEwMQogICAgLy8gcmV0dXJuIF9fcGNnMzJJbml0KG9wLmJ0b2koc2VlZCksIHBjZ0ZpcnN0SW5jcmVtZW50KTsKICAgIGZyYW1lX2RpZyAtMQogICAgYnRvaQogICAgLy8gbGliX3BjZy9wY2czMi5hbGdvLnRzOjkyCiAgICAvLyBjb25zdCBzdGF0ZSA9IF9fcGNnMzJTdGVwKDAsIGluY3IpOwogICAgaW50Y18xIC8vIDAKICAgIC8vIGxpYl9wY2cvY29uc3RzLmFsZ28udHM6NAogICAgLy8gZXhwb3J0IGNvbnN0IHBjZ011bHRpcGxpZXIgPSBVaW50NjQoNjM2NDEzNjIyMzg0Njc5MzAwNW4pOwogICAgaW50YyA0IC8vIDYzNjQxMzYyMjM4NDY3OTMwMDUKICAgIC8vIGxpYl9wY2cvcGNnMzIuYWxnby50czoxNwogICAgLy8gY29uc3QgWywgbXVsTG93XSA9IG9wLm11bHcoc3RhdGUsIHBjZ011bHRpcGxpZXIpOwogICAgbXVsdwogICAgYnVyeSAxCiAgICAvLyBsaWJfcGNnL2NvbnN0cy5hbGdvLnRzOjYKICAgIC8vIGV4cG9ydCBjb25zdCBwY2dGaXJzdEluY3JlbWVudCA9IFVpbnQ2NCgxNDQyNjk1MDQwODg4OTYzNDA3bik7CiAgICBpbnRjIDUgLy8gMTQ0MjY5NTA0MDg4ODk2MzQwNwogICAgLy8gbGliX3BjZy9wY2czMi5hbGdvLnRzOjE4CiAgICAvLyBjb25zdCBbLCBhZGRMb3ddID0gb3AuYWRkdyhtdWxMb3csIGluY3IpOwogICAgYWRkdwogICAgYnVyeSAxCiAgICAvLyBsaWJfcGNnL3BjZzMyLmFsZ28udHM6OTMKICAgIC8vIGNvbnN0IFssIGFkZExvd10gPSBvcC5hZGR3KHN0YXRlLCBpbml0aWFsU3RhdGUpOwogICAgYWRkdwogICAgYnVyeSAxCiAgICAvLyBsaWJfcGNnL2NvbnN0cy5hbGdvLnRzOjQKICAgIC8vIGV4cG9ydCBjb25zdCBwY2dNdWx0aXBsaWVyID0gVWludDY0KDYzNjQxMzYyMjM4NDY3OTMwMDVuKTsKICAgIGludGMgNCAvLyA2MzY0MTM2MjIzODQ2NzkzMDA1CiAgICAvLyBsaWJfcGNnL3BjZzMyLmFsZ28udHM6MTcKICAgIC8vIGNvbnN0IFssIG11bExvd10gPSBvcC5tdWx3KHN0YXRlLCBwY2dNdWx0aXBsaWVyKTsKICAgIG11bHcKICAgIGJ1cnkgMQogICAgLy8gbGliX3BjZy9jb25zdHMuYWxnby50czo2CiAgICAvLyBleHBvcnQgY29uc3QgcGNnRmlyc3RJbmNyZW1lbnQgPSBVaW50NjQoMTQ0MjY5NTA0MDg4ODk2MzQwN24pOwogICAgaW50YyA1IC8vIDE0NDI2OTUwNDA4ODg5NjM0MDcKICAgIC8vIGxpYl9wY2cvcGNnMzIuYWxnby50czoxOAogICAgLy8gY29uc3QgWywgYWRkTG93XSA9IG9wLmFkZHcobXVsTG93LCBpbmNyKTsKICAgIGFkZHcKICAgIGJ1cnkgMQogICAgLy8gbGliX3BjZy9wY2czMi5hbGdvLnRzOjEwMQogICAgLy8gcmV0dXJuIF9fcGNnMzJJbml0KG9wLmJ0b2koc2VlZCksIHBjZ0ZpcnN0SW5jcmVtZW50KTsKICAgIHJldHN1YgoKCi8vIHNtYXJ0X2NvbnRyYWN0cy9saWJfcGNnMzJfZXhwb3Nlcl90cy9jb250cmFjdC5hbGdvLnRzOjpMaWJQY2czMkV4cG9zZXJBbGdvVHMuYm91bmRlZF9yYW5kX3VpbnQzMihzZWVkOiBieXRlcywgbG93ZXJfYm91bmQ6IGJ5dGVzLCB1cHBlcl9ib3VuZDogYnl0ZXMsIGxlbmd0aDogYnl0ZXMpIC0+IGJ5dGVzOgpib3VuZGVkX3JhbmRfdWludDMyOgogICAgLy8gc21hcnRfY29udHJhY3RzL2xpYl9wY2czMl9leHBvc2VyX3RzL2NvbnRyYWN0LmFsZ28udHM6Ni0xMQogICAgLy8gcHVibGljIGJvdW5kZWRfcmFuZF91aW50MzIoCiAgICAvLyAgIHNlZWQ6IFN0YXRpY0FycmF5PEJ5dGUsIDg+LAogICAgLy8gICBsb3dlcl9ib3VuZDogVWludE48MzI+LAogICAgLy8gICB1cHBlcl9ib3VuZDogVWludE48MzI+LAogICAgLy8gICBsZW5ndGg6IFVpbnROPDE2PgogICAgLy8gKTogRHluYW1pY0FycmF5PFVpbnROPDMyPj4gewogICAgcHJvdG8gNCAxCiAgICAvLyBzbWFydF9jb250cmFjdHMvbGliX3BjZzMyX2V4cG9zZXJfdHMvY29udHJhY3QuYWxnby50czoxMgogICAgLy8gY29uc3Qgc3RhdGUgPSBwY2czMkluaXQoc2VlZC5ieXRlcyk7CiAgICBmcmFtZV9kaWcgLTQKICAgIGNhbGxzdWIgcGNnMzJJbml0CiAgICAvLyBzbWFydF9jb250cmFjdHMvbGliX3BjZzMyX2V4cG9zZXJfdHMvY29udHJhY3QuYWxnby50czoxNQogICAgLy8gY29uc3QgW25ld1N0YXRlLCBzZXF1ZW5jZV0gPSBwY2czMlJhbmRvbShzdGF0ZSwgbG93ZXJfYm91bmQubmF0aXZlLCB1cHBlcl9ib3VuZC5uYXRpdmUsIGxlbmd0aC5uYXRpdmUpOwogICAgZnJhbWVfZGlnIC0zCiAgICBidG9pCiAgICBmcmFtZV9kaWcgLTIKICAgIGJ0b2kKICAgIGZyYW1lX2RpZyAtMQogICAgYnRvaQogICAgZHVwCiAgICBjb3ZlciA0CiAgICAvLyBsaWJfcGNnL3BjZzMyLmFsZ28udHM6MTE4CiAgICAvLyBjb25zdCByZXN1bHQgPSBuZXcgRHluYW1pY0FycmF5PFVpbnROPDMyPj4oKTsKICAgIGJ5dGVjXzEgLy8gMHgwMDAwCiAgICBjb3ZlciA0CiAgICAvLyBsaWJfcGNnL3BjZzMyLmFsZ28udHM6MTE5CiAgICAvLyBjb25zdCBbbmV3U3RhdGUsIHNlcXVlbmNlXSA9IF9fcGNnMzJCb3VuZGVkU2VxdWVuY2Uoc3RhdGUsIDMyLCBsb3dlckJvdW5kLCB1cHBlckJvdW5kLCBsZW5ndGgpOwogICAgdW5jb3ZlciAzCiAgICBwdXNoaW50IDMyIC8vIDMyCiAgICBjb3ZlciA0CiAgICBjb3ZlciA0CiAgICBjYWxsc3ViIF9fcGNnMzJCb3VuZGVkU2VxdWVuY2UKICAgIGJ1cnkgMQogICAgLy8gbGliX3BjZy9wY2czMi5hbGdvLnRzOjEyMgogICAgLy8gZm9yIChsZXQgaSA9IFVpbnQ2NCgwKTsgaSA8IGxlbmd0aDsgaSA9IGkgKyAxKSB7CiAgICBpbnRjXzEgLy8gMAoKYm91bmRlZF9yYW5kX3VpbnQzMl93aGlsZV90b3BAMjoKICAgIC8vIGxpYl9wY2cvcGNnMzIuYWxnby50czoxMjIKICAgIC8vIGZvciAobGV0IGkgPSBVaW50NjQoMCk7IGkgPCBsZW5ndGg7IGkgPSBpICsgMSkgewogICAgZnJhbWVfZGlnIDMKICAgIGZyYW1lX2RpZyAwCiAgICA8CiAgICBieiBib3VuZGVkX3JhbmRfdWludDMyX2FmdGVyX3doaWxlQDQKICAgIC8vIGxpYl9wY2cvcGNnMzIuYWxnby50czoxMjMKICAgIC8vIHJlc3VsdC5wdXNoKG5ldyBVaW50TjwzMj4ob3AuZXh0cmFjdFVpbnQzMihzZXF1ZW5jZSwgMiArIGkgKiA0KSkpOwogICAgZnJhbWVfZGlnIDEKICAgIGV4dHJhY3QgMiAwCiAgICBmcmFtZV9kaWcgMwogICAgZHVwCiAgICBjb3ZlciAyCiAgICBwdXNoaW50IDQgLy8gNAogICAgKgogICAgaW50Y18yIC8vIDIKICAgICsKICAgIGZyYW1lX2RpZyAyCiAgICBzd2FwCiAgICBleHRyYWN0X3VpbnQzMgogICAgaXRvYgogICAgZXh0cmFjdCA0IDQKICAgIGNvbmNhdAogICAgZHVwCiAgICBsZW4KICAgIHB1c2hpbnQgNCAvLyA0CiAgICAvCiAgICBpdG9iCiAgICBleHRyYWN0IDYgMgogICAgc3dhcAogICAgY29uY2F0CiAgICBmcmFtZV9idXJ5IDEKICAgIC8vIGxpYl9wY2cvcGNnMzIuYWxnby50czoxMjIKICAgIC8vIGZvciAobGV0IGkgPSBVaW50NjQoMCk7IGkgPCBsZW5ndGg7IGkgPSBpICsgMSkgewogICAgaW50Y18wIC8vIDEKICAgICsKICAgIGZyYW1lX2J1cnkgMwogICAgYiBib3VuZGVkX3JhbmRfdWludDMyX3doaWxlX3RvcEAyCgpib3VuZGVkX3JhbmRfdWludDMyX2FmdGVyX3doaWxlQDQ6CiAgICAvLyBzbWFydF9jb250cmFjdHMvbGliX3BjZzMyX2V4cG9zZXJfdHMvY29udHJhY3QuYWxnby50czoxNwogICAgLy8gcmV0dXJuIHNlcXVlbmNlOwogICAgZnJhbWVfZGlnIDEKICAgIGZyYW1lX2J1cnkgMAogICAgcmV0c3ViCgoKLy8gc21hcnRfY29udHJhY3RzL2xpYl9wY2czMl9leHBvc2VyX3RzL2NvbnRyYWN0LmFsZ28udHM6OkxpYlBjZzMyRXhwb3NlckFsZ29Ucy5ib3VuZGVkX3JhbmRfdWludDE2KHNlZWQ6IGJ5dGVzLCBsb3dlcl9ib3VuZDogYnl0ZXMsIHVwcGVyX2JvdW5kOiBieXRlcywgbGVuZ3RoOiBieXRlcykgLT4gYnl0ZXM6CmJvdW5kZWRfcmFuZF91aW50MTY6CiAgICAvLyBzbWFydF9jb250cmFjdHMvbGliX3BjZzMyX2V4cG9zZXJfdHMvY29udHJhY3QuYWxnby50czoyMC0yNQogICAgLy8gcHVibGljIGJvdW5kZWRfcmFuZF91aW50MTYoCiAgICAvLyAgIHNlZWQ6IFN0YXRpY0FycmF5PEJ5dGUsIDg+LAogICAgLy8gICBsb3dlcl9ib3VuZDogVWludE48MTY+LAogICAgLy8gICB1cHBlcl9ib3VuZDogVWludE48MTY+LAogICAgLy8gICBsZW5ndGg6IFVpbnROPDE2PgogICAgLy8gKTogRHluYW1pY0FycmF5PFVpbnROPDE2Pj4gewogICAgcHJvdG8gNCAxCiAgICAvLyBsaWJfcGNnL3BjZzMyLmFsZ28udHM6MTA1CiAgICAvLyByZXR1cm4gcGNnMzJJbml0KHNlZWQpOwogICAgZnJhbWVfZGlnIC00CiAgICBjYWxsc3ViIHBjZzMySW5pdAogICAgLy8gc21hcnRfY29udHJhY3RzL2xpYl9wY2czMl9leHBvc2VyX3RzL2NvbnRyYWN0LmFsZ28udHM6MjkKICAgIC8vIGNvbnN0IFtuZXdTdGF0ZSwgc2VxdWVuY2VdID0gcGNnMTZSYW5kb20oc3RhdGUsIGxvd2VyX2JvdW5kLm5hdGl2ZSwgdXBwZXJfYm91bmQubmF0aXZlLCBsZW5ndGgubmF0aXZlKTsKICAgIGZyYW1lX2RpZyAtMwogICAgYnRvaQogICAgZnJhbWVfZGlnIC0yCiAgICBidG9pCiAgICBmcmFtZV9kaWcgLTEKICAgIGJ0b2kKICAgIGR1cAogICAgY292ZXIgNAogICAgLy8gbGliX3BjZy9wY2czMi5hbGdvLnRzOjEzNQogICAgLy8gY29uc3QgcmVzdWx0ID0gbmV3IER5bmFtaWNBcnJheTxVaW50TjwxNj4+KCk7CiAgICBieXRlY18xIC8vIDB4MDAwMAogICAgY292ZXIgNAogICAgLy8gbGliX3BjZy9wY2czMi5hbGdvLnRzOjEzNgogICAgLy8gY29uc3QgW25ld1N0YXRlLCBzZXF1ZW5jZV0gPSBfX3BjZzMyQm91bmRlZFNlcXVlbmNlKHN0YXRlLCAxNiwgbG93ZXJCb3VuZCwgdXBwZXJCb3VuZCwgbGVuZ3RoKTsKICAgIHVuY292ZXIgMwogICAgcHVzaGludCAxNiAvLyAxNgogICAgY292ZXIgNAogICAgY292ZXIgNAogICAgY2FsbHN1YiBfX3BjZzMyQm91bmRlZFNlcXVlbmNlCiAgICBidXJ5IDEKICAgIC8vIGxpYl9wY2cvcGNnMzIuYWxnby50czoxMzkKICAgIC8vIGZvciAobGV0IGkgPSBVaW50NjQoMCk7IGkgPCBsZW5ndGg7IGkgPSBpICsgMSkgewogICAgaW50Y18xIC8vIDAKCmJvdW5kZWRfcmFuZF91aW50MTZfd2hpbGVfdG9wQDQ6CiAgICAvLyBsaWJfcGNnL3BjZzMyLmFsZ28udHM6MTM5CiAgICAvLyBmb3IgKGxldCBpID0gVWludDY0KDApOyBpIDwgbGVuZ3RoOyBpID0gaSArIDEpIHsKICAgIGZyYW1lX2RpZyAzCiAgICBmcmFtZV9kaWcgMAogICAgPAogICAgYnogYm91bmRlZF9yYW5kX3VpbnQxNl9hZnRlcl93aGlsZUA2CiAgICAvLyBsaWJfcGNnL3BjZzMyLmFsZ28udHM6MTQwCiAgICAvLyByZXN1bHQucHVzaChuZXcgVWludE48MTY+KG9wLmV4dHJhY3RVaW50MTYoc2VxdWVuY2UsIDIgKyBpICogMikpKTsKICAgIGZyYW1lX2RpZyAxCiAgICBleHRyYWN0IDIgMAogICAgZnJhbWVfZGlnIDMKICAgIGR1cAogICAgY292ZXIgMgogICAgaW50Y18yIC8vIDIKICAgICoKICAgIGludGNfMiAvLyAyCiAgICArCiAgICBmcmFtZV9kaWcgMgogICAgc3dhcAogICAgZXh0cmFjdF91aW50MTYKICAgIGl0b2IKICAgIGV4dHJhY3QgNiAyCiAgICBjb25jYXQKICAgIGR1cAogICAgbGVuCiAgICBpbnRjXzIgLy8gMgogICAgLwogICAgaXRvYgogICAgZXh0cmFjdCA2IDIKICAgIHN3YXAKICAgIGNvbmNhdAogICAgZnJhbWVfYnVyeSAxCiAgICAvLyBsaWJfcGNnL3BjZzMyLmFsZ28udHM6MTM5CiAgICAvLyBmb3IgKGxldCBpID0gVWludDY0KDApOyBpIDwgbGVuZ3RoOyBpID0gaSArIDEpIHsKICAgIGludGNfMCAvLyAxCiAgICArCiAgICBmcmFtZV9idXJ5IDMKICAgIGIgYm91bmRlZF9yYW5kX3VpbnQxNl93aGlsZV90b3BANAoKYm91bmRlZF9yYW5kX3VpbnQxNl9hZnRlcl93aGlsZUA2OgogICAgLy8gc21hcnRfY29udHJhY3RzL2xpYl9wY2czMl9leHBvc2VyX3RzL2NvbnRyYWN0LmFsZ28udHM6MzEKICAgIC8vIHJldHVybiBzZXF1ZW5jZTsKICAgIGZyYW1lX2RpZyAxCiAgICBmcmFtZV9idXJ5IDAKICAgIHJldHN1YgoKCi8vIHNtYXJ0X2NvbnRyYWN0cy9saWJfcGNnMzJfZXhwb3Nlcl90cy9jb250cmFjdC5hbGdvLnRzOjpMaWJQY2czMkV4cG9zZXJBbGdvVHMuYm91bmRlZF9yYW5kX3VpbnQ4KHNlZWQ6IGJ5dGVzLCBsb3dlcl9ib3VuZDogYnl0ZXMsIHVwcGVyX2JvdW5kOiBieXRlcywgbGVuZ3RoOiBieXRlcykgLT4gYnl0ZXM6CmJvdW5kZWRfcmFuZF91aW50ODoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9saWJfcGNnMzJfZXhwb3Nlcl90cy9jb250cmFjdC5hbGdvLnRzOjM0LTM5CiAgICAvLyBwdWJsaWMgYm91bmRlZF9yYW5kX3VpbnQ4KAogICAgLy8gICBzZWVkOiBTdGF0aWNBcnJheTxCeXRlLCA4PiwKICAgIC8vICAgbG93ZXJfYm91bmQ6IFVpbnROPDg+LAogICAgLy8gICB1cHBlcl9ib3VuZDogVWludE48OD4sCiAgICAvLyAgIGxlbmd0aDogVWludE48MTY+CiAgICAvLyApOiBEeW5hbWljQXJyYXk8VWludE48OD4+IHsKICAgIHByb3RvIDQgMQogICAgLy8gbGliX3BjZy9wY2czMi5hbGdvLnRzOjEwOQogICAgLy8gcmV0dXJuIHBjZzMySW5pdChzZWVkKTsKICAgIGZyYW1lX2RpZyAtNAogICAgY2FsbHN1YiBwY2czMkluaXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9saWJfcGNnMzJfZXhwb3Nlcl90cy9jb250cmFjdC5hbGdvLnRzOjQzCiAgICAvLyBjb25zdCBbbmV3U3RhdGUsIHNlcXVlbmNlXSA9IHBjZzhSYW5kb20oc3RhdGUsIGxvd2VyX2JvdW5kLm5hdGl2ZSwgdXBwZXJfYm91bmQubmF0aXZlLCBsZW5ndGgubmF0aXZlKTsKICAgIGZyYW1lX2RpZyAtMwogICAgYnRvaQogICAgZnJhbWVfZGlnIC0yCiAgICBidG9pCiAgICBmcmFtZV9kaWcgLTEKICAgIGJ0b2kKICAgIGR1cAogICAgY292ZXIgNAogICAgLy8gbGliX3BjZy9wY2czMi5hbGdvLnRzOjE1MgogICAgLy8gY29uc3QgcmVzdWx0ID0gbmV3IER5bmFtaWNBcnJheTxVaW50Tjw4Pj4oKTsKICAgIGJ5dGVjXzEgLy8gMHgwMDAwCiAgICBjb3ZlciA0CiAgICAvLyBsaWJfcGNnL3BjZzMyLmFsZ28udHM6MTUzCiAgICAvLyBjb25zdCBbbmV3U3RhdGUsIHNlcXVlbmNlXSA9IF9fcGNnMzJCb3VuZGVkU2VxdWVuY2Uoc3RhdGUsIDgsIGxvd2VyQm91bmQsIHVwcGVyQm91bmQsIGxlbmd0aCk7CiAgICB1bmNvdmVyIDMKICAgIGludGNfMyAvLyA4CiAgICBjb3ZlciA0CiAgICBjb3ZlciA0CiAgICBjYWxsc3ViIF9fcGNnMzJCb3VuZGVkU2VxdWVuY2UKICAgIGJ1cnkgMQogICAgLy8gbGliX3BjZy9wY2czMi5hbGdvLnRzOjE1NgogICAgLy8gZm9yIChsZXQgaSA9IFVpbnQ2NCgwKTsgaSA8IGxlbmd0aDsgaSA9IGkgKyAxKSB7CiAgICBpbnRjXzEgLy8gMAoKYm91bmRlZF9yYW5kX3VpbnQ4X3doaWxlX3RvcEA0OgogICAgLy8gbGliX3BjZy9wY2czMi5hbGdvLnRzOjE1NgogICAgLy8gZm9yIChsZXQgaSA9IFVpbnQ2NCgwKTsgaSA8IGxlbmd0aDsgaSA9IGkgKyAxKSB7CiAgICBmcmFtZV9kaWcgMwogICAgZnJhbWVfZGlnIDAKICAgIDwKICAgIGJ6IGJvdW5kZWRfcmFuZF91aW50OF9hZnRlcl93aGlsZUA2CiAgICAvLyBsaWJfcGNnL3BjZzMyLmFsZ28udHM6MTU3CiAgICAvLyByZXN1bHQucHVzaChuZXcgVWludE48OD4ob3AuYnRvaShvcC5leHRyYWN0KHNlcXVlbmNlLCAyICsgaSwgMSkpKSk7CiAgICBmcmFtZV9kaWcgMQogICAgZXh0cmFjdCAyIDAKICAgIGludGNfMiAvLyAyCiAgICBmcmFtZV9kaWcgMwogICAgZHVwCiAgICBjb3ZlciAzCiAgICArCiAgICBmcmFtZV9kaWcgMgogICAgc3dhcAogICAgaW50Y18wIC8vIDEKICAgIGV4dHJhY3QzCiAgICBidG9pCiAgICBpdG9iCiAgICBleHRyYWN0IDcgMQogICAgY29uY2F0CiAgICBkdXAKICAgIGxlbgogICAgaXRvYgogICAgZXh0cmFjdCA2IDIKICAgIHN3YXAKICAgIGNvbmNhdAogICAgZnJhbWVfYnVyeSAxCiAgICAvLyBsaWJfcGNnL3BjZzMyLmFsZ28udHM6MTU2CiAgICAvLyBmb3IgKGxldCBpID0gVWludDY0KDApOyBpIDwgbGVuZ3RoOyBpID0gaSArIDEpIHsKICAgIGludGNfMCAvLyAxCiAgICArCiAgICBmcmFtZV9idXJ5IDMKICAgIGIgYm91bmRlZF9yYW5kX3VpbnQ4X3doaWxlX3RvcEA0Cgpib3VuZGVkX3JhbmRfdWludDhfYWZ0ZXJfd2hpbGVANjoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9saWJfcGNnMzJfZXhwb3Nlcl90cy9jb250cmFjdC5hbGdvLnRzOjQ1CiAgICAvLyByZXR1cm4gc2VxdWVuY2U7CiAgICBmcmFtZV9kaWcgMQogICAgZnJhbWVfYnVyeSAwCiAgICByZXRzdWIKCgovLyBzbWFydF9jb250cmFjdHMvbGliX3BjZzMyX2V4cG9zZXJfdHMvY29udHJhY3QuYWxnby50czo6TGliUGNnMzJFeHBvc2VyQWxnb1RzLnVwZGF0ZSgpIC0+IHZvaWQ6CnVwZGF0ZToKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9saWJfcGNnMzJfZXhwb3Nlcl90cy9jb250cmFjdC5hbGdvLnRzOjQ4LTQ5CiAgICAvLyBAYmFyZW1ldGhvZCh7IGFsbG93QWN0aW9uczogWydVcGRhdGVBcHBsaWNhdGlvbiddIH0pCiAgICAvLyBwdWJsaWMgdXBkYXRlKCkgewogICAgcHJvdG8gMCAwCiAgICAvLyBzbWFydF9jb250cmFjdHMvbGliX3BjZzMyX2V4cG9zZXJfdHMvY29udHJhY3QuYWxnby50czo1MAogICAgLy8gYXNzZXJ0KFR4bi5zZW5kZXIgPT09IEdsb2JhbC5jcmVhdG9yQWRkcmVzcyk7CiAgICB0eG4gU2VuZGVyCiAgICBnbG9iYWwgQ3JlYXRvckFkZHJlc3MKICAgID09CiAgICBhc3NlcnQKICAgIHJldHN1Ygo=", "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="}, "sourceInfo": {"approval": {"pcOffsetMethod": "none", "sourceInfo": [{"pc": [78, 106, 134], "errorMessage": "OnCompletion is not NoOp"}, {"pc": [176], "errorMessage": "can only call when creating"}, {"pc": [81, 109, 137, 181], "errorMessage": "can only call when not creating"}]}, "clear": {"pcOffsetMethod": "none", "sourceInfo": []}}, "templateVariables": {}}"""
APP_SPEC = algokit_utils.Arc56Contract.from_json(_APP_SPEC_JSON)

def _parse_abi_args(args: object | None = None) -> list[object] | None:
    """Helper to parse ABI args into the format expected by underlying client"""
    if args is None:
        return None

    def convert_dataclass(value: object) -> object:
        if dataclasses.is_dataclass(value):
            return tuple(convert_dataclass(getattr(value, field.name)) for field in dataclasses.fields(value))
        elif isinstance(value, (list, tuple)):
            return type(value)(convert_dataclass(item) for item in value)
        return value

    match args:
        case tuple():
            method_args = list(args)
        case _ if dataclasses.is_dataclass(args):
            method_args = [getattr(args, field.name) for field in dataclasses.fields(args)]
        case _:
            raise ValueError("Invalid 'args' type. Expected 'tuple' or 'TypedDict' for respective typed arguments.")

    return [
        convert_dataclass(arg) if not isinstance(arg, algokit_utils.AppMethodCallTransactionArgument) else arg
        for arg in method_args
    ] if method_args else None

def _init_dataclass(cls: type, data: dict) -> object:
    """
    Recursively instantiate a dataclass of type `cls` from `data`.

    For each field on the dataclass, if the field type is also a dataclass
    and the corresponding data is a dict, instantiate that field recursively.
    """
    field_values = {}
    for field in dataclasses.fields(cls):
        field_value = data.get(field.name)
        # Check if the field expects another dataclass and the value is a dict.
        if dataclasses.is_dataclass(field.type) and isinstance(field_value, dict):
            field_values[field.name] = _init_dataclass(typing.cast(type, field.type), field_value)
        else:
            field_values[field.name] = field_value
    return cls(**field_values)

@dataclasses.dataclass(frozen=True, kw_only=True)
class BoundedRandUint32Args:
    """Dataclass for bounded_rand_uint32 arguments"""
    seed: bytes | str | tuple[int, int, int, int, int, int, int, int]
    lower_bound: int
    upper_bound: int
    length: int

    @property
    def abi_method_signature(self) -> str:
        return "bounded_rand_uint32(byte[8],uint32,uint32,uint16)uint32[]"

@dataclasses.dataclass(frozen=True, kw_only=True)
class BoundedRandUint16Args:
    """Dataclass for bounded_rand_uint16 arguments"""
    seed: bytes | str | tuple[int, int, int, int, int, int, int, int]
    lower_bound: int
    upper_bound: int
    length: int

    @property
    def abi_method_signature(self) -> str:
        return "bounded_rand_uint16(byte[8],uint16,uint16,uint16)uint16[]"

@dataclasses.dataclass(frozen=True, kw_only=True)
class BoundedRandUint8Args:
    """Dataclass for bounded_rand_uint8 arguments"""
    seed: bytes | str | tuple[int, int, int, int, int, int, int, int]
    lower_bound: int
    upper_bound: int
    length: int

    @property
    def abi_method_signature(self) -> str:
        return "bounded_rand_uint8(byte[8],uint8,uint8,uint16)uint8[]"


class _LibPcg32ExposerAlgoTsUpdate:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    def bare(
        self, params: algokit_utils.AppClientBareCallParams | None = None
    ) -> algokit_utils.AppUpdateParams:
        return self.app_client.params.bare.update(params)


class LibPcg32ExposerAlgoTsParams:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    @property
    def update(self) -> "_LibPcg32ExposerAlgoTsUpdate":
        return _LibPcg32ExposerAlgoTsUpdate(self.app_client)

    def bounded_rand_uint32(
        self,
        args: tuple[bytes | str | tuple[int, int, int, int, int, int, int, int], int, int, int] | BoundedRandUint32Args,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "bounded_rand_uint32(byte[8],uint32,uint32,uint16)uint32[]",
            "args": method_args,
        }))

    def bounded_rand_uint16(
        self,
        args: tuple[bytes | str | tuple[int, int, int, int, int, int, int, int], int, int, int] | BoundedRandUint16Args,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "bounded_rand_uint16(byte[8],uint16,uint16,uint16)uint16[]",
            "args": method_args,
        }))

    def bounded_rand_uint8(
        self,
        args: tuple[bytes | str | tuple[int, int, int, int, int, int, int, int], int, int, int] | BoundedRandUint8Args,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "bounded_rand_uint8(byte[8],uint8,uint8,uint16)uint8[]",
            "args": method_args,
        }))

    def clear_state(
        self,
        params: algokit_utils.AppClientBareCallParams | None = None,
        
    ) -> algokit_utils.AppCallParams:
        return self.app_client.params.bare.clear_state(
            params,
            
        )


class _LibPcg32ExposerAlgoTsUpdateTransaction:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    def bare(self, params: algokit_utils.AppClientBareCallParams | None = None) -> Transaction:
        return self.app_client.create_transaction.bare.update(params)


class LibPcg32ExposerAlgoTsCreateTransactionParams:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    @property
    def update(self) -> "_LibPcg32ExposerAlgoTsUpdateTransaction":
        return _LibPcg32ExposerAlgoTsUpdateTransaction(self.app_client)

    def bounded_rand_uint32(
        self,
        args: tuple[bytes | str | tuple[int, int, int, int, int, int, int, int], int, int, int] | BoundedRandUint32Args,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "bounded_rand_uint32(byte[8],uint32,uint32,uint16)uint32[]",
            "args": method_args,
        }))

    def bounded_rand_uint16(
        self,
        args: tuple[bytes | str | tuple[int, int, int, int, int, int, int, int], int, int, int] | BoundedRandUint16Args,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "bounded_rand_uint16(byte[8],uint16,uint16,uint16)uint16[]",
            "args": method_args,
        }))

    def bounded_rand_uint8(
        self,
        args: tuple[bytes | str | tuple[int, int, int, int, int, int, int, int], int, int, int] | BoundedRandUint8Args,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "bounded_rand_uint8(byte[8],uint8,uint8,uint16)uint8[]",
            "args": method_args,
        }))

    def clear_state(
        self,
        params: algokit_utils.AppClientBareCallParams | None = None,
        
    ) -> Transaction:
        return self.app_client.create_transaction.bare.clear_state(
            params,
            
        )


class _LibPcg32ExposerAlgoTsUpdateSend:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    def bare(
        self,
        params: algokit_utils.AppClientBareCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.SendAppTransactionResult:
        return self.app_client.send.bare.update(
            params=params,
            send_params=send_params,
            compilation_params=compilation_params
        )


class LibPcg32ExposerAlgoTsSend:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    @property
    def update(self) -> "_LibPcg32ExposerAlgoTsUpdateSend":
        return _LibPcg32ExposerAlgoTsUpdateSend(self.app_client)

    def bounded_rand_uint32(
        self,
        args: tuple[bytes | str | tuple[int, int, int, int, int, int, int, int], int, int, int] | BoundedRandUint32Args,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[list[int]]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "bounded_rand_uint32(byte[8],uint32,uint32,uint16)uint32[]",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[list[int]], parsed_response)

    def bounded_rand_uint16(
        self,
        args: tuple[bytes | str | tuple[int, int, int, int, int, int, int, int], int, int, int] | BoundedRandUint16Args,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[list[int]]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "bounded_rand_uint16(byte[8],uint16,uint16,uint16)uint16[]",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[list[int]], parsed_response)

    def bounded_rand_uint8(
        self,
        args: tuple[bytes | str | tuple[int, int, int, int, int, int, int, int], int, int, int] | BoundedRandUint8Args,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[list[int]]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "bounded_rand_uint8(byte[8],uint8,uint8,uint16)uint8[]",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[list[int]], parsed_response)

    def clear_state(
        self,
        params: algokit_utils.AppClientBareCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[algokit_utils.ABIReturn]:
        return self.app_client.send.bare.clear_state(
            params,
            send_params=send_params,
        )


class LibPcg32ExposerAlgoTsState:
    """Methods to access state for the current LibPcg32ExposerAlgoTs app"""

    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

class LibPcg32ExposerAlgoTsClient:
    """Client for interacting with LibPcg32ExposerAlgoTs smart contract"""

    @typing.overload
    def __init__(self, app_client: algokit_utils.AppClient) -> None: ...
    
    @typing.overload
    def __init__(
        self,
        *,
        algorand: _AlgoKitAlgorandClient,
        app_id: int,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> None: ...

    def __init__(
        self,
        app_client: algokit_utils.AppClient | None = None,
        *,
        algorand: _AlgoKitAlgorandClient | None = None,
        app_id: int | None = None,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> None:
        if app_client:
            self.app_client = app_client
        elif algorand and app_id:
            self.app_client = algokit_utils.AppClient(
                algokit_utils.AppClientParams(
                    algorand=algorand,
                    app_spec=APP_SPEC,
                    app_id=app_id,
                    app_name=app_name,
                    default_sender=default_sender,
                    default_signer=default_signer,
                    approval_source_map=approval_source_map,
                    clear_source_map=clear_source_map,
                )
            )
        else:
            raise ValueError("Either app_client or algorand and app_id must be provided")
    
        self.params = LibPcg32ExposerAlgoTsParams(self.app_client)
        self.create_transaction = LibPcg32ExposerAlgoTsCreateTransactionParams(self.app_client)
        self.send = LibPcg32ExposerAlgoTsSend(self.app_client)
        self.state = LibPcg32ExposerAlgoTsState(self.app_client)

    @staticmethod
    def from_creator_and_name(
        creator_address: str,
        app_name: str,
        algorand: _AlgoKitAlgorandClient,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
        ignore_cache: bool | None = None,
        app_lookup_cache: algokit_utils.ApplicationLookup | None = None,
    ) -> "LibPcg32ExposerAlgoTsClient":
        return LibPcg32ExposerAlgoTsClient(
            algokit_utils.AppClient.from_creator_and_name(
                creator_address=creator_address,
                app_name=app_name,
                app_spec=APP_SPEC,
                algorand=algorand,
                default_sender=default_sender,
                default_signer=default_signer,
                approval_source_map=approval_source_map,
                clear_source_map=clear_source_map,
                ignore_cache=ignore_cache,
                app_lookup_cache=app_lookup_cache,
            )
        )
    
    @staticmethod
    def from_network(
        algorand: _AlgoKitAlgorandClient,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> "LibPcg32ExposerAlgoTsClient":
        return LibPcg32ExposerAlgoTsClient(
            algokit_utils.AppClient.from_network(
                app_spec=APP_SPEC,
                algorand=algorand,
                app_name=app_name,
                default_sender=default_sender,
                default_signer=default_signer,
                approval_source_map=approval_source_map,
                clear_source_map=clear_source_map,
            )
        )

    @property
    def app_id(self) -> int:
        return self.app_client.app_id
    
    @property
    def app_address(self) -> str:
        return self.app_client.app_address
    
    @property
    def app_name(self) -> str:
        return self.app_client.app_name
    
    @property
    def app_spec(self) -> algokit_utils.Arc56Contract:
        return self.app_client.app_spec
    
    @property
    def algorand(self) -> _AlgoKitAlgorandClient:
        return self.app_client.algorand

    def clone(
        self,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> "LibPcg32ExposerAlgoTsClient":
        return LibPcg32ExposerAlgoTsClient(
            self.app_client.clone(
                app_name=app_name,
                default_sender=default_sender,
                default_signer=default_signer,
                approval_source_map=approval_source_map,
                clear_source_map=clear_source_map,
            )
        )

    def new_group(self) -> "LibPcg32ExposerAlgoTsComposer":
        return LibPcg32ExposerAlgoTsComposer(self)

    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["bounded_rand_uint32(byte[8],uint32,uint32,uint16)uint32[]"],
        return_value: algokit_utils.ABIReturn | None
    ) -> list[int] | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["bounded_rand_uint16(byte[8],uint16,uint16,uint16)uint16[]"],
        return_value: algokit_utils.ABIReturn | None
    ) -> list[int] | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["bounded_rand_uint8(byte[8],uint8,uint8,uint16)uint8[]"],
        return_value: algokit_utils.ABIReturn | None
    ) -> list[int] | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: str,
        return_value: algokit_utils.ABIReturn | None
    ) -> algokit_utils.ABIValue | algokit_utils.ABIStruct | None: ...

    def decode_return_value(
        self,
        method: str,
        return_value: algokit_utils.ABIReturn | None
    ) -> algokit_utils.ABIValue | algokit_utils.ABIStruct | None | list[int]:
        """Decode ABI return value for the given method."""
        if return_value is None:
            return None
    
        arc56_method = self.app_spec.get_arc56_method(method)
        decoded = return_value.get_arc56_value(arc56_method, self.app_spec.structs)
    
        # If method returns a struct, convert the dict to appropriate dataclass
        if (arc56_method and
            arc56_method.returns and
            arc56_method.returns.struct and
            isinstance(decoded, dict)):
            struct_class = globals().get(arc56_method.returns.struct)
            if struct_class:
                return struct_class(**typing.cast(dict, decoded))
        return decoded


@dataclasses.dataclass(frozen=True)
class LibPcg32ExposerAlgoTsBareCallCreateParams(algokit_utils.AppClientBareCallCreateParams):
    """Parameters for creating LibPcg32ExposerAlgoTs contract with bare calls"""
    on_complete: typing.Literal[OnComplete.NoOpOC] | None = None

    def to_algokit_utils_params(self) -> algokit_utils.AppClientBareCallCreateParams:
        return algokit_utils.AppClientBareCallCreateParams(**self.__dict__)

@dataclasses.dataclass(frozen=True)
class LibPcg32ExposerAlgoTsBareCallUpdateParams(algokit_utils.AppClientBareCallParams):
    """Parameters for calling LibPcg32ExposerAlgoTs contract with bare calls"""
    on_complete: typing.Literal[OnComplete.UpdateApplicationOC] | None = None

    def to_algokit_utils_params(self) -> algokit_utils.AppClientBareCallParams:
        return algokit_utils.AppClientBareCallParams(**self.__dict__)

class LibPcg32ExposerAlgoTsFactory(algokit_utils.TypedAppFactoryProtocol[LibPcg32ExposerAlgoTsBareCallCreateParams, LibPcg32ExposerAlgoTsBareCallUpdateParams, None]):
    """Factory for deploying and managing LibPcg32ExposerAlgoTsClient smart contracts"""

    def __init__(
        self,
        algorand: _AlgoKitAlgorandClient,
        *,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        version: str | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None,
    ):
        self.app_factory = algokit_utils.AppFactory(
            params=algokit_utils.AppFactoryParams(
                algorand=algorand,
                app_spec=APP_SPEC,
                app_name=app_name,
                default_sender=default_sender,
                default_signer=default_signer,
                version=version,
                compilation_params=compilation_params,
            )
        )
        self.params = LibPcg32ExposerAlgoTsFactoryParams(self.app_factory)
        self.create_transaction = LibPcg32ExposerAlgoTsFactoryCreateTransaction(self.app_factory)
        self.send = LibPcg32ExposerAlgoTsFactorySend(self.app_factory)

    @property
    def app_name(self) -> str:
        return self.app_factory.app_name
    
    @property
    def app_spec(self) -> algokit_utils.Arc56Contract:
        return self.app_factory.app_spec
    
    @property
    def algorand(self) -> _AlgoKitAlgorandClient:
        return self.app_factory.algorand

    def deploy(
        self,
        *,
        on_update: algokit_utils.OnUpdate | None = None,
        on_schema_break: algokit_utils.OnSchemaBreak | None = None,
        create_params: LibPcg32ExposerAlgoTsBareCallCreateParams | None = None,
        update_params: LibPcg32ExposerAlgoTsBareCallUpdateParams | None = None,
        delete_params: None = None,
        existing_deployments: algokit_utils.ApplicationLookup | None = None,
        ignore_cache: bool = False,
        app_name: str | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None,
        send_params: algokit_utils.SendParams | None = None,
    ) -> tuple[LibPcg32ExposerAlgoTsClient, algokit_utils.AppFactoryDeployResult]:
        """Deploy the application"""
        deploy_response = self.app_factory.deploy(
            on_update=on_update,
            on_schema_break=on_schema_break,
            create_params=create_params.to_algokit_utils_params() if create_params else None,
            update_params=update_params.to_algokit_utils_params() if update_params else None,
            delete_params=delete_params,
            existing_deployments=existing_deployments,
            ignore_cache=ignore_cache,
            app_name=app_name,
            compilation_params=compilation_params,
            send_params=send_params,
        )

        return LibPcg32ExposerAlgoTsClient(deploy_response[0]), deploy_response[1]

    def get_app_client_by_creator_and_name(
        self,
        creator_address: str,
        app_name: str,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        ignore_cache: bool | None = None,
        app_lookup_cache: algokit_utils.ApplicationLookup | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> LibPcg32ExposerAlgoTsClient:
        """Get an app client by creator address and name"""
        return LibPcg32ExposerAlgoTsClient(
            self.app_factory.get_app_client_by_creator_and_name(
                creator_address,
                app_name,
                default_sender,
                default_signer,
                ignore_cache,
                app_lookup_cache,
                approval_source_map,
                clear_source_map,
            )
        )

    def get_app_client_by_id(
        self,
        app_id: int,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> LibPcg32ExposerAlgoTsClient:
        """Get an app client by app ID"""
        return LibPcg32ExposerAlgoTsClient(
            self.app_factory.get_app_client_by_id(
                app_id,
                app_name,
                default_sender,
                default_signer,
                approval_source_map,
                clear_source_map,
            )
        )


class LibPcg32ExposerAlgoTsFactoryParams:
    """Parameters for creating transactions for LibPcg32ExposerAlgoTs contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory
        self.create = LibPcg32ExposerAlgoTsFactoryCreateParams(app_factory)
        self.update = LibPcg32ExposerAlgoTsFactoryUpdateParams(app_factory)
        self.delete = LibPcg32ExposerAlgoTsFactoryDeleteParams(app_factory)

class LibPcg32ExposerAlgoTsFactoryCreateParams:
    """Parameters for 'create' operations of LibPcg32ExposerAlgoTs contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateParams:
        """Creates an instance using a bare call"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.bare.create(
            algokit_utils.AppFactoryCreateParams(**dataclasses.asdict(params)),
            compilation_params=compilation_params)

    def bounded_rand_uint32(
        self,
        args: tuple[bytes | str | tuple[int, int, int, int, int, int, int, int], int, int, int] | BoundedRandUint32Args,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the bounded_rand_uint32(byte[8],uint32,uint32,uint16)uint32[] ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "bounded_rand_uint32(byte[8],uint32,uint32,uint16)uint32[]",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def bounded_rand_uint16(
        self,
        args: tuple[bytes | str | tuple[int, int, int, int, int, int, int, int], int, int, int] | BoundedRandUint16Args,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the bounded_rand_uint16(byte[8],uint16,uint16,uint16)uint16[] ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "bounded_rand_uint16(byte[8],uint16,uint16,uint16)uint16[]",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def bounded_rand_uint8(
        self,
        args: tuple[bytes | str | tuple[int, int, int, int, int, int, int, int], int, int, int] | BoundedRandUint8Args,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the bounded_rand_uint8(byte[8],uint8,uint8,uint16)uint8[] ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "bounded_rand_uint8(byte[8],uint8,uint8,uint16)uint8[]",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

class LibPcg32ExposerAlgoTsFactoryUpdateParams:
    """Parameters for 'update' operations of LibPcg32ExposerAlgoTs contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        
    ) -> algokit_utils.AppUpdateParams:
        """Updates an instance using a bare call"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.bare.deploy_update(
            algokit_utils.AppClientBareCallParams(**dataclasses.asdict(params)),
            )

class LibPcg32ExposerAlgoTsFactoryDeleteParams:
    """Parameters for 'delete' operations of LibPcg32ExposerAlgoTs contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        
    ) -> algokit_utils.AppDeleteParams:
        """Deletes an instance using a bare call"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.bare.deploy_delete(
            algokit_utils.AppClientBareCallParams(**dataclasses.asdict(params)),
            )


class LibPcg32ExposerAlgoTsFactoryCreateTransaction:
    """Create transactions for LibPcg32ExposerAlgoTs contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory
        self.create = LibPcg32ExposerAlgoTsFactoryCreateTransactionCreate(app_factory)


class LibPcg32ExposerAlgoTsFactoryCreateTransactionCreate:
    """Create new instances of LibPcg32ExposerAlgoTs contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
    ) -> Transaction:
        """Creates a new instance using a bare call"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.create_transaction.bare.create(
            algokit_utils.AppFactoryCreateParams(**dataclasses.asdict(params)),
        )


class LibPcg32ExposerAlgoTsFactorySend:
    """Send calls to LibPcg32ExposerAlgoTs contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory
        self.create = LibPcg32ExposerAlgoTsFactorySendCreate(app_factory)


class LibPcg32ExposerAlgoTsFactorySendCreate:
    """Send create calls to LibPcg32ExposerAlgoTs contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        send_params: algokit_utils.SendParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None,
    ) -> tuple[LibPcg32ExposerAlgoTsClient, algokit_utils.SendAppCreateTransactionResult]:
        """Creates a new instance using a bare call"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        result = self.app_factory.send.bare.create(
            algokit_utils.AppFactoryCreateParams(**dataclasses.asdict(params)),
            send_params=send_params,
            compilation_params=compilation_params
        )
        return LibPcg32ExposerAlgoTsClient(result[0]), result[1]


class _LibPcg32ExposerAlgoTsUpdateComposer:
    def __init__(self, composer: "LibPcg32ExposerAlgoTsComposer"):
        self.composer = composer


class LibPcg32ExposerAlgoTsComposer:
    """Composer for creating transaction groups for LibPcg32ExposerAlgoTs contract calls"""

    def __init__(self, client: "LibPcg32ExposerAlgoTsClient"):
        self.client = client
        self._composer = client.algorand.new_group()
        self._result_mappers: list[typing.Callable[[algokit_utils.ABIReturn | None], object] | None] = []

    @property
    def update(self) -> "_LibPcg32ExposerAlgoTsUpdateComposer":
        return _LibPcg32ExposerAlgoTsUpdateComposer(self)

    def bounded_rand_uint32(
        self,
        args: tuple[bytes | str | tuple[int, int, int, int, int, int, int, int], int, int, int] | BoundedRandUint32Args,
        params: algokit_utils.CommonAppCallParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> "LibPcg32ExposerAlgoTsComposer":
        self._composer.add_app_call_method_call(
            self.client.params.bounded_rand_uint32(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "bounded_rand_uint32(byte[8],uint32,uint32,uint16)uint32[]", v
            )
        )
        return self

    def bounded_rand_uint16(
        self,
        args: tuple[bytes | str | tuple[int, int, int, int, int, int, int, int], int, int, int] | BoundedRandUint16Args,
        params: algokit_utils.CommonAppCallParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> "LibPcg32ExposerAlgoTsComposer":
        self._composer.add_app_call_method_call(
            self.client.params.bounded_rand_uint16(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "bounded_rand_uint16(byte[8],uint16,uint16,uint16)uint16[]", v
            )
        )
        return self

    def bounded_rand_uint8(
        self,
        args: tuple[bytes | str | tuple[int, int, int, int, int, int, int, int], int, int, int] | BoundedRandUint8Args,
        params: algokit_utils.CommonAppCallParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> "LibPcg32ExposerAlgoTsComposer":
        self._composer.add_app_call_method_call(
            self.client.params.bounded_rand_uint8(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "bounded_rand_uint8(byte[8],uint8,uint8,uint16)uint8[]", v
            )
        )
        return self

    def clear_state(
        self,
        *,
        args: list[bytes] | None = None,
        params: algokit_utils.CommonAppCallParams | None = None,
    ) -> "LibPcg32ExposerAlgoTsComposer":
        params=params or algokit_utils.CommonAppCallParams()
        self._composer.add_app_call(
            self.client.params.clear_state(
                algokit_utils.AppClientBareCallParams(
                    **{
                        **dataclasses.asdict(params),
                        "args": args
                    }
                )
            )
        )
        return self
    
    def add_transaction(
        self, txn: Transaction, signer: TransactionSigner | None = None
    ) -> "LibPcg32ExposerAlgoTsComposer":
        self._composer.add_transaction(txn, signer)
        return self
    
    def composer(self) -> algokit_utils.TransactionComposer:
        return self._composer
    
    def simulate(
        self,
        allow_more_logs: bool | None = None,
        allow_empty_signatures: bool | None = None,
        allow_unnamed_resources: bool | None = None,
        extra_opcode_budget: int | None = None,
        exec_trace_config: SimulateTraceConfig | None = None,
        simulation_round: int | None = None,
        skip_signatures: bool | None = None,
    ) -> algokit_utils.SendAtomicTransactionComposerResults:
        return self._composer.simulate(
            allow_more_logs=allow_more_logs,
            allow_empty_signatures=allow_empty_signatures,
            allow_unnamed_resources=allow_unnamed_resources,
            extra_opcode_budget=extra_opcode_budget,
            exec_trace_config=exec_trace_config,
            simulation_round=simulation_round,
            skip_signatures=skip_signatures,
        )
    
    def send(
        self,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAtomicTransactionComposerResults:
        return self._composer.send(send_params)
