#pragma version 8
intcblock 0 1 6364136223846793005 4294967295 1442695040888963407 1442695040888963409
bytecblock 0x
txn NumAppArgs
intc_0 // 0
==
bnz main_l4
txna ApplicationArgs 0
pushbytes 0xba5682ce // "bounded_rand_uint64(byte[16],uint64,uint64,uint16)uint64[]"
==
bnz main_l3
err
main_l3:
txn OnCompletion
intc_0 // NoOp
==
txn ApplicationID
intc_0 // 0
!=
&&
assert
callsub boundedranduint64caster_6
intc_1 // 1
return
main_l4:
txn OnCompletion
intc_0 // NoOp
==
bnz main_l10
txn OnCompletion
pushint 4 // UpdateApplication
==
bnz main_l9
txn OnCompletion
pushint 5 // DeleteApplication
==
bnz main_l8
err
main_l8:
txn ApplicationID
intc_0 // 0
!=
assert
callsub delete_4
intc_1 // 1
return
main_l9:
txn ApplicationID
intc_0 // 0
!=
assert
callsub update_3
intc_1 // 1
return
main_l10:
txn ApplicationID
intc_0 // 0
==
assert
intc_1 // 1
return

// pcg64_init
pcg64init_0:
proto 4 0
frame_dig -4
intc_0 // 0
stores
frame_dig -4
intc 4 // 1442695040888963407
intc_2 // 6364136223846793005
frame_dig -4
loads
mulw
bury 1
addw
bury 1
stores
frame_dig -4
frame_dig -4
loads
frame_dig -2
addw
bury 1
stores
frame_dig -4
intc 4 // 1442695040888963407
intc_2 // 6364136223846793005
frame_dig -4
loads
mulw
bury 1
addw
bury 1
stores
frame_dig -3
intc_0 // 0
stores
frame_dig -3
intc 5 // 1442695040888963409
intc_2 // 6364136223846793005
frame_dig -3
loads
mulw
bury 1
addw
bury 1
stores
frame_dig -3
frame_dig -3
loads
frame_dig -1
addw
bury 1
stores
frame_dig -3
intc 5 // 1442695040888963409
intc_2 // 6364136223846793005
frame_dig -3
loads
mulw
bury 1
addw
bury 1
stores
retsub

// __pcg64_random
pcg64random_1:
proto 2 1
frame_dig -2
loads
store 7
frame_dig -1
loads
store 8
frame_dig -2
intc 4 // 1442695040888963407
intc_2 // 6364136223846793005
frame_dig -2
loads
mulw
bury 1
addw
bury 1
stores
frame_dig -1
intc 5 // 1442695040888963409
frame_dig -2
loads
intc_0 // 0
==
shl
intc_2 // 6364136223846793005
frame_dig -1
loads
mulw
bury 1
addw
bury 1
stores
load 7
pushint 18 // 18
shr
load 7
^
pushint 27 // 27
shr
intc_3 // 4294967295
&
store 9
load 7
pushint 59 // 59
shr
store 10
load 9
load 10
shr
load 9
load 10
~
intc_1 // 1
addw
bury 1
pushint 31 // 31
&
shl
intc_3 // 4294967295
&
|
pushint 32 // 32
shl
load 8
pushint 18 // 18
shr
load 8
^
pushint 27 // 27
shr
intc_3 // 4294967295
&
store 11
load 8
pushint 59 // 59
shr
store 12
load 11
load 12
shr
load 11
load 12
~
intc_1 // 1
addw
bury 1
pushint 31 // 31
&
shl
intc_3 // 4294967295
&
|
|
retsub

// pcg64_random
pcg64random_2:
proto 5 1
intc_0 // 0
frame_dig -1
frame_bury 0
frame_dig 0
pushint 65536 // 65536
<
assert
frame_dig 0
itob
extract 6 0
store 4
frame_dig -3
intc_0 // 0
==
frame_dig -2
intc_0 // 0
==
&&
bnz pcg64random_2_l10
frame_dig -2
intc_0 // 0
!=
bnz pcg64random_2_l9
frame_dig -3
pushint 18446744073709551615 // 18446744073709551615
<
assert
pushbytes 0x010000000000000000 // 0x010000000000000000
frame_dig -3
itob
b-
btoi
store 2
pcg64random_2_l3:
load 2
~
intc_1 // 1
addw
bury 1
load 2
%
store 3
intc_0 // 0
store 5
pcg64random_2_l4:
load 5
frame_dig -1
<
bz pcg64random_2_l13
frame_dig -5
frame_dig -4
callsub pcg64random_1
store 6
pcg64random_2_l6:
load 6
load 3
<
bnz pcg64random_2_l8
load 4
load 6
load 2
%
frame_dig -3
+
itob
concat
store 4
load 5
intc_1 // 1
+
store 5
b pcg64random_2_l4
pcg64random_2_l8:
frame_dig -5
frame_dig -4
callsub pcg64random_1
store 6
b pcg64random_2_l6
pcg64random_2_l9:
frame_dig -2
intc_1 // 1
>
assert
frame_dig -3
frame_dig -2
intc_1 // 1
-
<
assert
frame_dig -2
frame_dig -3
-
store 2
b pcg64random_2_l3
pcg64random_2_l10:
intc_0 // 0
store 5
pcg64random_2_l11:
load 5
frame_dig -1
<
bz pcg64random_2_l13
load 4
frame_dig -5
frame_dig -4
callsub pcg64random_1
itob
concat
store 4
load 5
intc_1 // 1
+
store 5
b pcg64random_2_l11
pcg64random_2_l13:
load 4
frame_bury 0
retsub

// update
update_3:
proto 0 0
txn Sender
global CreatorAddress
==
// unauthorized
assert
pushint 1 // TMPL_UPDATABLE
// Check app is updatable
assert
retsub

// delete
delete_4:
proto 0 0
txn Sender
global CreatorAddress
==
// unauthorized
assert
pushint 1 // TMPL_DELETABLE
// Check app is deletable
assert
retsub

// bounded_rand_uint64
boundedranduint64_5:
proto 4 1
bytec_0 // ""
intc_0 // 0
intc_1 // 1
frame_dig -4
intc_0 // 0
extract_uint64
frame_dig -4
pushint 8 // 8
extract_uint64
callsub pcg64init_0
intc_0 // 0
intc_1 // 1
frame_dig -3
frame_dig -2
frame_dig -1
callsub pcg64random_2
frame_bury 0
retsub

// bounded_rand_uint64_caster
boundedranduint64caster_6:
proto 0 0
bytec_0 // ""
dup
intc_0 // 0
dupn 2
txna ApplicationArgs 1
frame_bury 1
txna ApplicationArgs 2
btoi
frame_bury 2
txna ApplicationArgs 3
btoi
frame_bury 3
txna ApplicationArgs 4
intc_0 // 0
extract_uint16
frame_bury 4
frame_dig 1
frame_dig 2
frame_dig 3
frame_dig 4
callsub boundedranduint64_5
frame_bury 0
pushbytes 0x151f7c75 // 0x151f7c75
frame_dig 0
concat
log
retsub