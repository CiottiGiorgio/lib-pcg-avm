# flake8: noqa
# fmt: off
# mypy: ignore-errors
# This file was automatically generated by algokit-client-generator.
# DO NOT MODIFY IT BY HAND.
# requires: algokit-utils@^3.0.0

# common
import dataclasses
import typing
# core algosdk
import algosdk
from algosdk.transaction import OnComplete
from algosdk.atomic_transaction_composer import TransactionSigner
from algosdk.source_map import SourceMap
from algosdk.transaction import Transaction
from algosdk.v2client.models import SimulateTraceConfig
# utils
import algokit_utils
from algokit_utils import AlgorandClient as _AlgoKitAlgorandClient

_APP_SPEC_JSON = r"""{"arcs": [], "bareActions": {"call": ["DeleteApplication", "UpdateApplication"], "create": ["NoOp"]}, "methods": [{"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "byte[8]", "name": "seed"}, {"type": "uint32", "name": "lower_bound"}, {"type": "uint32", "name": "upper_bound"}, {"type": "uint16", "name": "length"}], "name": "bounded_rand_uint32", "returns": {"type": "uint32[]"}, "events": []}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "byte[8]", "name": "seed"}, {"type": "uint16", "name": "lower_bound"}, {"type": "uint16", "name": "upper_bound"}, {"type": "uint16", "name": "length"}], "name": "bounded_rand_uint16", "returns": {"type": "uint16[]"}, "events": []}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "byte[8]", "name": "seed"}, {"type": "uint8", "name": "lower_bound"}, {"type": "uint8", "name": "upper_bound"}, {"type": "uint16", "name": "length"}], "name": "bounded_rand_uint8", "returns": {"type": "uint8[]"}, "events": []}], "name": "lib_pcg32_exposer_pyteal", "state": {"keys": {"box": {}, "global": {}, "local": {}}, "maps": {"box": {}, "global": {}, "local": {}}, "schema": {"global": {"bytes": 0, "ints": 0}, "local": {"bytes": 0, "ints": 0}}}, "structs": {}, "source": {"approval": "", "clear": "I3ByYWdtYSB2ZXJzaW9uIDgKcHVzaGludCAwIC8vIDAKcmV0dXJu"}}"""
APP_SPEC = algokit_utils.Arc56Contract.from_json(_APP_SPEC_JSON)

def _parse_abi_args(args: object | None = None) -> list[object] | None:
    """Helper to parse ABI args into the format expected by underlying client"""
    if args is None:
        return None

    def convert_dataclass(value: object) -> object:
        if dataclasses.is_dataclass(value):
            return tuple(convert_dataclass(getattr(value, field.name)) for field in dataclasses.fields(value))
        elif isinstance(value, (list, tuple)):
            return type(value)(convert_dataclass(item) for item in value)
        return value

    match args:
        case tuple():
            method_args = list(args)
        case _ if dataclasses.is_dataclass(args):
            method_args = [getattr(args, field.name) for field in dataclasses.fields(args)]
        case _:
            raise ValueError("Invalid 'args' type. Expected 'tuple' or 'TypedDict' for respective typed arguments.")

    return [
        convert_dataclass(arg) if not isinstance(arg, algokit_utils.AppMethodCallTransactionArgument) else arg
        for arg in method_args
    ] if method_args else None

def _init_dataclass(cls: type, data: dict) -> object:
    """
    Recursively instantiate a dataclass of type `cls` from `data`.

    For each field on the dataclass, if the field type is also a dataclass
    and the corresponding data is a dict, instantiate that field recursively.
    """
    field_values = {}
    for field in dataclasses.fields(cls):
        field_value = data.get(field.name)
        # Check if the field expects another dataclass and the value is a dict.
        if dataclasses.is_dataclass(field.type) and isinstance(field_value, dict):
            field_values[field.name] = _init_dataclass(typing.cast(type, field.type), field_value)
        else:
            field_values[field.name] = field_value
    return cls(**field_values)

@dataclasses.dataclass(frozen=True, kw_only=True)
class BoundedRandUint32Args:
    """Dataclass for bounded_rand_uint32 arguments"""
    seed: bytes | str | tuple[int, int, int, int, int, int, int, int]
    lower_bound: int
    upper_bound: int
    length: int

    @property
    def abi_method_signature(self) -> str:
        return "bounded_rand_uint32(byte[8],uint32,uint32,uint16)uint32[]"

@dataclasses.dataclass(frozen=True, kw_only=True)
class BoundedRandUint16Args:
    """Dataclass for bounded_rand_uint16 arguments"""
    seed: bytes | str | tuple[int, int, int, int, int, int, int, int]
    lower_bound: int
    upper_bound: int
    length: int

    @property
    def abi_method_signature(self) -> str:
        return "bounded_rand_uint16(byte[8],uint16,uint16,uint16)uint16[]"

@dataclasses.dataclass(frozen=True, kw_only=True)
class BoundedRandUint8Args:
    """Dataclass for bounded_rand_uint8 arguments"""
    seed: bytes | str | tuple[int, int, int, int, int, int, int, int]
    lower_bound: int
    upper_bound: int
    length: int

    @property
    def abi_method_signature(self) -> str:
        return "bounded_rand_uint8(byte[8],uint8,uint8,uint16)uint8[]"


class _LibPcg32ExposerPytealUpdate:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    def bare(
        self, params: algokit_utils.AppClientBareCallParams | None = None
    ) -> algokit_utils.AppUpdateParams:
        return self.app_client.params.bare.update(params)


class _LibPcg32ExposerPytealDelete:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    def bare(
        self, params: algokit_utils.AppClientBareCallParams | None = None
    ) -> algokit_utils.AppCallParams:
        return self.app_client.params.bare.delete(params)


class LibPcg32ExposerPytealParams:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    @property
    def update(self) -> "_LibPcg32ExposerPytealUpdate":
        return _LibPcg32ExposerPytealUpdate(self.app_client)

    @property
    def delete(self) -> "_LibPcg32ExposerPytealDelete":
        return _LibPcg32ExposerPytealDelete(self.app_client)

    def bounded_rand_uint32(
        self,
        args: tuple[bytes | str | tuple[int, int, int, int, int, int, int, int], int, int, int] | BoundedRandUint32Args,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "bounded_rand_uint32(byte[8],uint32,uint32,uint16)uint32[]",
            "args": method_args,
        }))

    def bounded_rand_uint16(
        self,
        args: tuple[bytes | str | tuple[int, int, int, int, int, int, int, int], int, int, int] | BoundedRandUint16Args,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "bounded_rand_uint16(byte[8],uint16,uint16,uint16)uint16[]",
            "args": method_args,
        }))

    def bounded_rand_uint8(
        self,
        args: tuple[bytes | str | tuple[int, int, int, int, int, int, int, int], int, int, int] | BoundedRandUint8Args,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "bounded_rand_uint8(byte[8],uint8,uint8,uint16)uint8[]",
            "args": method_args,
        }))

    def clear_state(
        self,
        params: algokit_utils.AppClientBareCallParams | None = None,
        
    ) -> algokit_utils.AppCallParams:
        return self.app_client.params.bare.clear_state(
            params,
            
        )


class _LibPcg32ExposerPytealUpdateTransaction:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    def bare(self, params: algokit_utils.AppClientBareCallParams | None = None) -> Transaction:
        return self.app_client.create_transaction.bare.update(params)


class _LibPcg32ExposerPytealDeleteTransaction:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    def bare(self, params: algokit_utils.AppClientBareCallParams | None = None) -> Transaction:
        return self.app_client.create_transaction.bare.delete(params)


class LibPcg32ExposerPytealCreateTransactionParams:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    @property
    def update(self) -> "_LibPcg32ExposerPytealUpdateTransaction":
        return _LibPcg32ExposerPytealUpdateTransaction(self.app_client)

    @property
    def delete(self) -> "_LibPcg32ExposerPytealDeleteTransaction":
        return _LibPcg32ExposerPytealDeleteTransaction(self.app_client)

    def bounded_rand_uint32(
        self,
        args: tuple[bytes | str | tuple[int, int, int, int, int, int, int, int], int, int, int] | BoundedRandUint32Args,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "bounded_rand_uint32(byte[8],uint32,uint32,uint16)uint32[]",
            "args": method_args,
        }))

    def bounded_rand_uint16(
        self,
        args: tuple[bytes | str | tuple[int, int, int, int, int, int, int, int], int, int, int] | BoundedRandUint16Args,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "bounded_rand_uint16(byte[8],uint16,uint16,uint16)uint16[]",
            "args": method_args,
        }))

    def bounded_rand_uint8(
        self,
        args: tuple[bytes | str | tuple[int, int, int, int, int, int, int, int], int, int, int] | BoundedRandUint8Args,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "bounded_rand_uint8(byte[8],uint8,uint8,uint16)uint8[]",
            "args": method_args,
        }))

    def clear_state(
        self,
        params: algokit_utils.AppClientBareCallParams | None = None,
        
    ) -> Transaction:
        return self.app_client.create_transaction.bare.clear_state(
            params,
            
        )


class _LibPcg32ExposerPytealUpdateSend:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    def bare(
        self,
        params: algokit_utils.AppClientBareCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.SendAppTransactionResult:
        return self.app_client.send.bare.update(
            params=params,
            send_params=send_params,
            compilation_params=compilation_params
        )


class _LibPcg32ExposerPytealDeleteSend:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    def bare(
        self,
        params: algokit_utils.AppClientBareCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None,
        
    ) -> algokit_utils.SendAppTransactionResult:
        return self.app_client.send.bare.delete(
            params=params,
            send_params=send_params,
            
        )


class LibPcg32ExposerPytealSend:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    @property
    def update(self) -> "_LibPcg32ExposerPytealUpdateSend":
        return _LibPcg32ExposerPytealUpdateSend(self.app_client)

    @property
    def delete(self) -> "_LibPcg32ExposerPytealDeleteSend":
        return _LibPcg32ExposerPytealDeleteSend(self.app_client)

    def bounded_rand_uint32(
        self,
        args: tuple[bytes | str | tuple[int, int, int, int, int, int, int, int], int, int, int] | BoundedRandUint32Args,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[list[int]]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "bounded_rand_uint32(byte[8],uint32,uint32,uint16)uint32[]",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[list[int]], parsed_response)

    def bounded_rand_uint16(
        self,
        args: tuple[bytes | str | tuple[int, int, int, int, int, int, int, int], int, int, int] | BoundedRandUint16Args,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[list[int]]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "bounded_rand_uint16(byte[8],uint16,uint16,uint16)uint16[]",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[list[int]], parsed_response)

    def bounded_rand_uint8(
        self,
        args: tuple[bytes | str | tuple[int, int, int, int, int, int, int, int], int, int, int] | BoundedRandUint8Args,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[list[int]]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "bounded_rand_uint8(byte[8],uint8,uint8,uint16)uint8[]",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[list[int]], parsed_response)

    def clear_state(
        self,
        params: algokit_utils.AppClientBareCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[algokit_utils.ABIReturn]:
        return self.app_client.send.bare.clear_state(
            params,
            send_params=send_params,
        )


class LibPcg32ExposerPytealState:
    """Methods to access state for the current lib_pcg32_exposer_pyteal app"""

    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

class LibPcg32ExposerPytealClient:
    """Client for interacting with lib_pcg32_exposer_pyteal smart contract"""

    @typing.overload
    def __init__(self, app_client: algokit_utils.AppClient) -> None: ...
    
    @typing.overload
    def __init__(
        self,
        *,
        algorand: _AlgoKitAlgorandClient,
        app_id: int,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> None: ...

    def __init__(
        self,
        app_client: algokit_utils.AppClient | None = None,
        *,
        algorand: _AlgoKitAlgorandClient | None = None,
        app_id: int | None = None,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> None:
        if app_client:
            self.app_client = app_client
        elif algorand and app_id:
            self.app_client = algokit_utils.AppClient(
                algokit_utils.AppClientParams(
                    algorand=algorand,
                    app_spec=APP_SPEC,
                    app_id=app_id,
                    app_name=app_name,
                    default_sender=default_sender,
                    default_signer=default_signer,
                    approval_source_map=approval_source_map,
                    clear_source_map=clear_source_map,
                )
            )
        else:
            raise ValueError("Either app_client or algorand and app_id must be provided")
    
        self.params = LibPcg32ExposerPytealParams(self.app_client)
        self.create_transaction = LibPcg32ExposerPytealCreateTransactionParams(self.app_client)
        self.send = LibPcg32ExposerPytealSend(self.app_client)
        self.state = LibPcg32ExposerPytealState(self.app_client)

    @staticmethod
    def from_creator_and_name(
        creator_address: str,
        app_name: str,
        algorand: _AlgoKitAlgorandClient,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
        ignore_cache: bool | None = None,
        app_lookup_cache: algokit_utils.ApplicationLookup | None = None,
    ) -> "LibPcg32ExposerPytealClient":
        return LibPcg32ExposerPytealClient(
            algokit_utils.AppClient.from_creator_and_name(
                creator_address=creator_address,
                app_name=app_name,
                app_spec=APP_SPEC,
                algorand=algorand,
                default_sender=default_sender,
                default_signer=default_signer,
                approval_source_map=approval_source_map,
                clear_source_map=clear_source_map,
                ignore_cache=ignore_cache,
                app_lookup_cache=app_lookup_cache,
            )
        )
    
    @staticmethod
    def from_network(
        algorand: _AlgoKitAlgorandClient,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> "LibPcg32ExposerPytealClient":
        return LibPcg32ExposerPytealClient(
            algokit_utils.AppClient.from_network(
                app_spec=APP_SPEC,
                algorand=algorand,
                app_name=app_name,
                default_sender=default_sender,
                default_signer=default_signer,
                approval_source_map=approval_source_map,
                clear_source_map=clear_source_map,
            )
        )

    @property
    def app_id(self) -> int:
        return self.app_client.app_id
    
    @property
    def app_address(self) -> str:
        return self.app_client.app_address
    
    @property
    def app_name(self) -> str:
        return self.app_client.app_name
    
    @property
    def app_spec(self) -> algokit_utils.Arc56Contract:
        return self.app_client.app_spec
    
    @property
    def algorand(self) -> _AlgoKitAlgorandClient:
        return self.app_client.algorand

    def clone(
        self,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> "LibPcg32ExposerPytealClient":
        return LibPcg32ExposerPytealClient(
            self.app_client.clone(
                app_name=app_name,
                default_sender=default_sender,
                default_signer=default_signer,
                approval_source_map=approval_source_map,
                clear_source_map=clear_source_map,
            )
        )

    def new_group(self) -> "LibPcg32ExposerPytealComposer":
        return LibPcg32ExposerPytealComposer(self)

    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["bounded_rand_uint32(byte[8],uint32,uint32,uint16)uint32[]"],
        return_value: algokit_utils.ABIReturn | None
    ) -> list[int] | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["bounded_rand_uint16(byte[8],uint16,uint16,uint16)uint16[]"],
        return_value: algokit_utils.ABIReturn | None
    ) -> list[int] | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["bounded_rand_uint8(byte[8],uint8,uint8,uint16)uint8[]"],
        return_value: algokit_utils.ABIReturn | None
    ) -> list[int] | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: str,
        return_value: algokit_utils.ABIReturn | None
    ) -> algokit_utils.ABIValue | algokit_utils.ABIStruct | None: ...

    def decode_return_value(
        self,
        method: str,
        return_value: algokit_utils.ABIReturn | None
    ) -> algokit_utils.ABIValue | algokit_utils.ABIStruct | None | list[int]:
        """Decode ABI return value for the given method."""
        if return_value is None:
            return None
    
        arc56_method = self.app_spec.get_arc56_method(method)
        decoded = return_value.get_arc56_value(arc56_method, self.app_spec.structs)
    
        # If method returns a struct, convert the dict to appropriate dataclass
        if (arc56_method and
            arc56_method.returns and
            arc56_method.returns.struct and
            isinstance(decoded, dict)):
            struct_class = globals().get(arc56_method.returns.struct)
            if struct_class:
                return struct_class(**typing.cast(dict, decoded))
        return decoded


@dataclasses.dataclass(frozen=True)
class LibPcg32ExposerPytealBareCallCreateParams(algokit_utils.AppClientBareCallCreateParams):
    """Parameters for creating LibPcg32ExposerPyteal contract with bare calls"""
    on_complete: typing.Literal[OnComplete.NoOpOC] | None = None

    def to_algokit_utils_params(self) -> algokit_utils.AppClientBareCallCreateParams:
        return algokit_utils.AppClientBareCallCreateParams(**self.__dict__)

@dataclasses.dataclass(frozen=True)
class LibPcg32ExposerPytealBareCallUpdateParams(algokit_utils.AppClientBareCallParams):
    """Parameters for calling LibPcg32ExposerPyteal contract with bare calls"""
    on_complete: typing.Literal[OnComplete.UpdateApplicationOC] | None = None

    def to_algokit_utils_params(self) -> algokit_utils.AppClientBareCallParams:
        return algokit_utils.AppClientBareCallParams(**self.__dict__)

@dataclasses.dataclass(frozen=True)
class LibPcg32ExposerPytealBareCallDeleteParams(algokit_utils.AppClientBareCallParams):
    """Parameters for calling LibPcg32ExposerPyteal contract with bare calls"""
    on_complete: typing.Literal[OnComplete.DeleteApplicationOC] | None = None

    def to_algokit_utils_params(self) -> algokit_utils.AppClientBareCallParams:
        return algokit_utils.AppClientBareCallParams(**self.__dict__)

class LibPcg32ExposerPytealFactory(algokit_utils.TypedAppFactoryProtocol[LibPcg32ExposerPytealBareCallCreateParams, LibPcg32ExposerPytealBareCallUpdateParams, LibPcg32ExposerPytealBareCallDeleteParams]):
    """Factory for deploying and managing LibPcg32ExposerPytealClient smart contracts"""

    def __init__(
        self,
        algorand: _AlgoKitAlgorandClient,
        *,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        version: str | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None,
    ):
        self.app_factory = algokit_utils.AppFactory(
            params=algokit_utils.AppFactoryParams(
                algorand=algorand,
                app_spec=APP_SPEC,
                app_name=app_name,
                default_sender=default_sender,
                default_signer=default_signer,
                version=version,
                compilation_params=compilation_params,
            )
        )
        self.params = LibPcg32ExposerPytealFactoryParams(self.app_factory)
        self.create_transaction = LibPcg32ExposerPytealFactoryCreateTransaction(self.app_factory)
        self.send = LibPcg32ExposerPytealFactorySend(self.app_factory)

    @property
    def app_name(self) -> str:
        return self.app_factory.app_name
    
    @property
    def app_spec(self) -> algokit_utils.Arc56Contract:
        return self.app_factory.app_spec
    
    @property
    def algorand(self) -> _AlgoKitAlgorandClient:
        return self.app_factory.algorand

    def deploy(
        self,
        *,
        on_update: algokit_utils.OnUpdate | None = None,
        on_schema_break: algokit_utils.OnSchemaBreak | None = None,
        create_params: LibPcg32ExposerPytealBareCallCreateParams | None = None,
        update_params: LibPcg32ExposerPytealBareCallUpdateParams | None = None,
        delete_params: LibPcg32ExposerPytealBareCallDeleteParams | None = None,
        existing_deployments: algokit_utils.ApplicationLookup | None = None,
        ignore_cache: bool = False,
        app_name: str | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None,
        send_params: algokit_utils.SendParams | None = None,
    ) -> tuple[LibPcg32ExposerPytealClient, algokit_utils.AppFactoryDeployResult]:
        """Deploy the application"""
        deploy_response = self.app_factory.deploy(
            on_update=on_update,
            on_schema_break=on_schema_break,
            create_params=create_params.to_algokit_utils_params() if create_params else None,
            update_params=update_params.to_algokit_utils_params() if update_params else None,
            delete_params=delete_params.to_algokit_utils_params() if delete_params else None,
            existing_deployments=existing_deployments,
            ignore_cache=ignore_cache,
            app_name=app_name,
            compilation_params=compilation_params,
            send_params=send_params,
        )

        return LibPcg32ExposerPytealClient(deploy_response[0]), deploy_response[1]

    def get_app_client_by_creator_and_name(
        self,
        creator_address: str,
        app_name: str,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        ignore_cache: bool | None = None,
        app_lookup_cache: algokit_utils.ApplicationLookup | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> LibPcg32ExposerPytealClient:
        """Get an app client by creator address and name"""
        return LibPcg32ExposerPytealClient(
            self.app_factory.get_app_client_by_creator_and_name(
                creator_address,
                app_name,
                default_sender,
                default_signer,
                ignore_cache,
                app_lookup_cache,
                approval_source_map,
                clear_source_map,
            )
        )

    def get_app_client_by_id(
        self,
        app_id: int,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> LibPcg32ExposerPytealClient:
        """Get an app client by app ID"""
        return LibPcg32ExposerPytealClient(
            self.app_factory.get_app_client_by_id(
                app_id,
                app_name,
                default_sender,
                default_signer,
                approval_source_map,
                clear_source_map,
            )
        )


class LibPcg32ExposerPytealFactoryParams:
    """Parameters for creating transactions for LibPcg32ExposerPyteal contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory
        self.create = LibPcg32ExposerPytealFactoryCreateParams(app_factory)
        self.update = LibPcg32ExposerPytealFactoryUpdateParams(app_factory)
        self.delete = LibPcg32ExposerPytealFactoryDeleteParams(app_factory)

class LibPcg32ExposerPytealFactoryCreateParams:
    """Parameters for 'create' operations of LibPcg32ExposerPyteal contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateParams:
        """Creates an instance using a bare call"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.bare.create(
            algokit_utils.AppFactoryCreateParams(**dataclasses.asdict(params)),
            compilation_params=compilation_params)

    def bounded_rand_uint32(
        self,
        args: tuple[bytes | str | tuple[int, int, int, int, int, int, int, int], int, int, int] | BoundedRandUint32Args,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the bounded_rand_uint32(byte[8],uint32,uint32,uint16)uint32[] ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "bounded_rand_uint32(byte[8],uint32,uint32,uint16)uint32[]",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def bounded_rand_uint16(
        self,
        args: tuple[bytes | str | tuple[int, int, int, int, int, int, int, int], int, int, int] | BoundedRandUint16Args,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the bounded_rand_uint16(byte[8],uint16,uint16,uint16)uint16[] ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "bounded_rand_uint16(byte[8],uint16,uint16,uint16)uint16[]",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def bounded_rand_uint8(
        self,
        args: tuple[bytes | str | tuple[int, int, int, int, int, int, int, int], int, int, int] | BoundedRandUint8Args,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the bounded_rand_uint8(byte[8],uint8,uint8,uint16)uint8[] ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "bounded_rand_uint8(byte[8],uint8,uint8,uint16)uint8[]",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

class LibPcg32ExposerPytealFactoryUpdateParams:
    """Parameters for 'update' operations of LibPcg32ExposerPyteal contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        
    ) -> algokit_utils.AppUpdateParams:
        """Updates an instance using a bare call"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.bare.deploy_update(
            algokit_utils.AppClientBareCallParams(**dataclasses.asdict(params)),
            )

class LibPcg32ExposerPytealFactoryDeleteParams:
    """Parameters for 'delete' operations of LibPcg32ExposerPyteal contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        
    ) -> algokit_utils.AppDeleteParams:
        """Deletes an instance using a bare call"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.bare.deploy_delete(
            algokit_utils.AppClientBareCallParams(**dataclasses.asdict(params)),
            )


class LibPcg32ExposerPytealFactoryCreateTransaction:
    """Create transactions for LibPcg32ExposerPyteal contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory
        self.create = LibPcg32ExposerPytealFactoryCreateTransactionCreate(app_factory)


class LibPcg32ExposerPytealFactoryCreateTransactionCreate:
    """Create new instances of LibPcg32ExposerPyteal contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
    ) -> Transaction:
        """Creates a new instance using a bare call"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.create_transaction.bare.create(
            algokit_utils.AppFactoryCreateParams(**dataclasses.asdict(params)),
        )


class LibPcg32ExposerPytealFactorySend:
    """Send calls to LibPcg32ExposerPyteal contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory
        self.create = LibPcg32ExposerPytealFactorySendCreate(app_factory)


class LibPcg32ExposerPytealFactorySendCreate:
    """Send create calls to LibPcg32ExposerPyteal contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        send_params: algokit_utils.SendParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None,
    ) -> tuple[LibPcg32ExposerPytealClient, algokit_utils.SendAppCreateTransactionResult]:
        """Creates a new instance using a bare call"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        result = self.app_factory.send.bare.create(
            algokit_utils.AppFactoryCreateParams(**dataclasses.asdict(params)),
            send_params=send_params,
            compilation_params=compilation_params
        )
        return LibPcg32ExposerPytealClient(result[0]), result[1]


class _LibPcg32ExposerPytealUpdateComposer:
    def __init__(self, composer: "LibPcg32ExposerPytealComposer"):
        self.composer = composer


class _LibPcg32ExposerPytealDeleteComposer:
    def __init__(self, composer: "LibPcg32ExposerPytealComposer"):
        self.composer = composer


class LibPcg32ExposerPytealComposer:
    """Composer for creating transaction groups for LibPcg32ExposerPyteal contract calls"""

    def __init__(self, client: "LibPcg32ExposerPytealClient"):
        self.client = client
        self._composer = client.algorand.new_group()
        self._result_mappers: list[typing.Callable[[algokit_utils.ABIReturn | None], object] | None] = []

    @property
    def update(self) -> "_LibPcg32ExposerPytealUpdateComposer":
        return _LibPcg32ExposerPytealUpdateComposer(self)

    @property
    def delete(self) -> "_LibPcg32ExposerPytealDeleteComposer":
        return _LibPcg32ExposerPytealDeleteComposer(self)

    def bounded_rand_uint32(
        self,
        args: tuple[bytes | str | tuple[int, int, int, int, int, int, int, int], int, int, int] | BoundedRandUint32Args,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "LibPcg32ExposerPytealComposer":
        self._composer.add_app_call_method_call(
            self.client.params.bounded_rand_uint32(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "bounded_rand_uint32(byte[8],uint32,uint32,uint16)uint32[]", v
            )
        )
        return self

    def bounded_rand_uint16(
        self,
        args: tuple[bytes | str | tuple[int, int, int, int, int, int, int, int], int, int, int] | BoundedRandUint16Args,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "LibPcg32ExposerPytealComposer":
        self._composer.add_app_call_method_call(
            self.client.params.bounded_rand_uint16(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "bounded_rand_uint16(byte[8],uint16,uint16,uint16)uint16[]", v
            )
        )
        return self

    def bounded_rand_uint8(
        self,
        args: tuple[bytes | str | tuple[int, int, int, int, int, int, int, int], int, int, int] | BoundedRandUint8Args,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "LibPcg32ExposerPytealComposer":
        self._composer.add_app_call_method_call(
            self.client.params.bounded_rand_uint8(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "bounded_rand_uint8(byte[8],uint8,uint8,uint16)uint8[]", v
            )
        )
        return self

    def clear_state(
        self,
        *,
        args: list[bytes] | None = None,
        params: algokit_utils.CommonAppCallParams | None = None,
    ) -> "LibPcg32ExposerPytealComposer":
        params=params or algokit_utils.CommonAppCallParams()
        self._composer.add_app_call(
            self.client.params.clear_state(
                algokit_utils.AppClientBareCallParams(
                    **{
                        **dataclasses.asdict(params),
                        "args": args
                    }
                )
            )
        )
        return self
    
    def add_transaction(
        self, txn: Transaction, signer: TransactionSigner | None = None
    ) -> "LibPcg32ExposerPytealComposer":
        self._composer.add_transaction(txn, signer)
        return self
    
    def composer(self) -> algokit_utils.TransactionComposer:
        return self._composer
    
    def simulate(
        self,
        allow_more_logs: bool | None = None,
        allow_empty_signatures: bool | None = None,
        allow_unnamed_resources: bool | None = None,
        extra_opcode_budget: int | None = None,
        exec_trace_config: SimulateTraceConfig | None = None,
        simulation_round: int | None = None,
        skip_signatures: bool | None = None,
    ) -> algokit_utils.SendAtomicTransactionComposerResults:
        return self._composer.simulate(
            allow_more_logs=allow_more_logs,
            allow_empty_signatures=allow_empty_signatures,
            allow_unnamed_resources=allow_unnamed_resources,
            extra_opcode_budget=extra_opcode_budget,
            exec_trace_config=exec_trace_config,
            simulation_round=simulation_round,
            skip_signatures=skip_signatures,
        )
    
    def send(
        self,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAtomicTransactionComposerResults:
        return self._composer.send(send_params)
