#pragma version 8
intcblock 0 1 6364136223846793005 4294967295 1442695040888963407 1442695040888963409 1442695040888963411 1442695040888963413
bytecblock 0x0000000000000000000000000000000000000000000000000000000000000000 0x0000000000000000000000000000000000000000000000000000000000000001 0x0000000000000000000000000000000100000000000000000000000000000000 0x
txn NumAppArgs
intc_0 // 0
==
bnz main_l4
txna ApplicationArgs 0
pushbytes 0x2df65245 // "bounded_rand_uint128(byte[32],byte[16],byte[16],uint16)byte[16][]"
==
bnz main_l3
err
main_l3:
txn OnCompletion
intc_0 // NoOp
==
txn ApplicationID
intc_0 // 0
!=
&&
assert
callsub boundedranduint128caster_6
intc_1 // 1
return
main_l4:
txn OnCompletion
intc_0 // NoOp
==
bnz main_l10
txn OnCompletion
pushint 4 // UpdateApplication
==
bnz main_l9
txn OnCompletion
pushint 5 // DeleteApplication
==
bnz main_l8
err
main_l8:
txn ApplicationID
intc_0 // 0
!=
assert
callsub delete_4
intc_1 // 1
return
main_l9:
txn ApplicationID
intc_0 // 0
!=
assert
callsub update_3
intc_1 // 1
return
main_l10:
txn ApplicationID
intc_0 // 0
==
assert
intc_1 // 1
return

// pcg128_init
pcg128init_0:
proto 5 0
frame_dig -1
len
pushint 32 // 32
==
assert
frame_dig -5
intc_0 // 0
stores
frame_dig -5
intc 4 // 1442695040888963407
intc_2 // 6364136223846793005
frame_dig -5
loads
mulw
bury 1
addw
bury 1
stores
frame_dig -5
frame_dig -5
loads
frame_dig -1
intc_0 // 0
extract_uint64
addw
bury 1
stores
frame_dig -5
intc 4 // 1442695040888963407
intc_2 // 6364136223846793005
frame_dig -5
loads
mulw
bury 1
addw
bury 1
stores
frame_dig -4
intc_0 // 0
stores
frame_dig -4
intc 5 // 1442695040888963409
intc_2 // 6364136223846793005
frame_dig -4
loads
mulw
bury 1
addw
bury 1
stores
frame_dig -4
frame_dig -4
loads
frame_dig -1
pushint 8 // 8
extract_uint64
addw
bury 1
stores
frame_dig -4
intc 5 // 1442695040888963409
intc_2 // 6364136223846793005
frame_dig -4
loads
mulw
bury 1
addw
bury 1
stores
frame_dig -3
intc_0 // 0
stores
frame_dig -3
intc 6 // 1442695040888963411
intc_2 // 6364136223846793005
frame_dig -3
loads
mulw
bury 1
addw
bury 1
stores
frame_dig -3
frame_dig -3
loads
frame_dig -1
pushint 16 // 16
extract_uint64
addw
bury 1
stores
frame_dig -3
intc 6 // 1442695040888963411
intc_2 // 6364136223846793005
frame_dig -3
loads
mulw
bury 1
addw
bury 1
stores
frame_dig -2
intc_0 // 0
stores
frame_dig -2
intc 7 // 1442695040888963413
intc_2 // 6364136223846793005
frame_dig -2
loads
mulw
bury 1
addw
bury 1
stores
frame_dig -2
frame_dig -2
loads
frame_dig -1
pushint 24 // 24
extract_uint64
addw
bury 1
stores
frame_dig -2
intc 7 // 1442695040888963413
intc_2 // 6364136223846793005
frame_dig -2
loads
mulw
bury 1
addw
bury 1
stores
retsub

// pcg128_random
pcg128random_1:
proto 7 1
intc_0 // 0
frame_dig -1
frame_bury 0
frame_dig 0
pushint 65536 // 65536
<
assert
frame_dig 0
itob
extract 6 0
store 6
frame_dig -3
bytec_0 // 0x0000000000000000000000000000000000000000000000000000000000000000
b==
frame_dig -2
bytec_0 // 0x0000000000000000000000000000000000000000000000000000000000000000
b==
&&
bnz pcg128random_1_l10
frame_dig -2
bytec_0 // 0x0000000000000000000000000000000000000000000000000000000000000000
b!=
bnz pcg128random_1_l9
frame_dig -3
pushbytes 0x00000000000000000000000000000000ffffffffffffffffffffffffffffffff // 0x00000000000000000000000000000000ffffffffffffffffffffffffffffffff
b<
assert
bytec_2 // 0x0000000000000000000000000000000100000000000000000000000000000000
frame_dig -3
b-
store 4
pcg128random_1_l3:
load 4
b~
bytec_1 // 0x0000000000000000000000000000000000000000000000000000000000000001
b+
pushbytes 0xffffffffffffffffffffffffffffffff // 0xffffffffffffffffffffffffffffffff
b&
load 4
b%
store 5
intc_0 // 0
store 7
pcg128random_1_l4:
load 7
frame_dig -1
<
bz pcg128random_1_l13
frame_dig -7
frame_dig -6
frame_dig -5
frame_dig -4
callsub pcg128unboundedrandom_2
store 8
pcg128random_1_l6:
load 8
load 5
b<
bnz pcg128random_1_l8
load 6
pushint 16 // 16
bzero
load 8
load 4
b%
frame_dig -3
b+
b|
concat
store 6
load 7
intc_1 // 1
+
store 7
b pcg128random_1_l4
pcg128random_1_l8:
frame_dig -7
frame_dig -6
frame_dig -5
frame_dig -4
callsub pcg128unboundedrandom_2
store 8
b pcg128random_1_l6
pcg128random_1_l9:
frame_dig -2
bytec_1 // 0x0000000000000000000000000000000000000000000000000000000000000001
b>
assert
frame_dig -2
bytec_2 // 0x0000000000000000000000000000000100000000000000000000000000000000
b<
assert
frame_dig -3
frame_dig -2
bytec_1 // 0x0000000000000000000000000000000000000000000000000000000000000001
b-
b<
assert
frame_dig -2
frame_dig -3
b-
store 4
b pcg128random_1_l3
pcg128random_1_l10:
intc_0 // 0
store 7
pcg128random_1_l11:
load 7
frame_dig -1
<
bz pcg128random_1_l13
load 6
frame_dig -7
frame_dig -6
frame_dig -5
frame_dig -4
callsub pcg128unboundedrandom_2
concat
store 6
load 7
intc_1 // 1
+
store 7
b pcg128random_1_l11
pcg128random_1_l13:
load 6
frame_bury 0
retsub

// __pcg128_unbounded_random
pcg128unboundedrandom_2:
proto 4 1
frame_dig -4
loads
store 9
frame_dig -3
loads
store 10
frame_dig -2
loads
store 11
frame_dig -1
loads
store 12
frame_dig -4
intc 4 // 1442695040888963407
intc_2 // 6364136223846793005
frame_dig -4
loads
mulw
bury 1
addw
bury 1
stores
frame_dig -3
intc 5 // 1442695040888963409
frame_dig -4
loads
intc_0 // 0
==
shl
intc_2 // 6364136223846793005
frame_dig -3
loads
mulw
bury 1
addw
bury 1
stores
frame_dig -2
intc 6 // 1442695040888963411
frame_dig -3
loads
intc_0 // 0
==
shl
intc_2 // 6364136223846793005
frame_dig -2
loads
mulw
bury 1
addw
bury 1
stores
frame_dig -1
intc 7 // 1442695040888963413
frame_dig -2
loads
intc_0 // 0
==
shl
intc_2 // 6364136223846793005
frame_dig -1
loads
mulw
bury 1
addw
bury 1
stores
load 9
pushint 18 // 18
shr
load 9
^
pushint 27 // 27
shr
intc_3 // 4294967295
&
store 13
load 9
pushint 59 // 59
shr
store 14
load 13
load 14
shr
load 13
load 14
~
intc_1 // 1
addw
bury 1
pushint 31 // 31
&
shl
intc_3 // 4294967295
&
|
pushint 32 // 32
shl
load 10
pushint 18 // 18
shr
load 10
^
pushint 27 // 27
shr
intc_3 // 4294967295
&
store 15
load 10
pushint 59 // 59
shr
store 16
load 15
load 16
shr
load 15
load 16
~
intc_1 // 1
addw
bury 1
pushint 31 // 31
&
shl
intc_3 // 4294967295
&
|
|
itob
load 11
pushint 18 // 18
shr
load 11
^
pushint 27 // 27
shr
intc_3 // 4294967295
&
store 17
load 11
pushint 59 // 59
shr
store 18
load 17
load 18
shr
load 17
load 18
~
intc_1 // 1
addw
bury 1
pushint 31 // 31
&
shl
intc_3 // 4294967295
&
|
pushint 32 // 32
shl
load 12
pushint 18 // 18
shr
load 12
^
pushint 27 // 27
shr
intc_3 // 4294967295
&
store 19
load 12
pushint 59 // 59
shr
store 20
load 19
load 20
shr
load 19
load 20
~
intc_1 // 1
addw
bury 1
pushint 31 // 31
&
shl
intc_3 // 4294967295
&
|
|
itob
concat
retsub

// update
update_3:
proto 0 0
txn Sender
global CreatorAddress
==
// unauthorized
assert
pushint TMPL_UPDATABLE // TMPL_UPDATABLE
// Check app is updatable
assert
retsub

// delete
delete_4:
proto 0 0
txn Sender
global CreatorAddress
==
// unauthorized
assert
pushint TMPL_DELETABLE // TMPL_DELETABLE
// Check app is deletable
assert
retsub

// bounded_rand_uint128
boundedranduint128_5:
proto 4 1
bytec_3 // ""
intc_0 // 0
intc_1 // 1
pushint 2 // 2
pushint 3 // 3
frame_dig -4
callsub pcg128init_0
intc_0 // 0
intc_1 // 1
pushint 2 // 2
pushint 3 // 3
frame_dig -3
frame_dig -2
frame_dig -1
callsub pcg128random_1
frame_bury 0
retsub

// bounded_rand_uint128_caster
boundedranduint128caster_6:
proto 0 0
bytec_3 // ""
dupn 3
intc_0 // 0
txna ApplicationArgs 1
frame_bury 1
txna ApplicationArgs 2
frame_bury 2
txna ApplicationArgs 3
frame_bury 3
txna ApplicationArgs 4
intc_0 // 0
extract_uint16
frame_bury 4
frame_dig 1
frame_dig 2
frame_dig 3
frame_dig 4
callsub boundedranduint128_5
frame_bury 0
pushbytes 0x151f7c75 // 0x151f7c75
frame_dig 0
concat
log
retsub