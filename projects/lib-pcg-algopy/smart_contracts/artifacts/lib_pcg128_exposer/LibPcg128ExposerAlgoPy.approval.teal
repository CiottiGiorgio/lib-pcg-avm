#pragma version 11
#pragma typetrack false

// algopy.arc4.ARC4Contract.approval_program() -> uint64:
main:
    intcblock 1 6364136223846793005 0 4294967295 1442695040888963407 1442695040888963409 1442695040888963411 1442695040888963413
    bytecblock 0x 0x01 0x0100000000000000000000000000000000
    txn NumAppArgs
    bz main_bare_routing@5
    pushbytes 0xc35e095d // method "bounded_rand_uint128(byte[32],uint128,uint128,uint16)uint128[]"
    txna ApplicationArgs 0
    match main_bounded_rand_uint128_route@3
    err

main_bounded_rand_uint128_route@3:
    txn OnCompletion
    !
    txn ApplicationID
    &&
    assert // OnCompletion must be NoOp && can only call when not creating
    b bounded_rand_uint128

main_bare_routing@5:
    intc_2 // NoOp
    pushint 4 // UpdateApplication
    txn OnCompletion
    match main___algopy_default_create@6 main_update@7
    err

main_update@7:
    txn ApplicationID
    assert // can only call when not creating
    txn Sender
    global CreatorAddress
    ==
    return

main___algopy_default_create@6:
    txn ApplicationID
    !
    assert // can only call when creating
    intc_0 // 1
    return


// lib_pcg.pcg128.__pcg128_unbounded_random(state.0: uint64, state.1: uint64, state.2: uint64, state.3: uint64) -> uint64, uint64, uint64, uint64, bytes:
__pcg128_unbounded_random:
    proto 4 5
    frame_dig -4
    intc_1 // 6364136223846793005
    mulw
    bury 1
    intc 4 // 1442695040888963407
    addw
    bury 1
    dup
    !
    intc 5 // 1442695040888963409
    swap
    shl
    frame_dig -3
    intc_1 // 6364136223846793005
    mulw
    bury 1
    addw
    bury 1
    dup
    !
    intc 6 // 1442695040888963411
    swap
    shl
    frame_dig -2
    intc_1 // 6364136223846793005
    mulw
    bury 1
    addw
    bury 1
    dup
    !
    intc 7 // 1442695040888963413
    swap
    shl
    frame_dig -1
    intc_1 // 6364136223846793005
    mulw
    bury 1
    addw
    bury 1
    frame_dig -4
    pushint 18 // 18
    shr
    frame_dig -4
    ^
    pushint 27 // 27
    shr
    intc_3 // 4294967295
    &
    frame_dig -4
    pushint 59 // 59
    shr
    dup2
    shr
    swap
    ~
    intc_0 // 1
    addw
    bury 1
    pushint 31 // 31
    &
    uncover 2
    swap
    shl
    intc_3 // 4294967295
    &
    |
    pushint 32 // 32
    shl
    frame_dig -3
    pushint 18 // 18
    shr
    frame_dig -3
    ^
    pushint 27 // 27
    shr
    intc_3 // 4294967295
    &
    frame_dig -3
    pushint 59 // 59
    shr
    dup2
    shr
    swap
    ~
    intc_0 // 1
    addw
    bury 1
    pushint 31 // 31
    &
    uncover 2
    swap
    shl
    intc_3 // 4294967295
    &
    |
    |
    itob
    frame_dig -2
    pushint 18 // 18
    shr
    frame_dig -2
    ^
    pushint 27 // 27
    shr
    intc_3 // 4294967295
    &
    frame_dig -2
    pushint 59 // 59
    shr
    dup2
    shr
    swap
    ~
    intc_0 // 1
    addw
    bury 1
    pushint 31 // 31
    &
    uncover 2
    swap
    shl
    intc_3 // 4294967295
    &
    |
    pushint 32 // 32
    shl
    frame_dig -1
    pushint 18 // 18
    shr
    frame_dig -1
    ^
    pushint 27 // 27
    shr
    intc_3 // 4294967295
    &
    frame_dig -1
    pushint 59 // 59
    shr
    dup2
    shr
    swap
    ~
    intc_0 // 1
    addw
    bury 1
    pushint 31 // 31
    &
    uncover 2
    swap
    shl
    intc_3 // 4294967295
    &
    |
    |
    itob
    concat
    retsub


// smart_contracts.lib_pcg128_exposer.contract.LibPcg128ExposerAlgoPy.bounded_rand_uint128[routing]() -> void:
bounded_rand_uint128:
    intc_2 // 0
    dupn 2
    bytec_0 // ""
    dupn 4
    txna ApplicationArgs 1
    dup
    len
    pushint 32 // 32
    ==
    assert // invalid number of bytes for arc4.static_array<arc4.uint8, 32>
    txna ApplicationArgs 2
    dup
    cover 2
    dup
    len
    pushint 16 // 16
    ==
    assert // invalid number of bytes for arc4.uint128
    txna ApplicationArgs 3
    dup
    cover 3
    len
    pushint 16 // 16
    ==
    assert // invalid number of bytes for arc4.uint128
    txna ApplicationArgs 4
    dup
    len
    pushint 2 // 2
    ==
    assert // invalid number of bytes for arc4.uint16
    dig 2
    intc_2 // 0
    extract_uint64
    intc_2 // 0
    intc_1 // 6364136223846793005
    mulw
    bury 1
    dup
    intc 4 // 1442695040888963407
    addw
    bury 1
    uncover 2
    addw
    bury 1
    intc_1 // 6364136223846793005
    mulw
    bury 1
    intc 4 // 1442695040888963407
    addw
    cover 5
    pop
    dig 3
    pushint 8 // 8
    extract_uint64
    dig 1
    intc 5 // 1442695040888963409
    addw
    bury 1
    addw
    bury 1
    intc_1 // 6364136223846793005
    mulw
    bury 1
    intc 5 // 1442695040888963409
    addw
    cover 5
    pop
    dig 3
    pushint 16 // 16
    extract_uint64
    dig 1
    intc 6 // 1442695040888963411
    addw
    bury 1
    addw
    bury 1
    intc_1 // 6364136223846793005
    mulw
    bury 1
    intc 6 // 1442695040888963411
    addw
    cover 5
    pop
    uncover 3
    pushint 24 // 24
    extract_uint64
    swap
    intc 7 // 1442695040888963413
    addw
    bury 1
    addw
    bury 1
    intc_1 // 6364136223846793005
    mulw
    bury 1
    intc 7 // 1442695040888963413
    addw
    cover 3
    pop
    btoi
    swap
    pushbytes 0x0000
    swap
    bytec_0 // 0x
    b==
    bz bounded_rand_uint128_else_body@9
    dig 6
    bytec_0 // 0x
    b==
    bz bounded_rand_uint128_else_body@9
    intc_2 // 0
    dig 3
    bury 10
    dig 4
    bury 11
    dig 5
    bury 12
    dig 6
    bury 13
    bury 13

bounded_rand_uint128_for_header@6:
    dig 12
    dig 2
    <
    bz bounded_rand_uint128_after_if_else@19
    dig 11
    dig 11
    dig 11
    dig 11
    callsub __pcg128_unbounded_random
    cover 4
    bury 13
    bury 13
    bury 13
    bury 13
    dup
    len
    pushint 16 // 16
    <=
    assert // overflow
    pushint 16 // 16
    bzero
    b|
    dig 1
    dup
    uncover 2
    concat // on error: max array length exceeded
    swap
    intc_2 // 0
    extract_uint16
    intc_0 // 1
    +
    itob
    extract 6 2
    replace2 0
    bury 1
    dig 12
    intc_0 // 1
    +
    bury 13
    b bounded_rand_uint128_for_header@6

bounded_rand_uint128_after_if_else@19:
    pushbytes 0x151f7c75
    dig 1
    concat
    log
    intc_0 // 1
    return

bounded_rand_uint128_else_body@9:
    dig 6
    bytec_0 // 0x
    b!=
    bz bounded_rand_uint128_else_body@11
    dig 6
    dup
    bytec_1 // 0x01
    b>
    assert
    dup
    bytec_2 // 0x0100000000000000000000000000000000
    b<
    assert
    dup
    bytec_1 // 0x01
    b-
    dig 9
    dup
    uncover 2
    b<
    assert
    b-
    bury 16

bounded_rand_uint128_after_if_else@12:
    dig 15
    dup
    b~
    bytec_1 // 0x01
    b+
    pushbytes 0xffffffffffffffffffffffffffffffff
    b&
    swap
    b%
    bury 14
    intc_2 // 0
    dig 3
    bury 10
    dig 4
    bury 11
    dig 5
    bury 12
    dig 6
    bury 13
    bury 13

bounded_rand_uint128_for_header@13:
    dig 12
    dig 2
    <
    bz bounded_rand_uint128_after_if_else@19

bounded_rand_uint128_while_top@15:
    dig 11
    dig 11
    dig 11
    dig 11
    callsub __pcg128_unbounded_random
    dup
    cover 5
    bury 20
    bury 13
    bury 13
    bury 13
    bury 13
    dig 14
    b>=
    bz bounded_rand_uint128_while_top@15
    dig 14
    dig 16
    b%
    dig 8
    b+
    dup
    len
    pushint 16 // 16
    <=
    assert // overflow
    pushint 16 // 16
    bzero
    b|
    dig 1
    dup
    uncover 2
    concat // on error: max array length exceeded
    swap
    intc_2 // 0
    extract_uint16
    intc_0 // 1
    +
    itob
    extract 6 2
    replace2 0
    bury 1
    dig 12
    intc_0 // 1
    +
    bury 13
    b bounded_rand_uint128_for_header@13

bounded_rand_uint128_else_body@11:
    dig 7
    dup
    pushbytes 0x80000000000000000000000000000000
    b<
    assert
    bytec_2 // 0x0100000000000000000000000000000000
    swap
    b-
    bury 16
    b bounded_rand_uint128_after_if_else@12
