#pragma version 10

smart_contracts.lib_pcg128_exposer.contract.LibPcg128ExposerAlgopy.approval_program:
    // smart_contracts/lib_pcg128_exposer/contract.py:8
    // class LibPcg128ExposerAlgopy(arc4.ARC4Contract):
    txn NumAppArgs
    bz main_bare_routing@5
    method "bounded_rand_uint128(byte[32],uint128,uint128,uint16)uint128[]"
    txna ApplicationArgs 0
    match main_bounded_rand_uint128_route@2
    err // reject transaction

main_bounded_rand_uint128_route@2:
    // smart_contracts/lib_pcg128_exposer/contract.py:9
    // @arc4.abimethod
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // smart_contracts/lib_pcg128_exposer/contract.py:8
    // class LibPcg128ExposerAlgopy(arc4.ARC4Contract):
    txna ApplicationArgs 1
    txna ApplicationArgs 2
    txna ApplicationArgs 3
    txna ApplicationArgs 4
    // smart_contracts/lib_pcg128_exposer/contract.py:9
    // @arc4.abimethod
    callsub bounded_rand_uint128
    byte 0x151f7c75
    swap
    concat
    log
    int 1
    return

main_bare_routing@5:
    // smart_contracts/lib_pcg128_exposer/contract.py:8
    // class LibPcg128ExposerAlgopy(arc4.ARC4Contract):
    int 0
    int 4
    txn OnCompletion
    match main_create@6 main_update@7
    err // reject transaction

main_create@6:
    // smart_contracts/lib_pcg128_exposer/contract.py:8
    // class LibPcg128ExposerAlgopy(arc4.ARC4Contract):
    txn ApplicationID
    !
    assert // is creating
    int 1
    return

main_update@7:
    // smart_contracts/lib_pcg128_exposer/contract.py:25
    // @arc4.baremethod(allow_actions=["UpdateApplication"])
    txn ApplicationID
    assert // is not creating
    // smart_contracts/lib_pcg128_exposer/contract.py:25-26
    // @arc4.baremethod(allow_actions=["UpdateApplication"])
    // def update(self) -> None:
    callsub update
    int 1
    return


// smart_contracts.lib_pcg128_exposer.contract.LibPcg128ExposerAlgopy.bounded_rand_uint128(seed: bytes, lower_bound: bytes, upper_bound: bytes, length: bytes) -> bytes:
bounded_rand_uint128:
    // smart_contracts/lib_pcg128_exposer/contract.py:9-16
    // @arc4.abimethod
    // def bounded_rand_uint128(
    //     self,
    //     seed: arc4.StaticArray[arc4.Byte, Literal[32]],
    //     lower_bound: arc4.UInt128,
    //     upper_bound: arc4.UInt128,
    //     length: arc4.UInt16,
    // ) -> arc4.DynamicArray[arc4.UInt128]:
    proto 4 1
    // smart_contracts/lib_pcg128_exposer/contract.py:17
    // state = pcg128_init(seed.bytes)
    frame_dig -4
    callsub pcg128_init
    cover 3
    cover 2
    swap
    // smart_contracts/lib_pcg128_exposer/contract.py:20
    // state, lower_bound.native, upper_bound.native, length.native
    frame_dig -1
    btoi
    cover 2
    // smart_contracts/lib_pcg128_exposer/contract.py:19-21
    // state, sequence = pcg128_random(
    //     state, lower_bound.native, upper_bound.native, length.native
    // )
    swap
    uncover 3
    uncover 4
    frame_dig -3
    frame_dig -2
    uncover 6
    callsub pcg128_random
    cover 4
    popn 4
    // smart_contracts/lib_pcg128_exposer/contract.py:23
    // return sequence
    retsub


// lib_pcg.xsh_rr_quadruple_64_32.pcg128_init(seed: bytes) -> uint64, uint64, uint64, uint64:
pcg128_init:
    // lib_pcg/xsh_rr_quadruple_64_32.py:21-22
    // @subroutine
    // def pcg128_init(seed: Bytes) -> PCG128STATE:
    proto 1 4
    // lib_pcg/xsh_rr_quadruple_64_32.py:32
    // assert seed.length == 32
    frame_dig -1
    len
    int 32
    ==
    assert
    // lib_pcg/xsh_rr_quadruple_64_32.py:35
    // __pcg32_init(op.extract_uint64(seed, 0), UInt64(PCG_FIRST_INCREMENT)),
    frame_dig -1
    int 0
    extract_uint64
    int 1442695040888963407
    callsub __pcg32_init
    // lib_pcg/xsh_rr_quadruple_64_32.py:36
    // __pcg32_init(op.extract_uint64(seed, 8), UInt64(PCG_SECOND_INCREMENT)),
    frame_dig -1
    int 8
    extract_uint64
    int 1442695040888963409
    callsub __pcg32_init
    // lib_pcg/xsh_rr_quadruple_64_32.py:37
    // __pcg32_init(op.extract_uint64(seed, 16), UInt64(PCG_THIRD_INCREMENT)),
    frame_dig -1
    int 16
    extract_uint64
    int 1442695040888963411
    callsub __pcg32_init
    // lib_pcg/xsh_rr_quadruple_64_32.py:38
    // __pcg32_init(op.extract_uint64(seed, 24), UInt64(PCG_FOURTH_INCREMENT)),
    frame_dig -1
    int 24
    extract_uint64
    int 1442695040888963413
    callsub __pcg32_init
    // lib_pcg/xsh_rr_quadruple_64_32.py:34-39
    // return (
    //     __pcg32_init(op.extract_uint64(seed, 0), UInt64(PCG_FIRST_INCREMENT)),
    //     __pcg32_init(op.extract_uint64(seed, 8), UInt64(PCG_SECOND_INCREMENT)),
    //     __pcg32_init(op.extract_uint64(seed, 16), UInt64(PCG_THIRD_INCREMENT)),
    //     __pcg32_init(op.extract_uint64(seed, 24), UInt64(PCG_FOURTH_INCREMENT)),
    // )
    retsub


// lib_pcg.xsh_rr_64_32.__pcg32_init(initial_state: uint64, incr: uint64) -> uint64:
__pcg32_init:
    // lib_pcg/xsh_rr_64_32.py:214-215
    // @subroutine
    // def __pcg32_init(initial_state: PCG32STATE, incr: UInt64) -> PCG32STATE:
    proto 2 1
    // lib_pcg/xsh_rr_64_32.py:230
    // state = __pcg32_step(UInt64(0), incr)
    int 0
    frame_dig -1
    callsub __pcg32_step
    // lib_pcg/xsh_rr_64_32.py:231
    // _high_addw, state = op.addw(state, initial_state)
    frame_dig -2
    addw
    bury 1
    // lib_pcg/xsh_rr_64_32.py:233
    // return __pcg32_step(state, incr)
    frame_dig -1
    callsub __pcg32_step
    retsub


// lib_pcg.xsh_rr_64_32.__pcg32_step(state: uint64, incr: uint64) -> uint64:
__pcg32_step:
    // lib_pcg/xsh_rr_64_32.py:236-237
    // @subroutine
    // def __pcg32_step(state: PCG32STATE, incr: UInt64) -> PCG32STATE:
    proto 2 1
    // lib_pcg/xsh_rr_64_32.py:248
    // _high_mul, low_mul = op.mulw(state, PCG_MULTIPLIER)
    frame_dig -2
    int 6364136223846793005
    mulw
    bury 1
    // lib_pcg/xsh_rr_64_32.py:249
    // _high_add, low_add = op.addw(low_mul, incr)
    frame_dig -1
    addw
    bury 1
    // lib_pcg/xsh_rr_64_32.py:251
    // return low_add
    retsub


// lib_pcg.xsh_rr_quadruple_64_32.pcg128_random(state.0: uint64, state.1: uint64, state.2: uint64, state.3: uint64, lower_bound: bytes, upper_bound: bytes, length: uint64) -> uint64, uint64, uint64, uint64, bytes:
pcg128_random:
    // lib_pcg/xsh_rr_quadruple_64_32.py:42-48
    // @subroutine
    // def pcg128_random(
    //     state: PCG128STATE,
    //     lower_bound: BigUInt,
    //     upper_bound: BigUInt,
    //     length: UInt64,
    // ) -> tuple[PCG128STATE, arc4.DynamicArray[arc4.UInt128]]:
    proto 7 5
    int 0
    dupn 2
    byte ""
    // lib_pcg/xsh_rr_quadruple_64_32.py:67
    // result = arc4.DynamicArray[arc4.UInt128]()
    byte 0x0000
    // lib_pcg/xsh_rr_quadruple_64_32.py:69
    // if lower_bound == 0 and upper_bound == 0:
    frame_dig -3
    byte 0x
    b==
    bz pcg128_random_else_body@7
    frame_dig -2
    byte 0x
    b==
    bz pcg128_random_else_body@7
    // lib_pcg/xsh_rr_quadruple_64_32.py:70
    // for i in urange(length):  # noqa: B007
    int 0
    frame_bury 3

pcg128_random_for_header@3:
    // lib_pcg/xsh_rr_quadruple_64_32.py:70
    // for i in urange(length):  # noqa: B007
    frame_dig 3
    frame_dig -1
    <
    bz pcg128_random_after_if_else@20
    // lib_pcg/xsh_rr_quadruple_64_32.py:71
    // state, n = __pcg128_random(state)
    frame_dig -7
    frame_dig -6
    frame_dig -5
    frame_dig -4
    callsub __pcg128_random
    cover 4
    frame_bury -4
    frame_bury -5
    frame_bury -6
    frame_bury -7
    // lib_pcg/xsh_rr_quadruple_64_32.py:73
    // result.append(arc4.UInt128(n))
    frame_dig 4
    extract 2 0
    swap
    dup
    len
    int 16
    <=
    assert // overflow
    int 16
    bzero
    b|
    concat
    dup
    len
    int 16
    /
    itob
    extract 6 2
    swap
    concat
    frame_bury 4
    // lib_pcg/xsh_rr_quadruple_64_32.py:70
    // for i in urange(length):  # noqa: B007
    frame_dig 3
    int 1
    +
    frame_bury 3
    b pcg128_random_for_header@3

pcg128_random_else_body@7:
    // lib_pcg/xsh_rr_quadruple_64_32.py:75
    // if upper_bound != 0:
    frame_dig -2
    byte 0x
    b!=
    bz pcg128_random_else_body@9
    // lib_pcg/xsh_rr_quadruple_64_32.py:76
    // assert upper_bound > BigUInt(1)
    frame_dig -2
    byte 0x01
    b>
    assert
    // lib_pcg/xsh_rr_quadruple_64_32.py:77
    // assert upper_bound < BigUInt(1 << 128)
    frame_dig -2
    byte 0x0100000000000000000000000000000000
    b<
    assert
    // lib_pcg/xsh_rr_quadruple_64_32.py:78
    // assert lower_bound < upper_bound - BigUInt(1)
    frame_dig -2
    byte 0x01
    b-
    frame_dig -3
    b>
    assert
    // lib_pcg/xsh_rr_quadruple_64_32.py:80
    // absolute_bound = upper_bound - lower_bound
    frame_dig -2
    frame_dig -3
    b-
    frame_bury 0
    b pcg128_random_after_if_else@10

pcg128_random_else_body@9:
    // lib_pcg/xsh_rr_quadruple_64_32.py:82
    // assert lower_bound < BigUInt(1 << 128 - 1)
    frame_dig -3
    byte 0x80000000000000000000000000000000
    b<
    assert
    // lib_pcg/xsh_rr_quadruple_64_32.py:84
    // absolute_bound = BigUInt(1 << 128) - lower_bound
    byte 0x0100000000000000000000000000000000
    frame_dig -3
    b-
    frame_bury 0

pcg128_random_after_if_else@10:
    // lib_pcg/xsh_rr_quadruple_64_32.py:86
    // threshold = __uint128_twos(absolute_bound) % absolute_bound
    frame_dig 0
    dup
    callsub __uint128_twos
    swap
    b%
    frame_bury 2
    // lib_pcg/xsh_rr_quadruple_64_32.py:88
    // for i in urange(length):  # noqa: B007
    int 0
    frame_bury 3

pcg128_random_for_header@11:
    // lib_pcg/xsh_rr_quadruple_64_32.py:88
    // for i in urange(length):  # noqa: B007
    frame_dig 3
    frame_dig -1
    <
    bz pcg128_random_after_for@19

pcg128_random_while_top@13:
    // lib_pcg/xsh_rr_quadruple_64_32.py:90
    // state, candidate = __pcg128_random(state)
    frame_dig -7
    frame_dig -6
    frame_dig -5
    frame_dig -4
    callsub __pcg128_random
    dup
    cover 5
    frame_bury 1
    frame_bury -4
    frame_bury -5
    frame_bury -6
    frame_bury -7
    // lib_pcg/xsh_rr_quadruple_64_32.py:91
    // if candidate >= threshold:
    frame_dig 2
    b>=
    bz pcg128_random_while_top@13
    // lib_pcg/xsh_rr_quadruple_64_32.py:93
    // result.append(arc4.UInt128((candidate % absolute_bound) + lower_bound))
    frame_dig 4
    extract 2 0
    frame_dig 1
    frame_dig 0
    b%
    frame_dig -3
    b+
    dup
    len
    int 16
    <=
    assert // overflow
    int 16
    bzero
    b|
    concat
    dup
    len
    int 16
    /
    itob
    extract 6 2
    swap
    concat
    frame_bury 4
    // lib_pcg/xsh_rr_quadruple_64_32.py:88
    // for i in urange(length):  # noqa: B007
    frame_dig 3
    int 1
    +
    frame_bury 3
    b pcg128_random_for_header@11

pcg128_random_after_for@19:

pcg128_random_after_if_else@20:
    // lib_pcg/xsh_rr_quadruple_64_32.py:95
    // return state, result.copy()
    frame_dig -7
    frame_dig -6
    frame_dig -5
    frame_dig -4
    frame_dig 4
    uncover 9
    uncover 9
    uncover 9
    uncover 9
    uncover 9
    retsub


// lib_pcg.xsh_rr_quadruple_64_32.__pcg128_random(state.0: uint64, state.1: uint64, state.2: uint64, state.3: uint64) -> uint64, uint64, uint64, uint64, bytes:
__pcg128_random:
    // lib_pcg/xsh_rr_quadruple_64_32.py:98-99
    // @subroutine
    // def __pcg128_random(state: PCG128STATE) -> tuple[PCG128STATE, BigUInt]:
    proto 4 5
    // lib_pcg/xsh_rr_quadruple_64_32.py:113
    // new_state1, rn1 = __pcg32_random(state[0])
    frame_dig -4
    callsub __pcg32_random
    swap
    // lib_pcg/xsh_rr_quadruple_64_32.py:116
    // state[1], UInt64(PCG_SECOND_INCREMENT) << (new_state1 == 0)
    dup
    !
    int 1442695040888963409
    swap
    shl
    // lib_pcg/xsh_rr_quadruple_64_32.py:115-117
    // new_state2 = __pcg32_step(
    //     state[1], UInt64(PCG_SECOND_INCREMENT) << (new_state1 == 0)
    // )
    frame_dig -3
    swap
    callsub __pcg32_step
    // lib_pcg/xsh_rr_quadruple_64_32.py:120
    // state[2], UInt64(PCG_THIRD_INCREMENT) << (new_state2 == 0)
    dup
    !
    int 1442695040888963411
    swap
    shl
    // lib_pcg/xsh_rr_quadruple_64_32.py:119-121
    // new_state3 = __pcg32_step(
    //     state[2], UInt64(PCG_THIRD_INCREMENT) << (new_state2 == 0)
    // )
    frame_dig -2
    swap
    callsub __pcg32_step
    // lib_pcg/xsh_rr_quadruple_64_32.py:124
    // state[3], UInt64(PCG_FOURTH_INCREMENT) << (new_state3 == 0)
    dup
    !
    int 1442695040888963413
    swap
    shl
    // lib_pcg/xsh_rr_quadruple_64_32.py:123-125
    // new_state4 = __pcg32_step(
    //     state[3], UInt64(PCG_FOURTH_INCREMENT) << (new_state3 == 0)
    // )
    frame_dig -1
    swap
    callsub __pcg32_step
    swap
    // lib_pcg/xsh_rr_quadruple_64_32.py:130
    // op.itob(rn1 << 32 | __pcg32_output(state[1]))
    uncover 4
    int 32
    shl
    frame_dig -3
    callsub __pcg32_output
    |
    itob
    // lib_pcg/xsh_rr_quadruple_64_32.py:131
    // + op.itob(__pcg32_output(state[2]) << 32 | __pcg32_output(state[3]))
    frame_dig -2
    callsub __pcg32_output
    int 32
    shl
    frame_dig -1
    callsub __pcg32_output
    |
    itob
    // lib_pcg/xsh_rr_quadruple_64_32.py:130-131
    // op.itob(rn1 << 32 | __pcg32_output(state[1]))
    // + op.itob(__pcg32_output(state[2]) << 32 | __pcg32_output(state[3]))
    concat
    // lib_pcg/xsh_rr_quadruple_64_32.py:127-133
    // return (
    //     (new_state1, new_state2, new_state3, new_state4),
    //     BigUInt.from_bytes(
    //         op.itob(rn1 << 32 | __pcg32_output(state[1]))
    //         + op.itob(__pcg32_output(state[2]) << 32 | __pcg32_output(state[3]))
    //     ),
    // )
    uncover 4
    uncover 4
    uncover 3
    uncover 4
    uncover 4
    retsub


// lib_pcg.xsh_rr_64_32.__pcg32_random(state: uint64) -> uint64, uint64:
__pcg32_random:
    // lib_pcg/xsh_rr_64_32.py:254-255
    // @subroutine
    // def __pcg32_random(state: PCG32STATE) -> tuple[PCG32STATE, UInt64]:
    proto 1 2
    // lib_pcg/xsh_rr_64_32.py:271
    // return __pcg32_step(state, UInt64(PCG_FIRST_INCREMENT)), __pcg32_output(state)
    frame_dig -1
    int 1442695040888963407
    callsub __pcg32_step
    frame_dig -1
    callsub __pcg32_output
    retsub


// lib_pcg.xsh_rr_64_32.__pcg32_output(state: uint64) -> uint64:
__pcg32_output:
    // lib_pcg/xsh_rr_64_32.py:274-276
    // # TODO: Try merging output and rotation into a single function and measure the effect on performance.
    // @subroutine
    // def __pcg32_output(state: PCG32STATE) -> UInt64:
    proto 1 1
    // lib_pcg/xsh_rr_64_32.py:279
    // __mask_to_uint32(((state >> 18) ^ state) >> 27), state >> 59
    frame_dig -1
    int 18
    shr
    frame_dig -1
    ^
    int 27
    shr
    callsub __mask_to_uint32
    frame_dig -1
    int 59
    shr
    // lib_pcg/xsh_rr_64_32.py:278-280
    // return __pcg32_rotation(
    //     __mask_to_uint32(((state >> 18) ^ state) >> 27), state >> 59
    // )
    callsub __pcg32_rotation
    retsub


// lib_pcg.xsh_rr_64_32.__mask_to_uint32(value: uint64) -> uint64:
__mask_to_uint32:
    // lib_pcg/xsh_rr_64_32.py:297-298
    // @subroutine
    // def __mask_to_uint32(value: UInt64) -> UInt64:
    proto 1 1
    // lib_pcg/xsh_rr_64_32.py:300
    // return value & ((1 << 32) - 1)
    frame_dig -1
    int 4294967295
    &
    retsub


// lib_pcg.xsh_rr_64_32.__pcg32_rotation(value: uint64, rot: uint64) -> uint64:
__pcg32_rotation:
    // lib_pcg/xsh_rr_64_32.py:283-284
    // @subroutine
    // def __pcg32_rotation(value: UInt64, rot: UInt64) -> UInt64:
    proto 2 1
    // lib_pcg/xsh_rr_64_32.py:286
    // return (value >> rot) | __mask_to_uint32(value << (__uint64_twos(rot) & 31))
    frame_dig -2
    frame_dig -1
    shr
    frame_dig -1
    callsub __uint64_twos
    int 31
    &
    frame_dig -2
    swap
    shl
    callsub __mask_to_uint32
    |
    retsub


// lib_pcg.xsh_rr_64_32.__uint64_twos(value: uint64) -> uint64:
__uint64_twos:
    // lib_pcg/xsh_rr_64_32.py:289-290
    // @subroutine
    // def __uint64_twos(value: UInt64) -> UInt64:
    proto 1 1
    // lib_pcg/xsh_rr_64_32.py:292
    // _addw_high, addw_low = op.addw(~value, 1)
    frame_dig -1
    ~
    int 1
    addw
    bury 1
    // lib_pcg/xsh_rr_64_32.py:294
    // return addw_low
    retsub


// lib_pcg.xsh_rr_quadruple_64_32.__uint128_twos(value: bytes) -> bytes:
__uint128_twos:
    // lib_pcg/xsh_rr_quadruple_64_32.py:136-137
    // @subroutine
    // def __uint128_twos(value: BigUInt) -> BigUInt:
    proto 1 1
    // lib_pcg/xsh_rr_quadruple_64_32.py:139
    // return (BigUInt.from_bytes(~value.bytes) + 1) & BigUInt((1 << 128) - 1)
    frame_dig -1
    b~
    byte 0x01
    b+
    byte 0xffffffffffffffffffffffffffffffff
    b&
    retsub


// smart_contracts.lib_pcg128_exposer.contract.LibPcg128ExposerAlgopy.update() -> void:
update:
    // smart_contracts/lib_pcg128_exposer/contract.py:25-26
    // @arc4.baremethod(allow_actions=["UpdateApplication"])
    // def update(self) -> None:
    proto 0 0
    // smart_contracts/lib_pcg128_exposer/contract.py:27
    // assert Txn.sender == Global.creator_address
    txn Sender
    global CreatorAddress
    ==
    assert
    retsub
