#pragma version 10
#pragma typetrack false

// algopy.arc4.ARC4Contract.approval_program() -> uint64:
main:
    intcblock 1 6364136223846793005 4294967295 0 1442695040888963407 1442695040888963409 1442695040888963411 1442695040888963413
    bytecblock 0x 0x01 0x0100000000000000000000000000000000
    txn NumAppArgs
    bz main_bare_routing@6
    pushbytes 0xc35e095d // method "bounded_rand_uint128(byte[32],uint128,uint128,uint16)uint128[]"
    txna ApplicationArgs 0
    match main_bounded_rand_uint128_route@3

main_after_if_else@11:
    intc_3 // 0
    return

main_bounded_rand_uint128_route@3:
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    txna ApplicationArgs 1
    txna ApplicationArgs 2
    txna ApplicationArgs 3
    txna ApplicationArgs 4
    callsub bounded_rand_uint128
    pushbytes 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return

main_bare_routing@6:
    pushint 4 // 4
    intc_3 // 0
    txn OnCompletion
    match main_update@7 main___algopy_default_create@8
    b main_after_if_else@11

main___algopy_default_create@8:
    txn ApplicationID
    !
    assert // can only call when creating
    intc_0 // 1
    return

main_update@7:
    txn ApplicationID
    assert // can only call when not creating
    callsub update
    intc_0 // 1
    return


// lib_pcg.pcg128.__pcg128_unbounded_random(state.0: uint64, state.1: uint64, state.2: uint64, state.3: uint64) -> uint64, uint64, uint64, uint64, bytes:
__pcg128_unbounded_random:
    proto 4 5
    frame_dig -4
    intc_1 // 6364136223846793005
    mulw
    bury 1
    intc 4 // 1442695040888963407
    addw
    bury 1
    dup
    !
    intc 5 // 1442695040888963409
    swap
    shl
    frame_dig -3
    intc_1 // 6364136223846793005
    mulw
    bury 1
    addw
    bury 1
    dup
    !
    intc 6 // 1442695040888963411
    swap
    shl
    frame_dig -2
    intc_1 // 6364136223846793005
    mulw
    bury 1
    addw
    bury 1
    dup
    !
    intc 7 // 1442695040888963413
    swap
    shl
    frame_dig -1
    intc_1 // 6364136223846793005
    mulw
    bury 1
    addw
    bury 1
    frame_dig -4
    pushint 18 // 18
    shr
    frame_dig -4
    ^
    pushint 27 // 27
    shr
    intc_2 // 4294967295
    &
    frame_dig -4
    pushint 59 // 59
    shr
    dup2
    shr
    swap
    ~
    intc_0 // 1
    addw
    bury 1
    pushint 31 // 31
    &
    uncover 2
    swap
    shl
    intc_2 // 4294967295
    &
    |
    pushint 32 // 32
    shl
    frame_dig -3
    pushint 18 // 18
    shr
    frame_dig -3
    ^
    pushint 27 // 27
    shr
    intc_2 // 4294967295
    &
    frame_dig -3
    pushint 59 // 59
    shr
    dup2
    shr
    swap
    ~
    intc_0 // 1
    addw
    bury 1
    pushint 31 // 31
    &
    uncover 2
    swap
    shl
    intc_2 // 4294967295
    &
    |
    |
    itob
    frame_dig -2
    pushint 18 // 18
    shr
    frame_dig -2
    ^
    pushint 27 // 27
    shr
    intc_2 // 4294967295
    &
    frame_dig -2
    pushint 59 // 59
    shr
    dup2
    shr
    swap
    ~
    intc_0 // 1
    addw
    bury 1
    pushint 31 // 31
    &
    uncover 2
    swap
    shl
    intc_2 // 4294967295
    &
    |
    pushint 32 // 32
    shl
    frame_dig -1
    pushint 18 // 18
    shr
    frame_dig -1
    ^
    pushint 27 // 27
    shr
    intc_2 // 4294967295
    &
    frame_dig -1
    pushint 59 // 59
    shr
    dup2
    shr
    swap
    ~
    intc_0 // 1
    addw
    bury 1
    pushint 31 // 31
    &
    uncover 2
    swap
    shl
    intc_2 // 4294967295
    &
    |
    |
    itob
    concat
    retsub


// smart_contracts.lib_pcg128_exposer.contract.LibPcg128ExposerAlgoPy.bounded_rand_uint128(seed: bytes, lower_bound: bytes, upper_bound: bytes, length: bytes) -> bytes:
bounded_rand_uint128:
    proto 4 1
    intc_3 // 0
    dupn 2
    bytec_0 // ""
    dupn 4
    frame_dig -4
    len
    pushint 32 // 32
    ==
    assert
    frame_dig -4
    intc_3 // 0
    extract_uint64
    intc_3 // 0
    intc_1 // 6364136223846793005
    mulw
    bury 1
    dup
    intc 4 // 1442695040888963407
    addw
    bury 1
    uncover 2
    addw
    bury 1
    intc_1 // 6364136223846793005
    mulw
    bury 1
    intc 4 // 1442695040888963407
    addw
    cover 2
    pop
    frame_dig -4
    pushint 8 // 8
    extract_uint64
    dig 1
    intc 5 // 1442695040888963409
    addw
    bury 1
    addw
    bury 1
    intc_1 // 6364136223846793005
    mulw
    bury 1
    intc 5 // 1442695040888963409
    addw
    cover 2
    pop
    frame_dig -4
    pushint 16 // 16
    extract_uint64
    dig 1
    intc 6 // 1442695040888963411
    addw
    bury 1
    addw
    bury 1
    intc_1 // 6364136223846793005
    mulw
    bury 1
    intc 6 // 1442695040888963411
    addw
    cover 2
    pop
    frame_dig -4
    pushint 24 // 24
    extract_uint64
    swap
    intc 7 // 1442695040888963413
    addw
    bury 1
    addw
    bury 1
    intc_1 // 6364136223846793005
    mulw
    bury 1
    intc 7 // 1442695040888963413
    addw
    bury 1
    frame_dig -1
    btoi
    pushbytes 0x0000
    frame_dig -3
    bytec_0 // 0x
    b==
    bz bounded_rand_uint128_else_body@9
    frame_dig -2
    bytec_0 // 0x
    b==
    bz bounded_rand_uint128_else_body@9
    intc_3 // 0
    frame_bury 3
    frame_dig 11
    frame_bury 7
    frame_dig 10
    frame_bury 6
    frame_dig 9
    frame_bury 5
    frame_dig 8
    frame_bury 4

bounded_rand_uint128_for_header@6:
    frame_dig 3
    frame_dig 12
    <
    bz bounded_rand_uint128_after_if_else@19
    frame_dig 4
    frame_dig 5
    frame_dig 6
    frame_dig 7
    callsub __pcg128_unbounded_random
    cover 4
    frame_bury 7
    frame_bury 6
    frame_bury 5
    frame_bury 4
    frame_dig 13
    extract 2 0
    dig 1
    len
    pushint 16 // 16
    <=
    assert // overflow
    pushint 16 // 16
    bzero
    uncover 2
    b|
    concat
    dup
    len
    pushint 16 // 16
    /
    itob
    extract 6 2
    swap
    concat
    frame_bury 13
    frame_dig 3
    intc_0 // 1
    +
    frame_bury 3
    b bounded_rand_uint128_for_header@6

bounded_rand_uint128_after_if_else@19:
    frame_dig 13
    frame_bury 0
    retsub

bounded_rand_uint128_else_body@9:
    frame_dig -2
    bytec_0 // 0x
    b!=
    bz bounded_rand_uint128_else_body@11
    frame_dig -2
    bytec_1 // 0x01
    b>
    assert
    frame_dig -2
    bytec_2 // 0x0100000000000000000000000000000000
    b<
    assert
    frame_dig -2
    bytec_1 // 0x01
    b-
    frame_dig -3
    b>
    assert
    frame_dig -2
    frame_dig -3
    b-
    frame_bury 0

bounded_rand_uint128_after_if_else@12:
    frame_dig 0
    dup
    b~
    bytec_1 // 0x01
    b+
    pushbytes 0xffffffffffffffffffffffffffffffff
    b&
    swap
    b%
    frame_bury 2
    intc_3 // 0
    frame_bury 3
    frame_dig 11
    frame_bury 7
    frame_dig 10
    frame_bury 6
    frame_dig 9
    frame_bury 5
    frame_dig 8
    frame_bury 4

bounded_rand_uint128_for_header@13:
    frame_dig 3
    frame_dig 12
    <
    bz bounded_rand_uint128_after_if_else@19

bounded_rand_uint128_while_top@15:
    frame_dig 4
    frame_dig 5
    frame_dig 6
    frame_dig 7
    callsub __pcg128_unbounded_random
    dup
    cover 5
    frame_bury 1
    frame_bury 7
    frame_bury 6
    frame_bury 5
    frame_bury 4
    frame_dig 2
    b>=
    bz bounded_rand_uint128_while_top@15
    frame_dig 13
    extract 2 0
    frame_dig 1
    frame_dig 0
    b%
    frame_dig -3
    b+
    dup
    len
    pushint 16 // 16
    <=
    assert // overflow
    pushint 16 // 16
    bzero
    b|
    concat
    dup
    len
    pushint 16 // 16
    /
    itob
    extract 6 2
    swap
    concat
    frame_bury 13
    frame_dig 3
    intc_0 // 1
    +
    frame_bury 3
    b bounded_rand_uint128_for_header@13

bounded_rand_uint128_else_body@11:
    frame_dig -3
    pushbytes 0x80000000000000000000000000000000
    b<
    assert
    bytec_2 // 0x0100000000000000000000000000000000
    frame_dig -3
    b-
    frame_bury 0
    b bounded_rand_uint128_after_if_else@12


// smart_contracts.lib_pcg128_exposer.contract.LibPcg128ExposerAlgoPy.update() -> void:
update:
    proto 0 0
    txn Sender
    global CreatorAddress
    ==
    assert
    retsub
