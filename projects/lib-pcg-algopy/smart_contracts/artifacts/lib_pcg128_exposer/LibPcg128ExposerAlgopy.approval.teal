#pragma version 10

smart_contracts.lib_pcg128_exposer.contract.LibPcg128ExposerAlgopy.approval_program:
    txn NumAppArgs
    bz main_bare_routing@5
    method "bounded_rand_uint128(byte[32],uint128,uint128,uint16)uint128[]"
    txna ApplicationArgs 0
    match main_bounded_rand_uint128_route@2
    err // reject transaction

main_bounded_rand_uint128_route@2:
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    txna ApplicationArgs 1
    txna ApplicationArgs 2
    txna ApplicationArgs 3
    txna ApplicationArgs 4
    callsub bounded_rand_uint128
    byte 0x151f7c75
    swap
    concat
    log
    int 1
    return

main_bare_routing@5:
    int 0
    int 4
    txn OnCompletion
    match main_create@6 main_update@7
    err // reject transaction

main_create@6:
    txn ApplicationID
    !
    assert // is creating
    int 1
    return

main_update@7:
    txn ApplicationID
    assert // is not creating
    callsub update
    int 1
    return


// smart_contracts.lib_pcg128_exposer.contract.LibPcg128ExposerAlgopy.bounded_rand_uint128(seed: bytes, lower_bound: bytes, upper_bound: bytes, length: bytes) -> bytes:
bounded_rand_uint128:
    proto 4 1
    frame_dig -4
    callsub pcg128_init
    cover 3
    cover 2
    swap
    frame_dig -1
    btoi
    cover 2
    swap
    uncover 3
    uncover 4
    frame_dig -3
    frame_dig -2
    uncover 6
    callsub pcg128_random
    cover 4
    popn 4
    retsub


// lib_pcg.pcg128.pcg128_init(seed: bytes) -> uint64, uint64, uint64, uint64:
pcg128_init:
    proto 1 4
    frame_dig -1
    len
    int 32
    ==
    assert
    frame_dig -1
    int 0
    extract_uint64
    int 1442695040888963407
    callsub __pcg32_init
    frame_dig -1
    int 8
    extract_uint64
    int 1442695040888963409
    callsub __pcg32_init
    frame_dig -1
    int 16
    extract_uint64
    int 1442695040888963411
    callsub __pcg32_init
    frame_dig -1
    int 24
    extract_uint64
    int 1442695040888963413
    callsub __pcg32_init
    retsub


// lib_pcg.pcg32.__pcg32_init(initial_state: uint64, incr: uint64) -> uint64:
__pcg32_init:
    proto 2 1
    int 0
    frame_dig -1
    callsub __pcg32_step
    frame_dig -2
    addw
    bury 1
    frame_dig -1
    callsub __pcg32_step
    retsub


// lib_pcg.pcg32.__pcg32_step(state: uint64, incr: uint64) -> uint64:
__pcg32_step:
    proto 2 1
    frame_dig -2
    int 6364136223846793005
    mulw
    bury 1
    frame_dig -1
    addw
    bury 1
    retsub


// lib_pcg.pcg128.pcg128_random(state.0: uint64, state.1: uint64, state.2: uint64, state.3: uint64, lower_bound: bytes, upper_bound: bytes, length: uint64) -> uint64, uint64, uint64, uint64, bytes:
pcg128_random:
    proto 7 5
    int 0
    dupn 2
    byte ""
    byte 0x0000
    frame_dig -3
    byte 0x
    b==
    bz pcg128_random_else_body@7
    frame_dig -2
    byte 0x
    b==
    bz pcg128_random_else_body@7
    int 0
    frame_bury 3

pcg128_random_for_header@3:
    frame_dig 3
    frame_dig -1
    <
    bz pcg128_random_after_if_else@20
    frame_dig -7
    frame_dig -6
    frame_dig -5
    frame_dig -4
    callsub __pcg128_unbounded_random
    cover 4
    frame_bury -4
    frame_bury -5
    frame_bury -6
    frame_bury -7
    frame_dig 4
    extract 2 0
    swap
    dup
    len
    int 16
    <=
    assert // overflow
    int 16
    bzero
    b|
    concat
    dup
    len
    int 16
    /
    itob
    extract 6 2
    swap
    concat
    frame_bury 4
    frame_dig 3
    int 1
    +
    frame_bury 3
    b pcg128_random_for_header@3

pcg128_random_else_body@7:
    frame_dig -2
    byte 0x
    b!=
    bz pcg128_random_else_body@9
    frame_dig -2
    byte 0x01
    b>
    assert
    frame_dig -2
    byte 0x0100000000000000000000000000000000
    b<
    assert
    frame_dig -2
    byte 0x01
    b-
    frame_dig -3
    b>
    assert
    frame_dig -2
    frame_dig -3
    b-
    frame_bury 0
    b pcg128_random_after_if_else@10

pcg128_random_else_body@9:
    frame_dig -3
    byte 0x80000000000000000000000000000000
    b<
    assert
    byte 0x0100000000000000000000000000000000
    frame_dig -3
    b-
    frame_bury 0

pcg128_random_after_if_else@10:
    frame_dig 0
    dup
    callsub __uint128_twos
    swap
    b%
    frame_bury 2
    int 0
    frame_bury 3

pcg128_random_for_header@11:
    frame_dig 3
    frame_dig -1
    <
    bz pcg128_random_after_for@19

pcg128_random_while_top@13:
    frame_dig -7
    frame_dig -6
    frame_dig -5
    frame_dig -4
    callsub __pcg128_unbounded_random
    dup
    cover 5
    frame_bury 1
    frame_bury -4
    frame_bury -5
    frame_bury -6
    frame_bury -7
    frame_dig 2
    b>=
    bz pcg128_random_while_top@13
    frame_dig 4
    extract 2 0
    frame_dig 1
    frame_dig 0
    b%
    frame_dig -3
    b+
    dup
    len
    int 16
    <=
    assert // overflow
    int 16
    bzero
    b|
    concat
    dup
    len
    int 16
    /
    itob
    extract 6 2
    swap
    concat
    frame_bury 4
    frame_dig 3
    int 1
    +
    frame_bury 3
    b pcg128_random_for_header@11

pcg128_random_after_for@19:

pcg128_random_after_if_else@20:
    frame_dig -7
    frame_dig -6
    frame_dig -5
    frame_dig -4
    frame_dig 4
    uncover 9
    uncover 9
    uncover 9
    uncover 9
    uncover 9
    retsub


// lib_pcg.pcg128.__pcg128_unbounded_random(state.0: uint64, state.1: uint64, state.2: uint64, state.3: uint64) -> uint64, uint64, uint64, uint64, bytes:
__pcg128_unbounded_random:
    proto 4 5
    frame_dig -4
    int 1442695040888963407
    callsub __pcg32_step
    dup
    !
    int 1442695040888963409
    swap
    shl
    frame_dig -3
    swap
    callsub __pcg32_step
    dup
    !
    int 1442695040888963411
    swap
    shl
    frame_dig -2
    swap
    callsub __pcg32_step
    dup
    !
    int 1442695040888963413
    swap
    shl
    frame_dig -1
    swap
    callsub __pcg32_step
    frame_dig -4
    callsub __pcg32_output
    int 32
    shl
    frame_dig -3
    callsub __pcg32_output
    |
    itob
    frame_dig -2
    callsub __pcg32_output
    int 32
    shl
    frame_dig -1
    callsub __pcg32_output
    |
    itob
    concat
    retsub


// lib_pcg.pcg32.__pcg32_output(state: uint64) -> uint64:
__pcg32_output:
    proto 1 1
    frame_dig -1
    int 18
    shr
    frame_dig -1
    ^
    int 27
    shr
    int 4294967295
    &
    frame_dig -1
    int 59
    shr
    dup
    ~
    int 1
    addw
    bury 1
    dig 2
    uncover 2
    shr
    cover 2
    int 31
    &
    shl
    int 4294967295
    &
    |
    retsub


// lib_pcg.pcg128.__uint128_twos(value: bytes) -> bytes:
__uint128_twos:
    proto 1 1
    frame_dig -1
    b~
    byte 0x01
    b+
    byte 0xffffffffffffffffffffffffffffffff
    b&
    retsub


// smart_contracts.lib_pcg128_exposer.contract.LibPcg128ExposerAlgopy.update() -> void:
update:
    proto 0 0
    txn Sender
    global CreatorAddress
    ==
    assert
    retsub
