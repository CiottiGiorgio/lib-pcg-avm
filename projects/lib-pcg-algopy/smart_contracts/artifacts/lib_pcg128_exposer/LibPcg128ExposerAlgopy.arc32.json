{
    "hints": {
        "bounded_rand_uint128(byte[32],uint128,uint128,uint16)uint128[]": {
            "call_config": {
                "no_op": "CALL"
            }
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCgpzbWFydF9jb250cmFjdHMubGliX3BjZzEyOF9leHBvc2VyLmNvbnRyYWN0LkxpYlBjZzEyOEV4cG9zZXJBbGdvcHkuY2xlYXJfc3RhdGVfcHJvZ3JhbToKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9saWJfcGNnMTI4X2V4cG9zZXIvY29udHJhY3QucHk6OAogICAgLy8gY2xhc3MgTGliUGNnMTI4RXhwb3NlckFsZ29weShhcmM0LkFSQzRDb250cmFjdCk6CiAgICBpbnQgMQogICAgcmV0dXJuCg=="
    },
    "state": {
        "global": {
            "num_byte_slices": 0,
            "num_uints": 0
        },
        "local": {
            "num_byte_slices": 0,
            "num_uints": 0
        }
    },
    "schema": {
        "global": {
            "declared": {},
            "reserved": {}
        },
        "local": {
            "declared": {},
            "reserved": {}
        }
    },
    "contract": {
        "name": "LibPcg128ExposerAlgopy",
        "methods": [
            {
                "name": "bounded_rand_uint128",
                "args": [
                    {
                        "type": "byte[32]",
                        "name": "seed"
                    },
                    {
                        "type": "uint128",
                        "name": "lower_bound"
                    },
                    {
                        "type": "uint128",
                        "name": "upper_bound"
                    },
                    {
                        "type": "uint16",
                        "name": "length"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "uint128[]"
                }
            }
        ],
        "networks": {}
    },
    "bare_call_config": {
        "update_application": "CALL",
        "no_op": "CREATE"
    }
}