{
    "name": "LibPcg128ExposerAlgoPy",
    "structs": {},
    "methods": [
        {
            "name": "bounded_rand_uint128",
            "args": [
                {
                    "type": "byte[32]",
                    "name": "seed"
                },
                {
                    "type": "uint128",
                    "name": "lower_bound"
                },
                {
                    "type": "uint128",
                    "name": "upper_bound"
                },
                {
                    "type": "uint16",
                    "name": "length"
                }
            ],
            "returns": {
                "type": "uint128[]"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 0
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {},
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": [
            "UpdateApplication"
        ]
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        103
                    ],
                    "errorMessage": "OnCompletion must be NoOp && can only call when not creating"
                },
                {
                    "pc": [
                        131
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        121
                    ],
                    "errorMessage": "can only call when not creating"
                },
                {
                    "pc": [
                        561,
                        735
                    ],
                    "errorMessage": "max array length exceeded"
                },
                {
                    "pc": [
                        551,
                        725
                    ],
                    "errorMessage": "overflow"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDExCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
    },
    "byteCode": {
        "approval": "CyAIrf7V5NSF/ahYAQD/////D8+Cnrvv796CFNGCnrvv796CFNOCnrvv796CFNWCnrvv796CFCYDAAEBEQEAAAAAAAAAAAAAAAAAAAAAMRtBABiABMNeCV02GgCOAQABADEZFDEYEERCAPAkgQQxGY4CAAoAAQAxGEQxADIJEkMxGBRDigQFi/wiHUUBIQQeRQFJFCEFTJCL/SIdRQEeRQFJFCEGTJCL/iIdRQEeRQFJFCEHTJCL/yIdRQEeRQGL/IESkYv8G4EbkSUai/yBO5FKkUwcIx5FAYEfGk8CTJAlGhmBIJCL/YESkYv9G4EbkSUai/2BO5FKkUwcIx5FAYEfGk8CTJAlGhkZFov+gRKRi/4bgRuRJRqL/oE7kUqRTBwjHkUBgR8aTwJMkCUaGYEgkIv/gRKRi/8bgRuRJRqL/4E7kUqRTBwjHkUBgR8aTwJMkCUaGRkWUIkkRwIoRwQ2GgI2GgM2GgI2GgE2GgRLARWBIBJESwEkWyQiHUUBSSEEHkUBTwIeRQEiHUUBIQQeTgVISwKBCFtLASEFHkUBHkUBIh1FASEFHk4FSEsCgRBbSwEhBh5FAR5FASIdRQEhBh5OBUhPAoEYW0whBx5FAR5FASIdRQEhBx5OA0gXTIACAABMKKhBAGlLBiioQQBiJEsDRQpLBEULSwVFDEsGRQ1FDUsMSwIMQQA7SwtLC0sLSwuI/mxOBEUNRQ1FDUUNSRWBEA5EgRCvq0sBSU8CUEwkWSMIFlcGAlwARQFLDCMIRQ1C/72ABBUffHVLAVCwI0NLBiipQQCbSwZJKaVESSqkREkpoUsJSU8CpEShRRBLD0muKaCAEP////////////////////+sTKpFDiRLA0UKSwRFC0sFRQxLBkUNRQ1LDEsCDEH/nksLSwtLC0sLiP3PSU4FRRRFDUUNRQ1FDUsOp0H/4ksOSxCqSwigSRWBEA5EgRCvq0sBSU8CUEwkWSMIFlcGAlwARQFLDCMIRQ1C/6xLB0mAEIAAAAAAAAAAAAAAAAAAAACkRCpMoUUQQv9d",
        "clear": "C4EBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 5,
            "minor": 0,
            "patch": 1
        }
    },
    "events": [],
    "templateVariables": {}
}