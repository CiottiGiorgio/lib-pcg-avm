{
    "name": "LibPcg32ExposerAlgoPy",
    "structs": {},
    "methods": [
        {
            "name": "bounded_rand_uint32",
            "args": [
                {
                    "type": "byte[8]",
                    "name": "seed"
                },
                {
                    "type": "uint32",
                    "name": "lower_bound"
                },
                {
                    "type": "uint32",
                    "name": "upper_bound"
                },
                {
                    "type": "uint16",
                    "name": "length"
                }
            ],
            "returns": {
                "type": "uint32[]"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "bounded_rand_uint16",
            "args": [
                {
                    "type": "byte[8]",
                    "name": "seed"
                },
                {
                    "type": "uint16",
                    "name": "lower_bound"
                },
                {
                    "type": "uint16",
                    "name": "upper_bound"
                },
                {
                    "type": "uint16",
                    "name": "length"
                }
            ],
            "returns": {
                "type": "uint16[]"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "bounded_rand_uint8",
            "args": [
                {
                    "type": "byte[8]",
                    "name": "seed"
                },
                {
                    "type": "uint8",
                    "name": "lower_bound"
                },
                {
                    "type": "uint8",
                    "name": "upper_bound"
                },
                {
                    "type": "uint16",
                    "name": "length"
                }
            ],
            "returns": {
                "type": "uint8[]"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 0
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {},
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": [
            "UpdateApplication"
        ]
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        44
                    ],
                    "errorMessage": "OnCompletion must be NoOp"
                },
                {
                    "pc": [
                        101
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        91
                    ],
                    "errorMessage": "can only call when not creating"
                },
                {
                    "pc": [
                        480,
                        548,
                        616
                    ],
                    "errorMessage": "invalid number of bytes for arc4.static_array<arc4.uint8, 8>"
                },
                {
                    "pc": [
                        507,
                        557,
                        566,
                        575,
                        641
                    ],
                    "errorMessage": "invalid number of bytes for arc4.uint16"
                },
                {
                    "pc": [
                        489,
                        498
                    ],
                    "errorMessage": "invalid number of bytes for arc4.uint32"
                },
                {
                    "pc": [
                        624,
                        632
                    ],
                    "errorMessage": "invalid number of bytes for arc4.uint8"
                },
                {
                    "pc": [
                        156
                    ],
                    "errorMessage": "overflow"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDExCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
    },
    "byteCode": {
        "approval": "CyAGAQgA/////w+t/tXk1IX9qFjPgp677+/eghQmAQQVH3x1MRtBACQxGRREMRhEggME7Qb3CgSNfM55BNCjXh42GgCOAwGNAdECFQAkgQQxGY4CAAoAAQAxGEQxADIJEkMxGBREIkOKAQGL/xUjEkSL/xckIQQdRQEhBR5FAR5FASEEHUUBIQUeRQGJigUCgABHBYv/FkmTgRAORFcGAov8IxJAABCL/IEQEkAACIv8gSASQQEeIkSL/IEDkUmMASNMCYwFi/1AAGCL/kAAWySMA4sDi/8MQQBHi/shBB1FASEFHkUBi/uBEpGL+xuBG5ElGov7gTuRSpFMHCIeRQGBHxpPAkyQJRoZFosFiwFYiwZMUIwGiwMiCIwDjPtC/7GL+4sGjAGMAImL/kEAkov+Ig1EIov8kIv+DUSL/iIJi/0NRIv+i/0JjACLAEkcIh5FASUaTBiMBCSMA4sDi/8MQf+9i/shBB1FASEFHkUBi/uBEpGL+xuBG5ElGov7gTuRSpFMHCIeRQGBHxpPAkyQJRoZSYwCiwQPQQAfiwKLABiL/QgWiwWLAViLBkxQjAaLAyIIjAOM+0L/oIz7Qv+jIov8kEkiCYv9DUSL/QmMAEL/dyRC/t82GgFJFSMSRDYaAkkVgQQSRDYaA0kVgQQSRDYaBEkVgQISRE8DiP5nTwMXTwMXTwMXTwOBIE4ETgSI/nhFAShMULAiQzYaAUkVIxJENhoCSRWBAhJENhoDSRWBAhJENhoESRWBAhJETwOI/iNPAxdPAxdPAxdPA4EQTgROBIj+NEUBKExQsCJDNhoBSRUjEkQ2GgJJFSISRDYaA0kVIhJENhoESRWBAhJETwOI/eFPAxdPAxdPAxdPAyNOBE4EiP3zRQEoTFCwIkM=",
        "clear": "C4EBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 5,
            "minor": 3,
            "patch": 2
        }
    },
    "events": [],
    "templateVariables": {}
}