#pragma version 10

smart_contracts.lib_pcg32_exposer.contract.LibPcg32ExposerAlgopy.approval_program:
    txn NumAppArgs
    bz main_bare_routing@7
    method "bounded_rand_uint32(byte[8],uint32,uint32,uint16)uint32[]"
    method "bounded_rand_uint16(byte[8],uint16,uint16,uint16)uint16[]"
    method "bounded_rand_uint8(byte[8],uint8,uint8,uint16)uint8[]"
    txna ApplicationArgs 0
    match main_bounded_rand_uint32_route@2 main_bounded_rand_uint16_route@3 main_bounded_rand_uint8_route@4
    err // reject transaction

main_bounded_rand_uint32_route@2:
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    txna ApplicationArgs 1
    txna ApplicationArgs 2
    txna ApplicationArgs 3
    txna ApplicationArgs 4
    callsub bounded_rand_uint32
    byte 0x151f7c75
    swap
    concat
    log
    int 1
    return

main_bounded_rand_uint16_route@3:
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    txna ApplicationArgs 1
    txna ApplicationArgs 2
    txna ApplicationArgs 3
    txna ApplicationArgs 4
    callsub bounded_rand_uint16
    byte 0x151f7c75
    swap
    concat
    log
    int 1
    return

main_bounded_rand_uint8_route@4:
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    txna ApplicationArgs 1
    txna ApplicationArgs 2
    txna ApplicationArgs 3
    txna ApplicationArgs 4
    callsub bounded_rand_uint8
    byte 0x151f7c75
    swap
    concat
    log
    int 1
    return

main_bare_routing@7:
    int 0
    int 4
    txn OnCompletion
    match main_create@8 main_update@9
    err // reject transaction

main_create@8:
    txn ApplicationID
    !
    assert // is creating
    int 1
    return

main_update@9:
    txn ApplicationID
    assert // is not creating
    callsub update
    int 1
    return


// smart_contracts.lib_pcg32_exposer.contract.LibPcg32ExposerAlgopy.bounded_rand_uint32(seed: bytes, lower_bound: bytes, upper_bound: bytes, length: bytes) -> bytes:
bounded_rand_uint32:
    proto 4 1
    frame_dig -4
    callsub pcg32_init
    frame_dig -3
    btoi
    frame_dig -2
    btoi
    frame_dig -1
    btoi
    callsub pcg32_random
    bury 1
    retsub


// lib_pcg.pcg32.pcg32_init(seed: bytes) -> uint64:
pcg32_init:
    proto 1 1
    frame_dig -1
    len
    int 8
    ==
    assert
    frame_dig -1
    btoi
    int 1442695040888963407
    callsub __pcg32_init
    retsub


// lib_pcg.pcg32.__pcg32_init(initial_state: uint64, incr: uint64) -> uint64:
__pcg32_init:
    proto 2 1
    int 0
    frame_dig -1
    callsub __pcg32_step
    frame_dig -2
    addw
    bury 1
    frame_dig -1
    callsub __pcg32_step
    retsub


// lib_pcg.pcg32.__pcg32_step(state: uint64, incr: uint64) -> uint64:
__pcg32_step:
    proto 2 1
    frame_dig -2
    int 6364136223846793005
    mulw
    bury 1
    frame_dig -1
    addw
    bury 1
    retsub


// lib_pcg.pcg32.pcg32_random(state: uint64, lower_bound: uint64, upper_bound: uint64, length: uint64) -> uint64, bytes:
pcg32_random:
    proto 4 2
    frame_dig -4
    int 32
    frame_dig -3
    frame_dig -2
    frame_dig -1
    callsub __pcg32_bounded_sequence
    swap
    dup
    frame_bury -4
    swap
    retsub


// lib_pcg.pcg32.__pcg32_bounded_sequence(state: uint64, bit_size: uint64, lower_bound: uint64, upper_bound: uint64, length: uint64) -> uint64, bytes:
__pcg32_bounded_sequence:
    proto 5 2
    byte ""
    dupn 5
    frame_dig -1
    int 65536
    <
    assert
    frame_dig -1
    itob
    extract 6 2
    frame_dig -4
    int 8
    ==
    bnz __pcg32_bounded_sequence_bool_true@3
    frame_dig -4
    int 16
    ==
    bnz __pcg32_bounded_sequence_bool_true@3
    frame_dig -4
    int 32
    ==
    bz __pcg32_bounded_sequence_bool_false@4

__pcg32_bounded_sequence_bool_true@3:
    int 1
    b __pcg32_bounded_sequence_bool_merge@5

__pcg32_bounded_sequence_bool_false@4:
    int 0

__pcg32_bounded_sequence_bool_merge@5:
    assert
    frame_dig -4
    int 3
    shr
    dup
    frame_bury 1
    int 8
    swap
    -
    frame_bury 5
    frame_dig -3
    bnz __pcg32_bounded_sequence_else_body@12
    frame_dig -2
    bnz __pcg32_bounded_sequence_else_body@12
    int 0
    frame_bury 3

__pcg32_bounded_sequence_for_header@8:
    frame_dig 3
    frame_dig -1
    <
    bz __pcg32_bounded_sequence_after_if_else@25
    frame_dig -5
    callsub __pcg32_unbounded_random
    swap
    frame_bury -5
    itob
    frame_dig 5
    frame_dig 1
    extract3
    frame_dig 6
    swap
    concat
    frame_bury 6
    frame_dig 3
    int 1
    +
    frame_bury 3
    b __pcg32_bounded_sequence_for_header@8

__pcg32_bounded_sequence_else_body@12:
    frame_dig -2
    bz __pcg32_bounded_sequence_else_body@14
    frame_dig -2
    int 1
    >
    assert
    int 1
    frame_dig -4
    shl
    frame_dig -2
    >
    assert
    frame_dig -2
    int 1
    -
    frame_dig -3
    >
    assert
    frame_dig -2
    frame_dig -3
    -
    frame_bury 0
    b __pcg32_bounded_sequence_after_if_else@15

__pcg32_bounded_sequence_else_body@14:
    int 1
    frame_dig -4
    shl
    dup
    int 1
    -
    frame_dig -3
    >
    assert
    frame_dig -3
    -
    frame_bury 0

__pcg32_bounded_sequence_after_if_else@15:
    frame_dig 0
    dup
    callsub __uint64_twos
    callsub __mask_to_uint32
    swap
    %
    frame_bury 4
    int 0
    frame_bury 3

__pcg32_bounded_sequence_for_header@16:
    frame_dig 3
    frame_dig -1
    <
    bz __pcg32_bounded_sequence_after_for@24

__pcg32_bounded_sequence_while_top@18:
    frame_dig -5
    callsub __pcg32_unbounded_random
    dup
    cover 2
    frame_bury 2
    frame_bury -5
    frame_dig 4
    >=
    bz __pcg32_bounded_sequence_while_top@18
    frame_dig 2
    frame_dig 0
    %
    frame_dig -3
    +
    itob
    frame_dig 5
    frame_dig 1
    extract3
    frame_dig 6
    swap
    concat
    frame_bury 6
    frame_dig 3
    int 1
    +
    frame_bury 3
    b __pcg32_bounded_sequence_for_header@16

__pcg32_bounded_sequence_after_for@24:

__pcg32_bounded_sequence_after_if_else@25:
    frame_dig -5
    frame_dig 6
    frame_bury 1
    frame_bury 0
    retsub


// lib_pcg.pcg32.__pcg32_unbounded_random(state: uint64) -> uint64, uint64:
__pcg32_unbounded_random:
    proto 1 2
    frame_dig -1
    int 1442695040888963407
    callsub __pcg32_step
    frame_dig -1
    callsub __pcg32_output
    retsub


// lib_pcg.pcg32.__pcg32_output(state: uint64) -> uint64:
__pcg32_output:
    proto 1 1
    frame_dig -1
    int 18
    shr
    frame_dig -1
    ^
    int 27
    shr
    int 4294967295
    &
    frame_dig -1
    int 59
    shr
    dup
    ~
    int 1
    addw
    bury 1
    dig 2
    uncover 2
    shr
    cover 2
    int 31
    &
    shl
    int 4294967295
    &
    |
    retsub


// lib_pcg.pcg32.__uint64_twos(value: uint64) -> uint64:
__uint64_twos:
    proto 1 1
    frame_dig -1
    ~
    int 1
    addw
    bury 1
    retsub


// lib_pcg.pcg32.__mask_to_uint32(value: uint64) -> uint64:
__mask_to_uint32:
    proto 1 1
    frame_dig -1
    int 4294967295
    &
    retsub


// smart_contracts.lib_pcg32_exposer.contract.LibPcg32ExposerAlgopy.bounded_rand_uint16(seed: bytes, lower_bound: bytes, upper_bound: bytes, length: bytes) -> bytes:
bounded_rand_uint16:
    proto 4 1
    frame_dig -4
    callsub pcg16_init
    frame_dig -3
    btoi
    frame_dig -2
    btoi
    frame_dig -1
    btoi
    callsub pcg16_random
    bury 1
    retsub


// lib_pcg.pcg32.pcg16_init(seed: bytes) -> uint64:
pcg16_init:
    proto 1 1
    frame_dig -1
    callsub pcg32_init
    retsub


// lib_pcg.pcg32.pcg16_random(state: uint64, lower_bound: uint64, upper_bound: uint64, length: uint64) -> uint64, bytes:
pcg16_random:
    proto 4 2
    frame_dig -4
    int 16
    frame_dig -3
    frame_dig -2
    frame_dig -1
    callsub __pcg32_bounded_sequence
    swap
    dup
    frame_bury -4
    swap
    retsub


// smart_contracts.lib_pcg32_exposer.contract.LibPcg32ExposerAlgopy.bounded_rand_uint8(seed: bytes, lower_bound: bytes, upper_bound: bytes, length: bytes) -> bytes:
bounded_rand_uint8:
    proto 4 1
    frame_dig -4
    callsub pcg8_init
    frame_dig -3
    btoi
    frame_dig -2
    btoi
    frame_dig -1
    btoi
    callsub pcg8_random
    bury 1
    retsub


// lib_pcg.pcg32.pcg8_init(seed: bytes) -> uint64:
pcg8_init:
    proto 1 1
    frame_dig -1
    callsub pcg32_init
    retsub


// lib_pcg.pcg32.pcg8_random(state: uint64, lower_bound: uint64, upper_bound: uint64, length: uint64) -> uint64, bytes:
pcg8_random:
    proto 4 2
    frame_dig -4
    int 8
    frame_dig -3
    frame_dig -2
    frame_dig -1
    callsub __pcg32_bounded_sequence
    swap
    dup
    frame_bury -4
    swap
    retsub


// smart_contracts.lib_pcg32_exposer.contract.LibPcg32ExposerAlgopy.update() -> void:
update:
    proto 0 0
    txn Sender
    global CreatorAddress
    ==
    assert
    retsub
