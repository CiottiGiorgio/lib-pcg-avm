{
  "version": 3,
  "sources": [
    "../../../lib_pcg/pcg32.py",
    "../../lib_pcg32_exposer/contract.py"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACcA;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;AAAA;;AAiCK;;AAAA;AAAA;AAAA;;AAAA;AAjCL;;;AAAA;;;AAAA;;;AAAA;;;AAiCK;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAhBA;;AAAA;AAAA;AAAA;;AAAA;AAjBL;;;AAAA;;;AAAA;;;AAAA;;;AAiBK;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAhBA;;AAAA;AAAA;AAAA;;AAAA;AADL;;;AAAA;;;AAAA;;;AAAA;;;AACK;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AADL;;AAAA;AAAA;;AAAA;;;;;;AAAA;;;;;;;;;AAiDK;;AAAA;AAAL;;;AAAA;;AAhDA;;;AAQQ;;AAAQ;;;AAGG;;AAAA;AAAoB;;AAAA;AAAoB;;AAAA;AD4CrC;;AACP;;AADO;;AAAA;;AAAA;;;AAAA;;ACzCd;ADpBR;;;AAWW;;AAAA;AAAe;AAAf;AAAP;AAEoB;;AAAA;AAoIC;AAkHe;;AAAf;AAAA;;AAtPc;;AAuPd;AAAA;;AAlHD;AAAA;;AAiHgB;;AAAf;AAAA;;AAtPc;;AAuPd;AAAA;;AAvPrB;AA0IJ;;;;;;;AAoCW;;AAAS;;;;AAAT;AAAP;AACU;;AAAA;AAAA;;;AAEH;;AAAY;AAAZ;AAAA;;;AAAiB;;AAAY;;AAAZ;AAAjB;;;AAAmC;;AAAY;;AAAZ;AAAnC;;;;AAAP;AACA;;AAAwB;;AAAZ;AAAZ;AAAA;;AACwB;AAAxB;AAAwB;AAAxB;;AAEG;;AAAA;;;AAAA;;AAAA;;;AACU;AAAL;;AAAK;;AAAA;;AAAA;AAAjB;;;AAgEyB;;AAAe;;AAAf;AAAA;;AAfM;;AAgBN;AAAA;;AASE;;AAAS;;AAAT;AAAD;;AAAA;AAA0B;;AAA3B;AAqBL;AAAT;AArB8C;;AAAS;;AAAT;AAO7C;AAAA;AAMuB;AAAA;AAAQ;AAAhB;AAAA;;AANiD;;AAArB;AAAV;;AAAA;AAAA;AAczB;AAAT;AAdA;AA9EsB;AAAX;;AAAA;;AAAA;AAAV;;AAAA;AAAA;AAAA;;AAHK;;AAAA;AAAA;AAAA;;;;;;;AA6Bb;;AAAA;;AAAA;;AAAA;;AAAA;AAxBJ;;AAAA;;;AACmB;;AAAc;AAAd;AAAP;AACsB;AAAA;;AAAA;AAAf;;AAAA;AAAP;AACsB;;AAAc;AAAd;AAAf;;AAAA;AAAP;AAEA;;AAAA;;AAAiB;AAAjB;;AA6EuB;;AAAA;AAAA;AAAQ;AAAhB;AAAA;;AAQP;AAAT;AA/EH;AAAY;AAAZ;;AAES;AAAL;;AAAK;;AAAA;;AAAA;AAAjB;;;AA8CyB;;AAAe;;AAAf;AAAA;;AAfM;;AAgBN;AAAA;;AASE;;AAAS;;AAAT;AAAD;;AAAA;AAA0B;;AAA3B;AAqBL;AAAT;AArB8C;;AAAS;;AAAT;AAO7C;AAAA;AAMuB;AAAA;AAAQ;AAAhB;AAAA;;AANiD;;AAArB;AAAV;;AAAA;AAAA;AAczB;AAAT;AAdA;AAAA;AAAA;;AA5DQ;;AAAA;AAAnB;;;AAEiC;;AAAA;;AAAA;AAAD;;AAAA;AAAR;AADM;;AAAA;;AAAA;AAAV;;AAAA;AAAA;AAAA;;AAJH;;AAAA;AAAA;AAAA;;;;;;;;;;;;AANkB;AAAA;;AAAA;AAAD;AAAkB;AAAlB;AAAf;;AAAA;AAAP;AAEA;;AAAiB;AAAjB;;;;;;;;;AC3LZ;;;ADCW;;AAAA;;;ACUQ;;AAAA;AAAoB;;AAAA;AAAoB;;AAAA;AD2DrC;;AACP;;AADO;;AAAA;;AAAA;;;AAAA;;ACxDd;AAER;;;ADLW;;AAAA;;;ACgBQ;;AAAA;AAAoB;;AAAA;AAAoB;;AAAA;AD0ErC;;AACP;AADO;;AAAA;;AAAA;;;AAAA;;ACvEd;AAER;;;AAEe;;AAAc;;AAAd;AAAP;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "algopy.arc4.ARC4Contract.approval_program",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 1 0 4294967295 8 6364136223846793005 1442695040888963407"
    },
    "29": {
      "op": "bytecblock 0x151f7c75"
    },
    "36": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "38": {
      "op": "bz main_bare_routing@8",
      "stack_out": []
    },
    "41": {
      "op": "pushbytess 0xed06f70a 0x8d7cce79 0xd0a35e1e // method \"bounded_rand_uint32(byte[8],uint32,uint32,uint16)uint32[]\", method \"bounded_rand_uint16(byte[8],uint16,uint16,uint16)uint16[]\", method \"bounded_rand_uint8(byte[8],uint8,uint8,uint16)uint8[]\""
    },
    "58": {
      "op": "txna ApplicationArgs 0"
    },
    "61": {
      "op": "match main_bounded_rand_uint32_route@3 main_bounded_rand_uint16_route@4 main_bounded_rand_uint8_route@5"
    },
    "69": {
      "block": "main_after_if_else@13",
      "stack_in": [],
      "op": "intc_1 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "70": {
      "op": "return"
    },
    "71": {
      "block": "main_bounded_rand_uint8_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%23#0"
      ]
    },
    "73": {
      "op": "!",
      "defined_out": [
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%24#0"
      ]
    },
    "74": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "75": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%25#0"
      ]
    },
    "77": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "78": {
      "op": "txna ApplicationArgs 1"
    },
    "81": {
      "op": "txna ApplicationArgs 2"
    },
    "84": {
      "op": "txna ApplicationArgs 3"
    },
    "87": {
      "op": "txna ApplicationArgs 4",
      "defined_out": [
        "tmp%27#0",
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0"
      ],
      "stack_out": [
        "tmp%27#0",
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0"
      ]
    },
    "90": {
      "callsub": "smart_contracts.lib_pcg32_exposer.contract.LibPcg32ExposerAlgopy.bounded_rand_uint8",
      "op": "callsub bounded_rand_uint8",
      "defined_out": [
        "tmp%31#0"
      ],
      "stack_out": [
        "tmp%31#0"
      ]
    },
    "93": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%31#0"
      ],
      "stack_out": [
        "tmp%31#0",
        "0x151f7c75"
      ]
    },
    "94": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%31#0"
      ]
    },
    "95": {
      "op": "concat",
      "defined_out": [
        "tmp%32#0"
      ],
      "stack_out": [
        "tmp%32#0"
      ]
    },
    "96": {
      "op": "log",
      "stack_out": []
    },
    "97": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "98": {
      "op": "return"
    },
    "99": {
      "block": "main_bounded_rand_uint16_route@4",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "101": {
      "op": "!",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "102": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "103": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "105": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "106": {
      "op": "txna ApplicationArgs 1"
    },
    "109": {
      "op": "txna ApplicationArgs 2"
    },
    "112": {
      "op": "txna ApplicationArgs 3"
    },
    "115": {
      "op": "txna ApplicationArgs 4",
      "defined_out": [
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0",
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0",
        "tmp%20#0"
      ]
    },
    "118": {
      "callsub": "smart_contracts.lib_pcg32_exposer.contract.LibPcg32ExposerAlgopy.bounded_rand_uint16",
      "op": "callsub bounded_rand_uint16",
      "defined_out": [
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0"
      ]
    },
    "121": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0",
        "0x151f7c75"
      ]
    },
    "122": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%21#0"
      ]
    },
    "123": {
      "op": "concat",
      "defined_out": [
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0"
      ]
    },
    "124": {
      "op": "log",
      "stack_out": []
    },
    "125": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "126": {
      "op": "return"
    },
    "127": {
      "block": "main_bounded_rand_uint32_route@3",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "129": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "130": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "131": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "133": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "134": {
      "op": "txna ApplicationArgs 1"
    },
    "137": {
      "op": "txna ApplicationArgs 2"
    },
    "140": {
      "op": "txna ApplicationArgs 3"
    },
    "143": {
      "op": "txna ApplicationArgs 4",
      "defined_out": [
        "tmp%10#0",
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0",
        "tmp%10#0"
      ]
    },
    "146": {
      "callsub": "smart_contracts.lib_pcg32_exposer.contract.LibPcg32ExposerAlgopy.bounded_rand_uint32",
      "op": "callsub bounded_rand_uint32",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "149": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0",
        "0x151f7c75"
      ]
    },
    "150": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%11#0"
      ]
    },
    "151": {
      "op": "concat",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "152": {
      "op": "log",
      "stack_out": []
    },
    "153": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "154": {
      "op": "return"
    },
    "155": {
      "block": "main_bare_routing@8",
      "stack_in": [],
      "op": "pushint 4 // 4"
    },
    "157": {
      "op": "intc_1 // 0"
    },
    "158": {
      "op": "txn OnCompletion",
      "defined_out": [
        "0",
        "4",
        "tmp%33#0"
      ],
      "stack_out": [
        "4",
        "0",
        "tmp%33#0"
      ]
    },
    "160": {
      "op": "match main_update@9 main___algopy_default_create@10",
      "stack_out": []
    },
    "166": {
      "op": "b main_after_if_else@13"
    },
    "169": {
      "block": "main___algopy_default_create@10",
      "stack_in": [],
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%36#0"
      ],
      "stack_out": [
        "tmp%36#0"
      ]
    },
    "171": {
      "op": "!",
      "defined_out": [
        "tmp%37#0"
      ],
      "stack_out": [
        "tmp%37#0"
      ]
    },
    "172": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "173": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "174": {
      "op": "return"
    },
    "175": {
      "block": "main_update@9",
      "stack_in": [],
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%34#0"
      ],
      "stack_out": [
        "tmp%34#0"
      ]
    },
    "177": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "178": {
      "callsub": "smart_contracts.lib_pcg32_exposer.contract.LibPcg32ExposerAlgopy.update",
      "op": "callsub update"
    },
    "181": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "182": {
      "op": "return"
    },
    "183": {
      "subroutine": "smart_contracts.lib_pcg32_exposer.contract.LibPcg32ExposerAlgopy.bounded_rand_uint32",
      "params": {
        "seed#0": "bytes",
        "lower_bound#0": "bytes",
        "upper_bound#0": "bytes",
        "length#0": "bytes"
      },
      "block": "bounded_rand_uint32",
      "stack_in": [],
      "op": "proto 4 1"
    },
    "186": {
      "op": "frame_dig -4",
      "defined_out": [
        "seed#0 (copy)"
      ],
      "stack_out": [
        "seed#0 (copy)"
      ]
    },
    "188": {
      "callsub": "lib_pcg.pcg32.pcg32_init",
      "op": "callsub pcg32_init",
      "defined_out": [
        "state#0"
      ],
      "stack_out": [
        "state#0"
      ]
    },
    "191": {
      "op": "frame_dig -3",
      "defined_out": [
        "lower_bound#0 (copy)",
        "state#0"
      ],
      "stack_out": [
        "state#0",
        "lower_bound#0 (copy)"
      ]
    },
    "193": {
      "op": "btoi",
      "defined_out": [
        "lower_bound#1",
        "state#0"
      ],
      "stack_out": [
        "state#0",
        "lower_bound#1"
      ]
    },
    "194": {
      "op": "frame_dig -2",
      "defined_out": [
        "lower_bound#1",
        "state#0",
        "upper_bound#0 (copy)"
      ],
      "stack_out": [
        "state#0",
        "lower_bound#1",
        "upper_bound#0 (copy)"
      ]
    },
    "196": {
      "op": "btoi",
      "defined_out": [
        "lower_bound#1",
        "state#0",
        "upper_bound#1"
      ],
      "stack_out": [
        "state#0",
        "lower_bound#1",
        "upper_bound#1"
      ]
    },
    "197": {
      "op": "frame_dig -1",
      "defined_out": [
        "length#0 (copy)",
        "lower_bound#1",
        "state#0",
        "upper_bound#1"
      ],
      "stack_out": [
        "state#0",
        "lower_bound#1",
        "upper_bound#1",
        "length#0 (copy)"
      ]
    },
    "199": {
      "op": "btoi",
      "defined_out": [
        "length#1",
        "lower_bound#1",
        "state#0",
        "upper_bound#1"
      ],
      "stack_out": [
        "state#0",
        "lower_bound#1",
        "upper_bound#1",
        "length#1"
      ]
    },
    "200": {
      "op": "uncover 3",
      "stack_out": [
        "lower_bound#1",
        "upper_bound#1",
        "length#1",
        "state#0"
      ]
    },
    "202": {
      "op": "pushint 32 // 32",
      "defined_out": [
        "32",
        "length#1",
        "lower_bound#1",
        "state#0",
        "upper_bound#1"
      ],
      "stack_out": [
        "lower_bound#1",
        "upper_bound#1",
        "length#1",
        "state#0",
        "32"
      ]
    },
    "204": {
      "op": "cover 4"
    },
    "206": {
      "op": "cover 4",
      "stack_out": [
        "state#0",
        "32",
        "lower_bound#1",
        "upper_bound#1",
        "length#1"
      ]
    },
    "208": {
      "callsub": "lib_pcg.pcg32.__pcg32_bounded_sequence",
      "op": "callsub __pcg32_bounded_sequence",
      "defined_out": [
        "sequence#1",
        "state#0"
      ],
      "stack_out": [
        "state#0",
        "sequence#1"
      ]
    },
    "211": {
      "op": "bury 1",
      "stack_out": [
        "sequence#1"
      ]
    },
    "213": {
      "retsub": true,
      "op": "retsub"
    },
    "214": {
      "subroutine": "lib_pcg.pcg32.pcg32_init",
      "params": {
        "seed#0": "bytes"
      },
      "block": "pcg32_init",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "217": {
      "op": "frame_dig -1",
      "defined_out": [
        "seed#0 (copy)"
      ],
      "stack_out": [
        "seed#0 (copy)"
      ]
    },
    "219": {
      "op": "len",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "220": {
      "op": "intc_3 // 8",
      "defined_out": [
        "8",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "8"
      ]
    },
    "221": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "222": {
      "op": "assert",
      "stack_out": []
    },
    "223": {
      "op": "frame_dig -1",
      "stack_out": [
        "seed#0 (copy)"
      ]
    },
    "225": {
      "op": "btoi",
      "defined_out": [
        "initial_state#0"
      ],
      "stack_out": [
        "initial_state#0"
      ]
    },
    "226": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "initial_state#0"
      ],
      "stack_out": [
        "initial_state#0",
        "0"
      ]
    },
    "227": {
      "op": "intc 4 // 6364136223846793005",
      "defined_out": [
        "0",
        "6364136223846793005",
        "initial_state#0"
      ],
      "stack_out": [
        "initial_state#0",
        "0",
        "6364136223846793005"
      ]
    },
    "229": {
      "op": "mulw",
      "defined_out": [
        "_high_mul#0",
        "initial_state#0",
        "low_mul#0"
      ],
      "stack_out": [
        "initial_state#0",
        "_high_mul#0",
        "low_mul#0"
      ]
    },
    "230": {
      "op": "bury 1",
      "stack_out": [
        "initial_state#0",
        "low_mul#0"
      ]
    },
    "232": {
      "op": "intc 5 // 1442695040888963407",
      "defined_out": [
        "1442695040888963407",
        "initial_state#0",
        "low_mul#0"
      ],
      "stack_out": [
        "initial_state#0",
        "low_mul#0",
        "1442695040888963407"
      ]
    },
    "234": {
      "op": "addw",
      "defined_out": [
        "_high_add#0",
        "initial_state#0",
        "low_add#0"
      ],
      "stack_out": [
        "initial_state#0",
        "_high_add#0",
        "low_add#0"
      ]
    },
    "235": {
      "op": "bury 1",
      "stack_out": [
        "initial_state#0",
        "low_add#0"
      ]
    },
    "237": {
      "op": "addw",
      "defined_out": [
        "_high_addw#0",
        "state#1"
      ],
      "stack_out": [
        "_high_addw#0",
        "state#1"
      ]
    },
    "238": {
      "op": "bury 1",
      "stack_out": [
        "state#1"
      ]
    },
    "240": {
      "op": "intc 4 // 6364136223846793005",
      "stack_out": [
        "state#1",
        "6364136223846793005"
      ]
    },
    "242": {
      "op": "mulw",
      "stack_out": [
        "_high_mul#0",
        "low_mul#0"
      ]
    },
    "243": {
      "op": "bury 1",
      "stack_out": [
        "low_mul#0"
      ]
    },
    "245": {
      "op": "intc 5 // 1442695040888963407",
      "stack_out": [
        "low_mul#0",
        "1442695040888963407"
      ]
    },
    "247": {
      "op": "addw",
      "stack_out": [
        "_high_add#0",
        "low_add#0"
      ]
    },
    "248": {
      "op": "bury 1",
      "stack_out": [
        "low_add#0"
      ]
    },
    "250": {
      "retsub": true,
      "op": "retsub"
    },
    "251": {
      "subroutine": "lib_pcg.pcg32.__pcg32_bounded_sequence",
      "params": {
        "state#0": "uint64",
        "bit_size#0": "uint64",
        "lower_bound#0": "uint64",
        "upper_bound#0": "uint64",
        "length#0": "uint64"
      },
      "block": "__pcg32_bounded_sequence",
      "stack_in": [],
      "op": "proto 5 2"
    },
    "254": {
      "op": "pushbytes \"\"",
      "stack_out": [
        "absolute_bound#0"
      ]
    },
    "256": {
      "op": "dupn 5",
      "stack_out": [
        "absolute_bound#0",
        "byte_size#0",
        "candidate#0",
        "i#0",
        "threshold#0",
        "truncate_start_cached#0"
      ]
    },
    "258": {
      "op": "frame_dig -1",
      "defined_out": [
        "length#0 (copy)"
      ],
      "stack_out": [
        "absolute_bound#0",
        "byte_size#0",
        "candidate#0",
        "i#0",
        "threshold#0",
        "truncate_start_cached#0",
        "length#0 (copy)"
      ]
    },
    "260": {
      "op": "pushint 65536 // 65536",
      "defined_out": [
        "65536",
        "length#0 (copy)"
      ],
      "stack_out": [
        "absolute_bound#0",
        "byte_size#0",
        "candidate#0",
        "i#0",
        "threshold#0",
        "truncate_start_cached#0",
        "length#0 (copy)",
        "65536"
      ]
    },
    "264": {
      "op": "<",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "absolute_bound#0",
        "byte_size#0",
        "candidate#0",
        "i#0",
        "threshold#0",
        "truncate_start_cached#0",
        "tmp%0#0"
      ]
    },
    "265": {
      "op": "assert",
      "stack_out": [
        "absolute_bound#0",
        "byte_size#0",
        "candidate#0",
        "i#0",
        "threshold#0",
        "truncate_start_cached#0"
      ]
    },
    "266": {
      "op": "frame_dig -1",
      "stack_out": [
        "absolute_bound#0",
        "byte_size#0",
        "candidate#0",
        "i#0",
        "threshold#0",
        "truncate_start_cached#0",
        "length#0 (copy)"
      ]
    },
    "268": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "absolute_bound#0",
        "byte_size#0",
        "candidate#0",
        "i#0",
        "threshold#0",
        "truncate_start_cached#0",
        "val_as_bytes%0#0"
      ]
    },
    "269": {
      "op": "extract 6 2",
      "defined_out": [
        "result#1"
      ],
      "stack_out": [
        "absolute_bound#0",
        "byte_size#0",
        "candidate#0",
        "i#0",
        "threshold#0",
        "truncate_start_cached#0",
        "result#1"
      ]
    },
    "272": {
      "op": "frame_dig -4",
      "defined_out": [
        "bit_size#0 (copy)",
        "result#1"
      ],
      "stack_out": [
        "absolute_bound#0",
        "byte_size#0",
        "candidate#0",
        "i#0",
        "threshold#0",
        "truncate_start_cached#0",
        "result#1",
        "bit_size#0 (copy)"
      ]
    },
    "274": {
      "op": "intc_3 // 8",
      "defined_out": [
        "8",
        "bit_size#0 (copy)",
        "result#1"
      ],
      "stack_out": [
        "absolute_bound#0",
        "byte_size#0",
        "candidate#0",
        "i#0",
        "threshold#0",
        "truncate_start_cached#0",
        "result#1",
        "bit_size#0 (copy)",
        "8"
      ]
    },
    "275": {
      "op": "==",
      "defined_out": [
        "result#1",
        "tmp%2#0"
      ],
      "stack_out": [
        "absolute_bound#0",
        "byte_size#0",
        "candidate#0",
        "i#0",
        "threshold#0",
        "truncate_start_cached#0",
        "result#1",
        "tmp%2#0"
      ]
    },
    "276": {
      "op": "bnz __pcg32_bounded_sequence_bool_true@3",
      "stack_out": [
        "absolute_bound#0",
        "byte_size#0",
        "candidate#0",
        "i#0",
        "threshold#0",
        "truncate_start_cached#0",
        "result#1"
      ]
    },
    "279": {
      "op": "frame_dig -4"
    },
    "281": {
      "op": "pushint 16 // 16"
    },
    "283": {
      "op": "=="
    },
    "284": {
      "op": "bnz __pcg32_bounded_sequence_bool_true@3"
    },
    "287": {
      "op": "frame_dig -4"
    },
    "289": {
      "op": "pushint 32 // 32"
    },
    "291": {
      "op": "=="
    },
    "292": {
      "op": "bz __pcg32_bounded_sequence_bool_false@4"
    },
    "295": {
      "block": "__pcg32_bounded_sequence_bool_true@3",
      "stack_in": [
        "absolute_bound#0",
        "byte_size#0",
        "candidate#0",
        "i#0",
        "threshold#0",
        "truncate_start_cached#0",
        "result#1"
      ],
      "op": "intc_0 // 1",
      "defined_out": [
        "or_result%0#0"
      ],
      "stack_out": [
        "absolute_bound#0",
        "byte_size#0",
        "candidate#0",
        "i#0",
        "threshold#0",
        "truncate_start_cached#0",
        "result#1",
        "or_result%0#0"
      ]
    },
    "296": {
      "block": "__pcg32_bounded_sequence_bool_merge@5",
      "stack_in": [
        "absolute_bound#0",
        "byte_size#0",
        "candidate#0",
        "i#0",
        "threshold#0",
        "truncate_start_cached#0",
        "result#1",
        "or_result%0#0"
      ],
      "op": "assert",
      "defined_out": [],
      "stack_out": [
        "absolute_bound#0",
        "byte_size#0",
        "candidate#0",
        "i#0",
        "threshold#0",
        "truncate_start_cached#0",
        "result#1"
      ]
    },
    "297": {
      "op": "frame_dig -4",
      "defined_out": [
        "bit_size#0 (copy)"
      ],
      "stack_out": [
        "absolute_bound#0",
        "byte_size#0",
        "candidate#0",
        "i#0",
        "threshold#0",
        "truncate_start_cached#0",
        "result#1",
        "bit_size#0 (copy)"
      ]
    },
    "299": {
      "op": "pushint 3 // 3",
      "defined_out": [
        "3",
        "bit_size#0 (copy)"
      ],
      "stack_out": [
        "absolute_bound#0",
        "byte_size#0",
        "candidate#0",
        "i#0",
        "threshold#0",
        "truncate_start_cached#0",
        "result#1",
        "bit_size#0 (copy)",
        "3"
      ]
    },
    "301": {
      "op": "shr",
      "defined_out": [
        "byte_size#0"
      ],
      "stack_out": [
        "absolute_bound#0",
        "byte_size#0",
        "candidate#0",
        "i#0",
        "threshold#0",
        "truncate_start_cached#0",
        "result#1",
        "byte_size#0"
      ]
    },
    "302": {
      "op": "dup",
      "stack_out": [
        "absolute_bound#0",
        "byte_size#0",
        "candidate#0",
        "i#0",
        "threshold#0",
        "truncate_start_cached#0",
        "result#1",
        "byte_size#0",
        "byte_size#0"
      ]
    },
    "303": {
      "op": "frame_bury 1",
      "defined_out": [
        "byte_size#0"
      ],
      "stack_out": [
        "absolute_bound#0",
        "byte_size#0",
        "candidate#0",
        "i#0",
        "threshold#0",
        "truncate_start_cached#0",
        "result#1",
        "byte_size#0"
      ]
    },
    "305": {
      "op": "intc_3 // 8",
      "defined_out": [
        "8",
        "byte_size#0"
      ],
      "stack_out": [
        "absolute_bound#0",
        "byte_size#0",
        "candidate#0",
        "i#0",
        "threshold#0",
        "truncate_start_cached#0",
        "result#1",
        "byte_size#0",
        "8"
      ]
    },
    "306": {
      "op": "swap",
      "stack_out": [
        "absolute_bound#0",
        "byte_size#0",
        "candidate#0",
        "i#0",
        "threshold#0",
        "truncate_start_cached#0",
        "result#1",
        "8",
        "byte_size#0"
      ]
    },
    "307": {
      "op": "-",
      "defined_out": [
        "byte_size#0",
        "truncate_start_cached#0"
      ],
      "stack_out": [
        "absolute_bound#0",
        "byte_size#0",
        "candidate#0",
        "i#0",
        "threshold#0",
        "truncate_start_cached#0",
        "result#1",
        "truncate_start_cached#0"
      ]
    },
    "308": {
      "op": "frame_bury 5",
      "defined_out": [
        "byte_size#0",
        "truncate_start_cached#0"
      ],
      "stack_out": [
        "absolute_bound#0",
        "byte_size#0",
        "candidate#0",
        "i#0",
        "threshold#0",
        "truncate_start_cached#0",
        "result#1"
      ]
    },
    "310": {
      "op": "frame_dig -3",
      "defined_out": [
        "byte_size#0",
        "lower_bound#0 (copy)",
        "truncate_start_cached#0"
      ],
      "stack_out": [
        "absolute_bound#0",
        "byte_size#0",
        "candidate#0",
        "i#0",
        "threshold#0",
        "truncate_start_cached#0",
        "result#1",
        "lower_bound#0 (copy)"
      ]
    },
    "312": {
      "op": "bnz __pcg32_bounded_sequence_else_body@12",
      "stack_out": [
        "absolute_bound#0",
        "byte_size#0",
        "candidate#0",
        "i#0",
        "threshold#0",
        "truncate_start_cached#0",
        "result#1"
      ]
    },
    "315": {
      "op": "frame_dig -2"
    },
    "317": {
      "op": "bnz __pcg32_bounded_sequence_else_body@12"
    },
    "320": {
      "op": "intc_1 // 0"
    },
    "321": {
      "op": "frame_bury 3"
    },
    "323": {
      "block": "__pcg32_bounded_sequence_for_header@8",
      "stack_in": [
        "absolute_bound#0",
        "byte_size#0",
        "candidate#0",
        "i#0",
        "threshold#0",
        "truncate_start_cached#0",
        "result#1"
      ],
      "op": "frame_dig 3",
      "defined_out": [
        "i#0"
      ],
      "stack_out": [
        "absolute_bound#0",
        "byte_size#0",
        "candidate#0",
        "i#0",
        "threshold#0",
        "truncate_start_cached#0",
        "result#1",
        "i#0"
      ]
    },
    "325": {
      "op": "frame_dig -1",
      "defined_out": [
        "i#0",
        "length#0 (copy)"
      ],
      "stack_out": [
        "absolute_bound#0",
        "byte_size#0",
        "candidate#0",
        "i#0",
        "threshold#0",
        "truncate_start_cached#0",
        "result#1",
        "i#0",
        "length#0 (copy)"
      ]
    },
    "327": {
      "op": "<",
      "defined_out": [
        "continue_looping%0#0",
        "i#0"
      ],
      "stack_out": [
        "absolute_bound#0",
        "byte_size#0",
        "candidate#0",
        "i#0",
        "threshold#0",
        "truncate_start_cached#0",
        "result#1",
        "continue_looping%0#0"
      ]
    },
    "328": {
      "op": "bz __pcg32_bounded_sequence_after_if_else@25",
      "stack_out": [
        "absolute_bound#0",
        "byte_size#0",
        "candidate#0",
        "i#0",
        "threshold#0",
        "truncate_start_cached#0",
        "result#1"
      ]
    },
    "331": {
      "op": "frame_dig -5"
    },
    "333": {
      "op": "intc 4 // 6364136223846793005"
    },
    "335": {
      "op": "mulw"
    },
    "336": {
      "op": "bury 1"
    },
    "338": {
      "op": "intc 5 // 1442695040888963407"
    },
    "340": {
      "op": "addw"
    },
    "341": {
      "op": "bury 1"
    },
    "343": {
      "op": "frame_dig -5"
    },
    "345": {
      "op": "pushint 18 // 18"
    },
    "347": {
      "op": "shr"
    },
    "348": {
      "op": "frame_dig -5"
    },
    "350": {
      "op": "^"
    },
    "351": {
      "op": "pushint 27 // 27"
    },
    "353": {
      "op": "shr"
    },
    "354": {
      "op": "intc_2 // 4294967295"
    },
    "355": {
      "op": "&"
    },
    "356": {
      "op": "frame_dig -5"
    },
    "358": {
      "op": "pushint 59 // 59"
    },
    "360": {
      "op": "shr"
    },
    "361": {
      "op": "dup2"
    },
    "362": {
      "op": "shr"
    },
    "363": {
      "op": "swap"
    },
    "364": {
      "op": "~"
    },
    "365": {
      "op": "intc_0 // 1"
    },
    "366": {
      "op": "addw"
    },
    "367": {
      "op": "bury 1"
    },
    "369": {
      "op": "pushint 31 // 31"
    },
    "371": {
      "op": "&"
    },
    "372": {
      "op": "uncover 2"
    },
    "374": {
      "op": "swap"
    },
    "375": {
      "op": "shl"
    },
    "376": {
      "op": "intc_2 // 4294967295"
    },
    "377": {
      "op": "&"
    },
    "378": {
      "op": "|"
    },
    "379": {
      "op": "itob"
    },
    "380": {
      "op": "frame_dig 5"
    },
    "382": {
      "op": "frame_dig 1"
    },
    "384": {
      "op": "extract3"
    },
    "385": {
      "op": "frame_dig 6"
    },
    "387": {
      "op": "swap"
    },
    "388": {
      "op": "concat"
    },
    "389": {
      "op": "frame_bury 6"
    },
    "391": {
      "op": "frame_dig 3"
    },
    "393": {
      "op": "intc_0 // 1"
    },
    "394": {
      "op": "+"
    },
    "395": {
      "op": "frame_bury 3"
    },
    "397": {
      "op": "frame_bury -5"
    },
    "399": {
      "op": "b __pcg32_bounded_sequence_for_header@8"
    },
    "402": {
      "block": "__pcg32_bounded_sequence_after_if_else@25",
      "stack_in": [
        "absolute_bound#0",
        "byte_size#0",
        "candidate#0",
        "i#0",
        "threshold#0",
        "truncate_start_cached#0",
        "result#1"
      ],
      "op": "frame_dig -5",
      "defined_out": [
        "state#0 (copy)"
      ],
      "stack_out": [
        "absolute_bound#0",
        "byte_size#0",
        "candidate#0",
        "i#0",
        "threshold#0",
        "truncate_start_cached#0",
        "result#1",
        "state#0 (copy)"
      ]
    },
    "404": {
      "op": "frame_dig 6",
      "defined_out": [
        "result#1",
        "state#0 (copy)"
      ],
      "stack_out": [
        "absolute_bound#0",
        "byte_size#0",
        "candidate#0",
        "i#0",
        "threshold#0",
        "truncate_start_cached#0",
        "result#1",
        "state#0 (copy)",
        "result#1"
      ]
    },
    "406": {
      "op": "frame_bury 1"
    },
    "408": {
      "op": "frame_bury 0"
    },
    "410": {
      "retsub": true,
      "op": "retsub"
    },
    "411": {
      "block": "__pcg32_bounded_sequence_else_body@12",
      "stack_in": [
        "absolute_bound#0",
        "byte_size#0",
        "candidate#0",
        "i#0",
        "threshold#0",
        "truncate_start_cached#0",
        "result#1"
      ],
      "op": "frame_dig -2",
      "defined_out": [
        "upper_bound#0 (copy)"
      ],
      "stack_out": [
        "absolute_bound#0",
        "byte_size#0",
        "candidate#0",
        "i#0",
        "threshold#0",
        "truncate_start_cached#0",
        "result#1",
        "upper_bound#0 (copy)"
      ]
    },
    "413": {
      "op": "bz __pcg32_bounded_sequence_else_body@14",
      "stack_out": [
        "absolute_bound#0",
        "byte_size#0",
        "candidate#0",
        "i#0",
        "threshold#0",
        "truncate_start_cached#0",
        "result#1"
      ]
    },
    "416": {
      "op": "frame_dig -2"
    },
    "418": {
      "op": "intc_0 // 1"
    },
    "419": {
      "op": ">"
    },
    "420": {
      "op": "assert"
    },
    "421": {
      "op": "intc_0 // 1"
    },
    "422": {
      "op": "frame_dig -4"
    },
    "424": {
      "op": "shl"
    },
    "425": {
      "op": "frame_dig -2"
    },
    "427": {
      "op": ">"
    },
    "428": {
      "op": "assert"
    },
    "429": {
      "op": "frame_dig -2"
    },
    "431": {
      "op": "intc_0 // 1"
    },
    "432": {
      "op": "-"
    },
    "433": {
      "op": "frame_dig -3"
    },
    "435": {
      "op": ">"
    },
    "436": {
      "op": "assert"
    },
    "437": {
      "op": "frame_dig -2"
    },
    "439": {
      "op": "frame_dig -3"
    },
    "441": {
      "op": "-"
    },
    "442": {
      "op": "frame_bury 0"
    },
    "444": {
      "block": "__pcg32_bounded_sequence_after_if_else@15",
      "stack_in": [
        "absolute_bound#0",
        "byte_size#0",
        "candidate#0",
        "i#0",
        "threshold#0",
        "truncate_start_cached#0",
        "result#1"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "absolute_bound#0"
      ],
      "stack_out": [
        "absolute_bound#0",
        "byte_size#0",
        "candidate#0",
        "i#0",
        "threshold#0",
        "truncate_start_cached#0",
        "result#1",
        "absolute_bound#0"
      ]
    },
    "446": {
      "op": "dup",
      "defined_out": [
        "absolute_bound#0",
        "absolute_bound#0 (copy)"
      ],
      "stack_out": [
        "absolute_bound#0",
        "byte_size#0",
        "candidate#0",
        "i#0",
        "threshold#0",
        "truncate_start_cached#0",
        "result#1",
        "absolute_bound#0",
        "absolute_bound#0 (copy)"
      ]
    },
    "447": {
      "op": "~",
      "defined_out": [
        "absolute_bound#0",
        "tmp%0#2"
      ],
      "stack_out": [
        "absolute_bound#0",
        "byte_size#0",
        "candidate#0",
        "i#0",
        "threshold#0",
        "truncate_start_cached#0",
        "result#1",
        "absolute_bound#0",
        "tmp%0#2"
      ]
    },
    "448": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "absolute_bound#0",
        "tmp%0#2"
      ],
      "stack_out": [
        "absolute_bound#0",
        "byte_size#0",
        "candidate#0",
        "i#0",
        "threshold#0",
        "truncate_start_cached#0",
        "result#1",
        "absolute_bound#0",
        "tmp%0#2",
        "1"
      ]
    },
    "449": {
      "op": "addw",
      "defined_out": [
        "_addw_high#0",
        "absolute_bound#0",
        "addw_low#0"
      ],
      "stack_out": [
        "absolute_bound#0",
        "byte_size#0",
        "candidate#0",
        "i#0",
        "threshold#0",
        "truncate_start_cached#0",
        "result#1",
        "absolute_bound#0",
        "_addw_high#0",
        "addw_low#0"
      ]
    },
    "450": {
      "op": "bury 1",
      "stack_out": [
        "absolute_bound#0",
        "byte_size#0",
        "candidate#0",
        "i#0",
        "threshold#0",
        "truncate_start_cached#0",
        "result#1",
        "absolute_bound#0",
        "addw_low#0"
      ]
    },
    "452": {
      "op": "intc_2 // 4294967295",
      "defined_out": [
        "4294967295",
        "absolute_bound#0",
        "addw_low#0"
      ],
      "stack_out": [
        "absolute_bound#0",
        "byte_size#0",
        "candidate#0",
        "i#0",
        "threshold#0",
        "truncate_start_cached#0",
        "result#1",
        "absolute_bound#0",
        "addw_low#0",
        "4294967295"
      ]
    },
    "453": {
      "op": "&",
      "stack_out": [
        "absolute_bound#0",
        "byte_size#0",
        "candidate#0",
        "i#0",
        "threshold#0",
        "truncate_start_cached#0",
        "result#1",
        "absolute_bound#0",
        "tmp%0#2"
      ]
    },
    "454": {
      "op": "swap",
      "stack_out": [
        "absolute_bound#0",
        "byte_size#0",
        "candidate#0",
        "i#0",
        "threshold#0",
        "truncate_start_cached#0",
        "result#1",
        "tmp%0#2",
        "absolute_bound#0"
      ]
    },
    "455": {
      "op": "%",
      "defined_out": [
        "absolute_bound#0",
        "threshold#0"
      ],
      "stack_out": [
        "absolute_bound#0",
        "byte_size#0",
        "candidate#0",
        "i#0",
        "threshold#0",
        "truncate_start_cached#0",
        "result#1",
        "threshold#0"
      ]
    },
    "456": {
      "op": "frame_bury 4",
      "defined_out": [
        "absolute_bound#0",
        "threshold#0"
      ],
      "stack_out": [
        "absolute_bound#0",
        "byte_size#0",
        "candidate#0",
        "i#0",
        "threshold#0",
        "truncate_start_cached#0",
        "result#1"
      ]
    },
    "458": {
      "op": "intc_1 // 0",
      "defined_out": [
        "absolute_bound#0",
        "i#0",
        "threshold#0"
      ],
      "stack_out": [
        "absolute_bound#0",
        "byte_size#0",
        "candidate#0",
        "i#0",
        "threshold#0",
        "truncate_start_cached#0",
        "result#1",
        "i#0"
      ]
    },
    "459": {
      "op": "frame_bury 3",
      "defined_out": [
        "absolute_bound#0",
        "i#0",
        "threshold#0"
      ],
      "stack_out": [
        "absolute_bound#0",
        "byte_size#0",
        "candidate#0",
        "i#0",
        "threshold#0",
        "truncate_start_cached#0",
        "result#1"
      ]
    },
    "461": {
      "block": "__pcg32_bounded_sequence_for_header@16",
      "stack_in": [
        "absolute_bound#0",
        "byte_size#0",
        "candidate#0",
        "i#0",
        "threshold#0",
        "truncate_start_cached#0",
        "result#1"
      ],
      "op": "frame_dig 3",
      "defined_out": [
        "i#0"
      ],
      "stack_out": [
        "absolute_bound#0",
        "byte_size#0",
        "candidate#0",
        "i#0",
        "threshold#0",
        "truncate_start_cached#0",
        "result#1",
        "i#0"
      ]
    },
    "463": {
      "op": "frame_dig -1",
      "defined_out": [
        "i#0",
        "length#0 (copy)"
      ],
      "stack_out": [
        "absolute_bound#0",
        "byte_size#0",
        "candidate#0",
        "i#0",
        "threshold#0",
        "truncate_start_cached#0",
        "result#1",
        "i#0",
        "length#0 (copy)"
      ]
    },
    "465": {
      "op": "<",
      "defined_out": [
        "continue_looping%1#0",
        "i#0"
      ],
      "stack_out": [
        "absolute_bound#0",
        "byte_size#0",
        "candidate#0",
        "i#0",
        "threshold#0",
        "truncate_start_cached#0",
        "result#1",
        "continue_looping%1#0"
      ]
    },
    "466": {
      "op": "bz __pcg32_bounded_sequence_after_if_else@25",
      "stack_out": [
        "absolute_bound#0",
        "byte_size#0",
        "candidate#0",
        "i#0",
        "threshold#0",
        "truncate_start_cached#0",
        "result#1"
      ]
    },
    "469": {
      "block": "__pcg32_bounded_sequence_while_top@18",
      "stack_in": [
        "absolute_bound#0",
        "byte_size#0",
        "candidate#0",
        "i#0",
        "threshold#0",
        "truncate_start_cached#0",
        "result#1"
      ],
      "op": "frame_dig -5",
      "defined_out": [
        "state#0 (copy)"
      ],
      "stack_out": [
        "absolute_bound#0",
        "byte_size#0",
        "candidate#0",
        "i#0",
        "threshold#0",
        "truncate_start_cached#0",
        "result#1",
        "state#0 (copy)"
      ]
    },
    "471": {
      "op": "intc 4 // 6364136223846793005",
      "defined_out": [
        "6364136223846793005",
        "state#0 (copy)"
      ],
      "stack_out": [
        "absolute_bound#0",
        "byte_size#0",
        "candidate#0",
        "i#0",
        "threshold#0",
        "truncate_start_cached#0",
        "result#1",
        "state#0 (copy)",
        "6364136223846793005"
      ]
    },
    "473": {
      "op": "mulw",
      "defined_out": [
        "_high_mul#0",
        "low_mul#0"
      ],
      "stack_out": [
        "absolute_bound#0",
        "byte_size#0",
        "candidate#0",
        "i#0",
        "threshold#0",
        "truncate_start_cached#0",
        "result#1",
        "_high_mul#0",
        "low_mul#0"
      ]
    },
    "474": {
      "op": "bury 1",
      "stack_out": [
        "absolute_bound#0",
        "byte_size#0",
        "candidate#0",
        "i#0",
        "threshold#0",
        "truncate_start_cached#0",
        "result#1",
        "low_mul#0"
      ]
    },
    "476": {
      "op": "intc 5 // 1442695040888963407",
      "defined_out": [
        "1442695040888963407",
        "low_mul#0"
      ],
      "stack_out": [
        "absolute_bound#0",
        "byte_size#0",
        "candidate#0",
        "i#0",
        "threshold#0",
        "truncate_start_cached#0",
        "result#1",
        "low_mul#0",
        "1442695040888963407"
      ]
    },
    "478": {
      "op": "addw",
      "defined_out": [
        "_high_add#0",
        "low_add#0"
      ],
      "stack_out": [
        "absolute_bound#0",
        "byte_size#0",
        "candidate#0",
        "i#0",
        "threshold#0",
        "truncate_start_cached#0",
        "result#1",
        "_high_add#0",
        "low_add#0"
      ]
    },
    "479": {
      "op": "bury 1",
      "defined_out": [
        "low_add#0"
      ],
      "stack_out": [
        "absolute_bound#0",
        "byte_size#0",
        "candidate#0",
        "i#0",
        "threshold#0",
        "truncate_start_cached#0",
        "result#1",
        "low_add#0"
      ]
    },
    "481": {
      "op": "frame_dig -5",
      "stack_out": [
        "absolute_bound#0",
        "byte_size#0",
        "candidate#0",
        "i#0",
        "threshold#0",
        "truncate_start_cached#0",
        "result#1",
        "low_add#0",
        "state#0 (copy)"
      ]
    },
    "483": {
      "op": "pushint 18 // 18",
      "defined_out": [
        "18",
        "low_add#0",
        "state#0 (copy)"
      ],
      "stack_out": [
        "absolute_bound#0",
        "byte_size#0",
        "candidate#0",
        "i#0",
        "threshold#0",
        "truncate_start_cached#0",
        "result#1",
        "low_add#0",
        "state#0 (copy)",
        "18"
      ]
    },
    "485": {
      "op": "shr",
      "defined_out": [
        "low_add#0",
        "tmp%0#2"
      ],
      "stack_out": [
        "absolute_bound#0",
        "byte_size#0",
        "candidate#0",
        "i#0",
        "threshold#0",
        "truncate_start_cached#0",
        "result#1",
        "low_add#0",
        "tmp%0#2"
      ]
    },
    "486": {
      "op": "frame_dig -5",
      "stack_out": [
        "absolute_bound#0",
        "byte_size#0",
        "candidate#0",
        "i#0",
        "threshold#0",
        "truncate_start_cached#0",
        "result#1",
        "low_add#0",
        "tmp%0#2",
        "state#0 (copy)"
      ]
    },
    "488": {
      "op": "^",
      "defined_out": [
        "low_add#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "absolute_bound#0",
        "byte_size#0",
        "candidate#0",
        "i#0",
        "threshold#0",
        "truncate_start_cached#0",
        "result#1",
        "low_add#0",
        "tmp%1#0"
      ]
    },
    "489": {
      "op": "pushint 27 // 27",
      "defined_out": [
        "27",
        "low_add#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "absolute_bound#0",
        "byte_size#0",
        "candidate#0",
        "i#0",
        "threshold#0",
        "truncate_start_cached#0",
        "result#1",
        "low_add#0",
        "tmp%1#0",
        "27"
      ]
    },
    "491": {
      "op": "shr",
      "defined_out": [
        "low_add#0",
        "value#0"
      ],
      "stack_out": [
        "absolute_bound#0",
        "byte_size#0",
        "candidate#0",
        "i#0",
        "threshold#0",
        "truncate_start_cached#0",
        "result#1",
        "low_add#0",
        "value#0"
      ]
    },
    "492": {
      "op": "intc_2 // 4294967295",
      "defined_out": [
        "4294967295",
        "low_add#0",
        "value#0"
      ],
      "stack_out": [
        "absolute_bound#0",
        "byte_size#0",
        "candidate#0",
        "i#0",
        "threshold#0",
        "truncate_start_cached#0",
        "result#1",
        "low_add#0",
        "value#0",
        "4294967295"
      ]
    },
    "493": {
      "op": "&",
      "stack_out": [
        "absolute_bound#0",
        "byte_size#0",
        "candidate#0",
        "i#0",
        "threshold#0",
        "truncate_start_cached#0",
        "result#1",
        "low_add#0",
        "value#0"
      ]
    },
    "494": {
      "op": "frame_dig -5",
      "stack_out": [
        "absolute_bound#0",
        "byte_size#0",
        "candidate#0",
        "i#0",
        "threshold#0",
        "truncate_start_cached#0",
        "result#1",
        "low_add#0",
        "value#0",
        "state#0 (copy)"
      ]
    },
    "496": {
      "op": "pushint 59 // 59",
      "defined_out": [
        "59",
        "low_add#0",
        "state#0 (copy)",
        "value#0"
      ],
      "stack_out": [
        "absolute_bound#0",
        "byte_size#0",
        "candidate#0",
        "i#0",
        "threshold#0",
        "truncate_start_cached#0",
        "result#1",
        "low_add#0",
        "value#0",
        "state#0 (copy)",
        "59"
      ]
    },
    "498": {
      "op": "shr",
      "defined_out": [
        "low_add#0",
        "rot#0",
        "value#0"
      ],
      "stack_out": [
        "absolute_bound#0",
        "byte_size#0",
        "candidate#0",
        "i#0",
        "threshold#0",
        "truncate_start_cached#0",
        "result#1",
        "low_add#0",
        "value#0",
        "rot#0"
      ]
    },
    "499": {
      "op": "dup2",
      "defined_out": [
        "low_add#0",
        "rot#0",
        "rot#0 (copy)",
        "value#0",
        "value#0 (copy)"
      ],
      "stack_out": [
        "absolute_bound#0",
        "byte_size#0",
        "candidate#0",
        "i#0",
        "threshold#0",
        "truncate_start_cached#0",
        "result#1",
        "low_add#0",
        "value#0",
        "rot#0",
        "value#0 (copy)",
        "rot#0 (copy)"
      ]
    },
    "500": {
      "op": "shr",
      "stack_out": [
        "absolute_bound#0",
        "byte_size#0",
        "candidate#0",
        "i#0",
        "threshold#0",
        "truncate_start_cached#0",
        "result#1",
        "low_add#0",
        "value#0",
        "rot#0",
        "tmp%0#2"
      ]
    },
    "501": {
      "op": "swap",
      "stack_out": [
        "absolute_bound#0",
        "byte_size#0",
        "candidate#0",
        "i#0",
        "threshold#0",
        "truncate_start_cached#0",
        "result#1",
        "low_add#0",
        "value#0",
        "tmp%0#2",
        "rot#0"
      ]
    },
    "502": {
      "op": "~",
      "defined_out": [
        "low_add#0",
        "tmp%0#10",
        "tmp%0#2",
        "value#0"
      ],
      "stack_out": [
        "absolute_bound#0",
        "byte_size#0",
        "candidate#0",
        "i#0",
        "threshold#0",
        "truncate_start_cached#0",
        "result#1",
        "low_add#0",
        "value#0",
        "tmp%0#2",
        "tmp%0#10"
      ]
    },
    "503": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "low_add#0",
        "tmp%0#10",
        "tmp%0#2",
        "value#0"
      ],
      "stack_out": [
        "absolute_bound#0",
        "byte_size#0",
        "candidate#0",
        "i#0",
        "threshold#0",
        "truncate_start_cached#0",
        "result#1",
        "low_add#0",
        "value#0",
        "tmp%0#2",
        "tmp%0#10",
        "1"
      ]
    },
    "504": {
      "op": "addw",
      "defined_out": [
        "_addw_high#0",
        "addw_low#0",
        "low_add#0",
        "tmp%0#2",
        "value#0"
      ],
      "stack_out": [
        "absolute_bound#0",
        "byte_size#0",
        "candidate#0",
        "i#0",
        "threshold#0",
        "truncate_start_cached#0",
        "result#1",
        "low_add#0",
        "value#0",
        "tmp%0#2",
        "_addw_high#0",
        "addw_low#0"
      ]
    },
    "505": {
      "op": "bury 1",
      "stack_out": [
        "absolute_bound#0",
        "byte_size#0",
        "candidate#0",
        "i#0",
        "threshold#0",
        "truncate_start_cached#0",
        "result#1",
        "low_add#0",
        "value#0",
        "tmp%0#2",
        "addw_low#0"
      ]
    },
    "507": {
      "op": "pushint 31 // 31",
      "defined_out": [
        "31",
        "addw_low#0",
        "low_add#0",
        "tmp%0#2",
        "value#0"
      ],
      "stack_out": [
        "absolute_bound#0",
        "byte_size#0",
        "candidate#0",
        "i#0",
        "threshold#0",
        "truncate_start_cached#0",
        "result#1",
        "low_add#0",
        "value#0",
        "tmp%0#2",
        "addw_low#0",
        "31"
      ]
    },
    "509": {
      "op": "&",
      "defined_out": [
        "low_add#0",
        "tmp%0#2",
        "tmp%2#2",
        "value#0"
      ],
      "stack_out": [
        "absolute_bound#0",
        "byte_size#0",
        "candidate#0",
        "i#0",
        "threshold#0",
        "truncate_start_cached#0",
        "result#1",
        "low_add#0",
        "value#0",
        "tmp%0#2",
        "tmp%2#2"
      ]
    },
    "510": {
      "op": "uncover 2",
      "stack_out": [
        "absolute_bound#0",
        "byte_size#0",
        "candidate#0",
        "i#0",
        "threshold#0",
        "truncate_start_cached#0",
        "result#1",
        "low_add#0",
        "tmp%0#2",
        "tmp%2#2",
        "value#0"
      ]
    },
    "512": {
      "op": "swap",
      "stack_out": [
        "absolute_bound#0",
        "byte_size#0",
        "candidate#0",
        "i#0",
        "threshold#0",
        "truncate_start_cached#0",
        "result#1",
        "low_add#0",
        "tmp%0#2",
        "value#0",
        "tmp%2#2"
      ]
    },
    "513": {
      "op": "shl",
      "stack_out": [
        "absolute_bound#0",
        "byte_size#0",
        "candidate#0",
        "i#0",
        "threshold#0",
        "truncate_start_cached#0",
        "result#1",
        "low_add#0",
        "tmp%0#2",
        "value#0"
      ]
    },
    "514": {
      "op": "intc_2 // 4294967295",
      "stack_out": [
        "absolute_bound#0",
        "byte_size#0",
        "candidate#0",
        "i#0",
        "threshold#0",
        "truncate_start_cached#0",
        "result#1",
        "low_add#0",
        "tmp%0#2",
        "value#0",
        "4294967295"
      ]
    },
    "515": {
      "op": "&",
      "stack_out": [
        "absolute_bound#0",
        "byte_size#0",
        "candidate#0",
        "i#0",
        "threshold#0",
        "truncate_start_cached#0",
        "result#1",
        "low_add#0",
        "tmp%0#2",
        "tmp%0#10"
      ]
    },
    "516": {
      "op": "|",
      "defined_out": [
        "candidate#0",
        "low_add#0"
      ],
      "stack_out": [
        "absolute_bound#0",
        "byte_size#0",
        "candidate#0",
        "i#0",
        "threshold#0",
        "truncate_start_cached#0",
        "result#1",
        "low_add#0",
        "candidate#0"
      ]
    },
    "517": {
      "op": "dup",
      "stack_out": [
        "absolute_bound#0",
        "byte_size#0",
        "candidate#0",
        "i#0",
        "threshold#0",
        "truncate_start_cached#0",
        "result#1",
        "low_add#0",
        "candidate#0",
        "candidate#0"
      ]
    },
    "518": {
      "op": "frame_bury 2",
      "defined_out": [
        "candidate#0",
        "low_add#0"
      ],
      "stack_out": [
        "absolute_bound#0",
        "byte_size#0",
        "candidate#0",
        "i#0",
        "threshold#0",
        "truncate_start_cached#0",
        "result#1",
        "low_add#0",
        "candidate#0"
      ]
    },
    "520": {
      "op": "frame_dig 4",
      "defined_out": [
        "candidate#0",
        "low_add#0",
        "threshold#0"
      ],
      "stack_out": [
        "absolute_bound#0",
        "byte_size#0",
        "candidate#0",
        "i#0",
        "threshold#0",
        "truncate_start_cached#0",
        "result#1",
        "low_add#0",
        "candidate#0",
        "threshold#0"
      ]
    },
    "522": {
      "op": ">=",
      "defined_out": [
        "candidate#0",
        "low_add#0",
        "threshold#0",
        "tmp%21#0"
      ],
      "stack_out": [
        "absolute_bound#0",
        "byte_size#0",
        "candidate#0",
        "i#0",
        "threshold#0",
        "truncate_start_cached#0",
        "result#1",
        "low_add#0",
        "tmp%21#0"
      ]
    },
    "523": {
      "op": "bz __pcg32_bounded_sequence_after_if_else@21",
      "stack_out": [
        "absolute_bound#0",
        "byte_size#0",
        "candidate#0",
        "i#0",
        "threshold#0",
        "truncate_start_cached#0",
        "result#1",
        "low_add#0"
      ]
    },
    "526": {
      "op": "frame_dig 2"
    },
    "528": {
      "op": "frame_dig 0"
    },
    "530": {
      "op": "%"
    },
    "531": {
      "op": "frame_dig -3"
    },
    "533": {
      "op": "+"
    },
    "534": {
      "op": "itob"
    },
    "535": {
      "op": "frame_dig 5"
    },
    "537": {
      "op": "frame_dig 1"
    },
    "539": {
      "op": "extract3"
    },
    "540": {
      "op": "frame_dig 6"
    },
    "542": {
      "op": "swap"
    },
    "543": {
      "op": "concat"
    },
    "544": {
      "op": "frame_bury 6"
    },
    "546": {
      "op": "frame_dig 3"
    },
    "548": {
      "op": "intc_0 // 1"
    },
    "549": {
      "op": "+"
    },
    "550": {
      "op": "frame_bury 3"
    },
    "552": {
      "op": "frame_bury -5"
    },
    "554": {
      "op": "b __pcg32_bounded_sequence_for_header@16"
    },
    "557": {
      "block": "__pcg32_bounded_sequence_after_if_else@21",
      "stack_in": [
        "absolute_bound#0",
        "byte_size#0",
        "candidate#0",
        "i#0",
        "threshold#0",
        "truncate_start_cached#0",
        "result#1",
        "low_add#0"
      ],
      "op": "frame_bury -5",
      "defined_out": [],
      "stack_out": [
        "absolute_bound#0",
        "byte_size#0",
        "candidate#0",
        "i#0",
        "threshold#0",
        "truncate_start_cached#0",
        "result#1"
      ]
    },
    "559": {
      "op": "b __pcg32_bounded_sequence_while_top@18"
    },
    "562": {
      "block": "__pcg32_bounded_sequence_else_body@14",
      "stack_in": [
        "absolute_bound#0",
        "byte_size#0",
        "candidate#0",
        "i#0",
        "threshold#0",
        "truncate_start_cached#0",
        "result#1"
      ],
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "absolute_bound#0",
        "byte_size#0",
        "candidate#0",
        "i#0",
        "threshold#0",
        "truncate_start_cached#0",
        "result#1",
        "1"
      ]
    },
    "563": {
      "op": "frame_dig -4",
      "defined_out": [
        "1",
        "bit_size#0 (copy)"
      ],
      "stack_out": [
        "absolute_bound#0",
        "byte_size#0",
        "candidate#0",
        "i#0",
        "threshold#0",
        "truncate_start_cached#0",
        "result#1",
        "1",
        "bit_size#0 (copy)"
      ]
    },
    "565": {
      "op": "shl",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "absolute_bound#0",
        "byte_size#0",
        "candidate#0",
        "i#0",
        "threshold#0",
        "truncate_start_cached#0",
        "result#1",
        "tmp%15#0"
      ]
    },
    "566": {
      "op": "dup",
      "defined_out": [
        "tmp%15#0",
        "tmp%15#0 (copy)"
      ],
      "stack_out": [
        "absolute_bound#0",
        "byte_size#0",
        "candidate#0",
        "i#0",
        "threshold#0",
        "truncate_start_cached#0",
        "result#1",
        "tmp%15#0",
        "tmp%15#0 (copy)"
      ]
    },
    "567": {
      "op": "intc_0 // 1",
      "stack_out": [
        "absolute_bound#0",
        "byte_size#0",
        "candidate#0",
        "i#0",
        "threshold#0",
        "truncate_start_cached#0",
        "result#1",
        "tmp%15#0",
        "tmp%15#0 (copy)",
        "1"
      ]
    },
    "568": {
      "op": "-",
      "defined_out": [
        "tmp%15#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "absolute_bound#0",
        "byte_size#0",
        "candidate#0",
        "i#0",
        "threshold#0",
        "truncate_start_cached#0",
        "result#1",
        "tmp%15#0",
        "tmp%16#0"
      ]
    },
    "569": {
      "op": "frame_dig -3",
      "defined_out": [
        "lower_bound#0 (copy)",
        "tmp%15#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "absolute_bound#0",
        "byte_size#0",
        "candidate#0",
        "i#0",
        "threshold#0",
        "truncate_start_cached#0",
        "result#1",
        "tmp%15#0",
        "tmp%16#0",
        "lower_bound#0 (copy)"
      ]
    },
    "571": {
      "op": ">",
      "defined_out": [
        "tmp%15#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "absolute_bound#0",
        "byte_size#0",
        "candidate#0",
        "i#0",
        "threshold#0",
        "truncate_start_cached#0",
        "result#1",
        "tmp%15#0",
        "tmp%17#0"
      ]
    },
    "572": {
      "op": "assert",
      "stack_out": [
        "absolute_bound#0",
        "byte_size#0",
        "candidate#0",
        "i#0",
        "threshold#0",
        "truncate_start_cached#0",
        "result#1",
        "tmp%15#0"
      ]
    },
    "573": {
      "op": "frame_dig -3",
      "stack_out": [
        "absolute_bound#0",
        "byte_size#0",
        "candidate#0",
        "i#0",
        "threshold#0",
        "truncate_start_cached#0",
        "result#1",
        "tmp%15#0",
        "lower_bound#0 (copy)"
      ]
    },
    "575": {
      "op": "-",
      "defined_out": [
        "absolute_bound#0"
      ],
      "stack_out": [
        "absolute_bound#0",
        "byte_size#0",
        "candidate#0",
        "i#0",
        "threshold#0",
        "truncate_start_cached#0",
        "result#1",
        "absolute_bound#0"
      ]
    },
    "576": {
      "op": "frame_bury 0",
      "defined_out": [
        "absolute_bound#0"
      ],
      "stack_out": [
        "absolute_bound#0",
        "byte_size#0",
        "candidate#0",
        "i#0",
        "threshold#0",
        "truncate_start_cached#0",
        "result#1"
      ]
    },
    "578": {
      "op": "b __pcg32_bounded_sequence_after_if_else@15"
    },
    "581": {
      "block": "__pcg32_bounded_sequence_bool_false@4",
      "stack_in": [
        "absolute_bound#0",
        "byte_size#0",
        "candidate#0",
        "i#0",
        "threshold#0",
        "truncate_start_cached#0",
        "result#1"
      ],
      "op": "intc_1 // 0",
      "defined_out": [
        "or_result%0#0"
      ],
      "stack_out": [
        "absolute_bound#0",
        "byte_size#0",
        "candidate#0",
        "i#0",
        "threshold#0",
        "truncate_start_cached#0",
        "result#1",
        "or_result%0#0"
      ]
    },
    "582": {
      "op": "b __pcg32_bounded_sequence_bool_merge@5"
    },
    "585": {
      "subroutine": "smart_contracts.lib_pcg32_exposer.contract.LibPcg32ExposerAlgopy.bounded_rand_uint16",
      "params": {
        "seed#0": "bytes",
        "lower_bound#0": "bytes",
        "upper_bound#0": "bytes",
        "length#0": "bytes"
      },
      "block": "bounded_rand_uint16",
      "stack_in": [],
      "op": "proto 4 1"
    },
    "588": {
      "op": "frame_dig -4",
      "defined_out": [
        "seed#0 (copy)"
      ],
      "stack_out": [
        "seed#0 (copy)"
      ]
    },
    "590": {
      "callsub": "lib_pcg.pcg32.pcg32_init",
      "op": "callsub pcg32_init",
      "defined_out": [
        "state#0"
      ],
      "stack_out": [
        "state#0"
      ]
    },
    "593": {
      "op": "frame_dig -3",
      "defined_out": [
        "lower_bound#0 (copy)",
        "state#0"
      ],
      "stack_out": [
        "state#0",
        "lower_bound#0 (copy)"
      ]
    },
    "595": {
      "op": "btoi",
      "defined_out": [
        "lower_bound#1",
        "state#0"
      ],
      "stack_out": [
        "state#0",
        "lower_bound#1"
      ]
    },
    "596": {
      "op": "frame_dig -2",
      "defined_out": [
        "lower_bound#1",
        "state#0",
        "upper_bound#0 (copy)"
      ],
      "stack_out": [
        "state#0",
        "lower_bound#1",
        "upper_bound#0 (copy)"
      ]
    },
    "598": {
      "op": "btoi",
      "defined_out": [
        "lower_bound#1",
        "state#0",
        "upper_bound#1"
      ],
      "stack_out": [
        "state#0",
        "lower_bound#1",
        "upper_bound#1"
      ]
    },
    "599": {
      "op": "frame_dig -1",
      "defined_out": [
        "length#0 (copy)",
        "lower_bound#1",
        "state#0",
        "upper_bound#1"
      ],
      "stack_out": [
        "state#0",
        "lower_bound#1",
        "upper_bound#1",
        "length#0 (copy)"
      ]
    },
    "601": {
      "op": "btoi",
      "defined_out": [
        "length#1",
        "lower_bound#1",
        "state#0",
        "upper_bound#1"
      ],
      "stack_out": [
        "state#0",
        "lower_bound#1",
        "upper_bound#1",
        "length#1"
      ]
    },
    "602": {
      "op": "uncover 3",
      "stack_out": [
        "lower_bound#1",
        "upper_bound#1",
        "length#1",
        "state#0"
      ]
    },
    "604": {
      "op": "pushint 16 // 16",
      "defined_out": [
        "16",
        "length#1",
        "lower_bound#1",
        "state#0",
        "upper_bound#1"
      ],
      "stack_out": [
        "lower_bound#1",
        "upper_bound#1",
        "length#1",
        "state#0",
        "16"
      ]
    },
    "606": {
      "op": "cover 4"
    },
    "608": {
      "op": "cover 4",
      "stack_out": [
        "state#0",
        "16",
        "lower_bound#1",
        "upper_bound#1",
        "length#1"
      ]
    },
    "610": {
      "callsub": "lib_pcg.pcg32.__pcg32_bounded_sequence",
      "op": "callsub __pcg32_bounded_sequence",
      "defined_out": [
        "sequence#1",
        "state#0"
      ],
      "stack_out": [
        "state#0",
        "sequence#1"
      ]
    },
    "613": {
      "op": "bury 1",
      "stack_out": [
        "sequence#1"
      ]
    },
    "615": {
      "retsub": true,
      "op": "retsub"
    },
    "616": {
      "subroutine": "smart_contracts.lib_pcg32_exposer.contract.LibPcg32ExposerAlgopy.bounded_rand_uint8",
      "params": {
        "seed#0": "bytes",
        "lower_bound#0": "bytes",
        "upper_bound#0": "bytes",
        "length#0": "bytes"
      },
      "block": "bounded_rand_uint8",
      "stack_in": [],
      "op": "proto 4 1"
    },
    "619": {
      "op": "frame_dig -4",
      "defined_out": [
        "seed#0 (copy)"
      ],
      "stack_out": [
        "seed#0 (copy)"
      ]
    },
    "621": {
      "callsub": "lib_pcg.pcg32.pcg32_init",
      "op": "callsub pcg32_init",
      "defined_out": [
        "state#0"
      ],
      "stack_out": [
        "state#0"
      ]
    },
    "624": {
      "op": "frame_dig -3",
      "defined_out": [
        "lower_bound#0 (copy)",
        "state#0"
      ],
      "stack_out": [
        "state#0",
        "lower_bound#0 (copy)"
      ]
    },
    "626": {
      "op": "btoi",
      "defined_out": [
        "lower_bound#1",
        "state#0"
      ],
      "stack_out": [
        "state#0",
        "lower_bound#1"
      ]
    },
    "627": {
      "op": "frame_dig -2",
      "defined_out": [
        "lower_bound#1",
        "state#0",
        "upper_bound#0 (copy)"
      ],
      "stack_out": [
        "state#0",
        "lower_bound#1",
        "upper_bound#0 (copy)"
      ]
    },
    "629": {
      "op": "btoi",
      "defined_out": [
        "lower_bound#1",
        "state#0",
        "upper_bound#1"
      ],
      "stack_out": [
        "state#0",
        "lower_bound#1",
        "upper_bound#1"
      ]
    },
    "630": {
      "op": "frame_dig -1",
      "defined_out": [
        "length#0 (copy)",
        "lower_bound#1",
        "state#0",
        "upper_bound#1"
      ],
      "stack_out": [
        "state#0",
        "lower_bound#1",
        "upper_bound#1",
        "length#0 (copy)"
      ]
    },
    "632": {
      "op": "btoi",
      "defined_out": [
        "length#1",
        "lower_bound#1",
        "state#0",
        "upper_bound#1"
      ],
      "stack_out": [
        "state#0",
        "lower_bound#1",
        "upper_bound#1",
        "length#1"
      ]
    },
    "633": {
      "op": "uncover 3",
      "stack_out": [
        "lower_bound#1",
        "upper_bound#1",
        "length#1",
        "state#0"
      ]
    },
    "635": {
      "op": "intc_3 // 8",
      "defined_out": [
        "8",
        "length#1",
        "lower_bound#1",
        "state#0",
        "upper_bound#1"
      ],
      "stack_out": [
        "lower_bound#1",
        "upper_bound#1",
        "length#1",
        "state#0",
        "8"
      ]
    },
    "636": {
      "op": "cover 4"
    },
    "638": {
      "op": "cover 4",
      "stack_out": [
        "state#0",
        "8",
        "lower_bound#1",
        "upper_bound#1",
        "length#1"
      ]
    },
    "640": {
      "callsub": "lib_pcg.pcg32.__pcg32_bounded_sequence",
      "op": "callsub __pcg32_bounded_sequence",
      "defined_out": [
        "sequence#1",
        "state#0"
      ],
      "stack_out": [
        "state#0",
        "sequence#1"
      ]
    },
    "643": {
      "op": "bury 1",
      "stack_out": [
        "sequence#1"
      ]
    },
    "645": {
      "retsub": true,
      "op": "retsub"
    },
    "646": {
      "subroutine": "smart_contracts.lib_pcg32_exposer.contract.LibPcg32ExposerAlgopy.update",
      "params": {},
      "block": "update",
      "stack_in": [],
      "op": "proto 0 0"
    },
    "649": {
      "op": "txn Sender"
    },
    "651": {
      "op": "global CreatorAddress",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "653": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "654": {
      "op": "assert",
      "stack_out": []
    },
    "655": {
      "retsub": true,
      "op": "retsub"
    }
  }
}