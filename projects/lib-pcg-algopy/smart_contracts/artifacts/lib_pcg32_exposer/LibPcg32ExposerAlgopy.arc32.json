{
    "hints": {
        "bounded_rand_uint32(byte[8],uint32,uint32,uint16)uint32[]": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "bounded_rand_uint16(byte[8],uint16,uint16,uint16)uint16[]": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "bounded_rand_uint8(byte[8],uint8,uint8,uint16)uint8[]": {
            "call_config": {
                "no_op": "CALL"
            }
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCgpzbWFydF9jb250cmFjdHMubGliX3BjZzMyX2V4cG9zZXIuY29udHJhY3QuTGliUGNnMzJFeHBvc2VyQWxnb3B5LmNsZWFyX3N0YXRlX3Byb2dyYW06CiAgICBpbnQgMQogICAgcmV0dXJuCg=="
    },
    "state": {
        "global": {
            "num_byte_slices": 0,
            "num_uints": 0
        },
        "local": {
            "num_byte_slices": 0,
            "num_uints": 0
        }
    },
    "schema": {
        "global": {
            "declared": {},
            "reserved": {}
        },
        "local": {
            "declared": {},
            "reserved": {}
        }
    },
    "contract": {
        "name": "LibPcg32ExposerAlgopy",
        "methods": [
            {
                "name": "bounded_rand_uint32",
                "args": [
                    {
                        "type": "byte[8]",
                        "name": "seed"
                    },
                    {
                        "type": "uint32",
                        "name": "lower_bound"
                    },
                    {
                        "type": "uint32",
                        "name": "upper_bound"
                    },
                    {
                        "type": "uint16",
                        "name": "length"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "uint32[]"
                }
            },
            {
                "name": "bounded_rand_uint16",
                "args": [
                    {
                        "type": "byte[8]",
                        "name": "seed"
                    },
                    {
                        "type": "uint16",
                        "name": "lower_bound"
                    },
                    {
                        "type": "uint16",
                        "name": "upper_bound"
                    },
                    {
                        "type": "uint16",
                        "name": "length"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "uint16[]"
                }
            },
            {
                "name": "bounded_rand_uint8",
                "args": [
                    {
                        "type": "byte[8]",
                        "name": "seed"
                    },
                    {
                        "type": "uint8",
                        "name": "lower_bound"
                    },
                    {
                        "type": "uint8",
                        "name": "upper_bound"
                    },
                    {
                        "type": "uint16",
                        "name": "length"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "uint8[]"
                }
            }
        ],
        "networks": {}
    },
    "bare_call_config": {
        "update_application": "CALL",
        "no_op": "CREATE"
    }
}