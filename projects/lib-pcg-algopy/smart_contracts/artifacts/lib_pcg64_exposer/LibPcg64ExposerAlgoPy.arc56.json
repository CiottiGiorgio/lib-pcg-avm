{
    "name": "LibPcg64ExposerAlgoPy",
    "structs": {},
    "methods": [
        {
            "name": "bounded_rand_uint64",
            "args": [
                {
                    "type": "byte[16]",
                    "name": "seed"
                },
                {
                    "type": "uint64",
                    "name": "lower_bound"
                },
                {
                    "type": "uint64",
                    "name": "upper_bound"
                },
                {
                    "type": "uint16",
                    "name": "length"
                }
            ],
            "returns": {
                "type": "uint64[]"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 0
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {},
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": [
            "UpdateApplication"
        ]
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        62
                    ],
                    "errorMessage": "OnCompletion must be NoOp && can only call when not creating"
                },
                {
                    "pc": [
                        90
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        80
                    ],
                    "errorMessage": "can only call when not creating"
                },
                {
                    "pc": [
                        211
                    ],
                    "errorMessage": "invalid number of bytes for arc4.static_array<arc4.uint8, 16>"
                },
                {
                    "pc": [
                        238
                    ],
                    "errorMessage": "invalid number of bytes for arc4.uint16"
                },
                {
                    "pc": [
                        220,
                        229
                    ],
                    "errorMessage": "invalid number of bytes for arc4.uint64"
                },
                {
                    "pc": [
                        358,
                        484
                    ],
                    "errorMessage": "max array length exceeded"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "I3ByYWdtYSB2ZXJzaW9uIDExCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuYXBwcm92YWxfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIGludGNibG9jayAxIDAgNjM2NDEzNjIyMzg0Njc5MzAwNSA0Mjk0OTY3Mjk1IDE0NDI2OTUwNDA4ODg5NjM0MDcgMTQ0MjY5NTA0MDg4ODk2MzQwOQogICAgdHhuIE51bUFwcEFyZ3MKICAgIGJ6IG1haW5fYmFyZV9yb3V0aW5nQDUKICAgIHB1c2hieXRlcyAweGJhNTY4MmNlIC8vIG1ldGhvZCAiYm91bmRlZF9yYW5kX3VpbnQ2NChieXRlWzE2XSx1aW50NjQsdWludDY0LHVpbnQxNil1aW50NjRbXSIKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDAKICAgIG1hdGNoIG1haW5fYm91bmRlZF9yYW5kX3VpbnQ2NF9yb3V0ZUAzCiAgICBlcnIKCm1haW5fYm91bmRlZF9yYW5kX3VpbnQ2NF9yb3V0ZUAzOgogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgICYmCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIG11c3QgYmUgTm9PcCAmJiBjYW4gb25seSBjYWxsIHdoZW4gbm90IGNyZWF0aW5nCiAgICBiIGJvdW5kZWRfcmFuZF91aW50NjQKCm1haW5fYmFyZV9yb3V0aW5nQDU6CiAgICBpbnRjXzEgLy8gTm9PcAogICAgcHVzaGludCA0IC8vIFVwZGF0ZUFwcGxpY2F0aW9uCiAgICB0eG4gT25Db21wbGV0aW9uCiAgICBtYXRjaCBtYWluX19fYWxnb3B5X2RlZmF1bHRfY3JlYXRlQDYgbWFpbl91cGRhdGVANwogICAgZXJyCgptYWluX3VwZGF0ZUA3OgogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gbm90IGNyZWF0aW5nCiAgICB0eG4gU2VuZGVyCiAgICBnbG9iYWwgQ3JlYXRvckFkZHJlc3MKICAgID09CiAgICByZXR1cm4KCm1haW5fX19hbGdvcHlfZGVmYXVsdF9jcmVhdGVANjoKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICAhCiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIGNyZWF0aW5nCiAgICBpbnRjXzAgLy8gMQogICAgcmV0dXJuCgoKLy8gbGliX3BjZy5wY2c2NC5fX3BjZzY0X3VuYm91bmRlZF9yYW5kb20oc3RhdGUuMDogdWludDY0LCBzdGF0ZS4xOiB1aW50NjQpIC0+IHVpbnQ2NCwgdWludDY0LCB1aW50NjQ6Cl9fcGNnNjRfdW5ib3VuZGVkX3JhbmRvbToKICAgIHByb3RvIDIgMwogICAgZnJhbWVfZGlnIC0yCiAgICBpbnRjXzIgLy8gNjM2NDEzNjIyMzg0Njc5MzAwNQogICAgbXVsdwogICAgYnVyeSAxCiAgICBpbnRjIDQgLy8gMTQ0MjY5NTA0MDg4ODk2MzQwNwogICAgYWRkdwogICAgYnVyeSAxCiAgICBkdXAKICAgICEKICAgIGludGMgNSAvLyAxNDQyNjk1MDQwODg4OTYzNDA5CiAgICBzd2FwCiAgICBzaGwKICAgIGZyYW1lX2RpZyAtMQogICAgaW50Y18yIC8vIDYzNjQxMzYyMjM4NDY3OTMwMDUKICAgIG11bHcKICAgIGJ1cnkgMQogICAgYWRkdwogICAgYnVyeSAxCiAgICBmcmFtZV9kaWcgLTIKICAgIHB1c2hpbnQgMTggLy8gMTgKICAgIHNocgogICAgZnJhbWVfZGlnIC0yCiAgICBeCiAgICBwdXNoaW50IDI3IC8vIDI3CiAgICBzaHIKICAgIGludGNfMyAvLyA0Mjk0OTY3Mjk1CiAgICAmCiAgICBmcmFtZV9kaWcgLTIKICAgIHB1c2hpbnQgNTkgLy8gNTkKICAgIHNocgogICAgZHVwMgogICAgc2hyCiAgICBzd2FwCiAgICB+CiAgICBpbnRjXzAgLy8gMQogICAgYWRkdwogICAgYnVyeSAxCiAgICBwdXNoaW50IDMxIC8vIDMxCiAgICAmCiAgICB1bmNvdmVyIDIKICAgIHN3YXAKICAgIHNobAogICAgaW50Y18zIC8vIDQyOTQ5NjcyOTUKICAgICYKICAgIHwKICAgIHB1c2hpbnQgMzIgLy8gMzIKICAgIHNobAogICAgZnJhbWVfZGlnIC0xCiAgICBwdXNoaW50IDE4IC8vIDE4CiAgICBzaHIKICAgIGZyYW1lX2RpZyAtMQogICAgXgogICAgcHVzaGludCAyNyAvLyAyNwogICAgc2hyCiAgICBpbnRjXzMgLy8gNDI5NDk2NzI5NQogICAgJgogICAgZnJhbWVfZGlnIC0xCiAgICBwdXNoaW50IDU5IC8vIDU5CiAgICBzaHIKICAgIGR1cDIKICAgIHNocgogICAgc3dhcAogICAgfgogICAgaW50Y18wIC8vIDEKICAgIGFkZHcKICAgIGJ1cnkgMQogICAgcHVzaGludCAzMSAvLyAzMQogICAgJgogICAgdW5jb3ZlciAyCiAgICBzd2FwCiAgICBzaGwKICAgIGludGNfMyAvLyA0Mjk0OTY3Mjk1CiAgICAmCiAgICB8CiAgICB8CiAgICByZXRzdWIKCgovLyBzbWFydF9jb250cmFjdHMubGliX3BjZzY0X2V4cG9zZXIuY29udHJhY3QuTGliUGNnNjRFeHBvc2VyQWxnb1B5LmJvdW5kZWRfcmFuZF91aW50NjRbcm91dGluZ10oKSAtPiB2b2lkOgpib3VuZGVkX3JhbmRfdWludDY0OgogICAgcHVzaGJ5dGVzICIiCiAgICBkdXBuIDUKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDEKICAgIGR1cAogICAgbGVuCiAgICBwdXNoaW50IDE2IC8vIDE2CiAgICA9PQogICAgYXNzZXJ0IC8vIGludmFsaWQgbnVtYmVyIG9mIGJ5dGVzIGZvciBhcmM0LnN0YXRpY19hcnJheTxhcmM0LnVpbnQ4LCAxNj4KICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDIKICAgIGR1cAogICAgbGVuCiAgICBwdXNoaW50IDggLy8gOAogICAgPT0KICAgIGFzc2VydCAvLyBpbnZhbGlkIG51bWJlciBvZiBieXRlcyBmb3IgYXJjNC51aW50NjQKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDMKICAgIGR1cAogICAgbGVuCiAgICBwdXNoaW50IDggLy8gOAogICAgPT0KICAgIGFzc2VydCAvLyBpbnZhbGlkIG51bWJlciBvZiBieXRlcyBmb3IgYXJjNC51aW50NjQKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDQKICAgIGR1cAogICAgbGVuCiAgICBwdXNoaW50IDIgLy8gMgogICAgPT0KICAgIGFzc2VydCAvLyBpbnZhbGlkIG51bWJlciBvZiBieXRlcyBmb3IgYXJjNC51aW50MTYKICAgIGRpZyAzCiAgICBpbnRjXzEgLy8gMAogICAgZXh0cmFjdF91aW50NjQKICAgIGludGNfMSAvLyAwCiAgICBpbnRjXzIgLy8gNjM2NDEzNjIyMzg0Njc5MzAwNQogICAgbXVsdwogICAgYnVyeSAxCiAgICBkdXAKICAgIGludGMgNCAvLyAxNDQyNjk1MDQwODg4OTYzNDA3CiAgICBhZGR3CiAgICBidXJ5IDEKICAgIHVuY292ZXIgMgogICAgYWRkdwogICAgYnVyeSAxCiAgICBpbnRjXzIgLy8gNjM2NDEzNjIyMzg0Njc5MzAwNQogICAgbXVsdwogICAgYnVyeSAxCiAgICBpbnRjIDQgLy8gMTQ0MjY5NTA0MDg4ODk2MzQwNwogICAgYWRkdwogICAgY292ZXIgNgogICAgcG9wCiAgICB1bmNvdmVyIDQKICAgIHB1c2hpbnQgOCAvLyA4CiAgICBleHRyYWN0X3VpbnQ2NAogICAgc3dhcAogICAgaW50YyA1IC8vIDE0NDI2OTUwNDA4ODg5NjM0MDkKICAgIGFkZHcKICAgIGJ1cnkgMQogICAgYWRkdwogICAgYnVyeSAxCiAgICBpbnRjXzIgLy8gNjM2NDEzNjIyMzg0Njc5MzAwNQogICAgbXVsdwogICAgYnVyeSAxCiAgICBpbnRjIDUgLy8gMTQ0MjY5NTA0MDg4ODk2MzQwOQogICAgYWRkdwogICAgY292ZXIgNAogICAgcG9wCiAgICB1bmNvdmVyIDIKICAgIGJ0b2kKICAgIGR1cAogICAgY292ZXIgMwogICAgdW5jb3ZlciAyCiAgICBidG9pCiAgICBjb3ZlciAyCiAgICBzd2FwCiAgICBidG9pCiAgICBzd2FwCiAgICBwdXNoYnl0ZXMgMHgwMDAwCiAgICBzd2FwCiAgICBibnogYm91bmRlZF9yYW5kX3VpbnQ2NF9lbHNlX2JvZHlAOQogICAgZGlnIDIKICAgIGJueiBib3VuZGVkX3JhbmRfdWludDY0X2Vsc2VfYm9keUA5CiAgICBpbnRjXzEgLy8gMAogICAgZGlnIDUKICAgIGJ1cnkgOQogICAgZGlnIDYKICAgIGJ1cnkgMTAKICAgIGJ1cnkgMTAKCmJvdW5kZWRfcmFuZF91aW50NjRfZm9yX2hlYWRlckA2OgogICAgZGlnIDkKICAgIGRpZyAyCiAgICA8CiAgICBieiBib3VuZGVkX3JhbmRfdWludDY0X2FmdGVyX2lmX2Vsc2VAMTkKICAgIGRpZyA4CiAgICBkaWcgOAogICAgY2FsbHN1YiBfX3BjZzY0X3VuYm91bmRlZF9yYW5kb20KICAgIGNvdmVyIDIKICAgIGJ1cnkgMTAKICAgIGJ1cnkgMTAKICAgIGl0b2IKICAgIGRpZyAxCiAgICBkdXAKICAgIHVuY292ZXIgMgogICAgY29uY2F0IC8vIG9uIGVycm9yOiBtYXggYXJyYXkgbGVuZ3RoIGV4Y2VlZGVkCiAgICBzd2FwCiAgICBpbnRjXzEgLy8gMAogICAgZXh0cmFjdF91aW50MTYKICAgIGludGNfMCAvLyAxCiAgICArCiAgICBpdG9iCiAgICBleHRyYWN0IDYgMgogICAgcmVwbGFjZTIgMAogICAgYnVyeSAxCiAgICBkaWcgOQogICAgaW50Y18wIC8vIDEKICAgICsKICAgIGJ1cnkgMTAKICAgIGIgYm91bmRlZF9yYW5kX3VpbnQ2NF9mb3JfaGVhZGVyQDYKCmJvdW5kZWRfcmFuZF91aW50NjRfYWZ0ZXJfaWZfZWxzZUAxOToKICAgIHB1c2hieXRlcyAweDE1MWY3Yzc1CiAgICBkaWcgMQogICAgY29uY2F0CiAgICBsb2cKICAgIGludGNfMCAvLyAxCiAgICByZXR1cm4KCmJvdW5kZWRfcmFuZF91aW50NjRfZWxzZV9ib2R5QDk6CiAgICBkaWcgMgogICAgYnogYm91bmRlZF9yYW5kX3VpbnQ2NF9lbHNlX2JvZHlAMTEKICAgIGRpZyAyCiAgICBkdXAKICAgIGludGNfMCAvLyAxCiAgICA+CiAgICBhc3NlcnQKICAgIGR1cAogICAgaW50Y18wIC8vIDEKICAgIC0KICAgIGRpZyA1CiAgICBkdXAKICAgIHVuY292ZXIgMgogICAgPAogICAgYXNzZXJ0CiAgICAtCiAgICBidXJ5IDEyCgpib3VuZGVkX3JhbmRfdWludDY0X2FmdGVyX2lmX2Vsc2VAMTI6CiAgICBkaWcgMTEKICAgIGR1cAogICAgfgogICAgaW50Y18wIC8vIDEKICAgIGFkZHcKICAgIGJ1cnkgMQogICAgc3dhcAogICAgJQogICAgYnVyeSA3CiAgICBpbnRjXzEgLy8gMAogICAgZGlnIDUKICAgIGJ1cnkgOQogICAgZGlnIDYKICAgIGJ1cnkgMTAKICAgIGJ1cnkgMTAKCmJvdW5kZWRfcmFuZF91aW50NjRfZm9yX2hlYWRlckAxMzoKICAgIGRpZyA5CiAgICBkaWcgMgogICAgPAogICAgYnogYm91bmRlZF9yYW5kX3VpbnQ2NF9hZnRlcl9pZl9lbHNlQDE5Cgpib3VuZGVkX3JhbmRfdWludDY0X3doaWxlX3RvcEAxNToKICAgIGRpZyA4CiAgICBkaWcgOAogICAgY2FsbHN1YiBfX3BjZzY0X3VuYm91bmRlZF9yYW5kb20KICAgIGR1cAogICAgY292ZXIgMwogICAgYnVyeSAxNAogICAgYnVyeSAxMAogICAgYnVyeSAxMAogICAgZGlnIDcKICAgID49CiAgICBieiBib3VuZGVkX3JhbmRfdWludDY0X3doaWxlX3RvcEAxNQogICAgZGlnIDEwCiAgICBkaWcgMTIKICAgICUKICAgIGRpZyA0CiAgICArCiAgICBpdG9iCiAgICBkaWcgMQogICAgZHVwCiAgICB1bmNvdmVyIDIKICAgIGNvbmNhdCAvLyBvbiBlcnJvcjogbWF4IGFycmF5IGxlbmd0aCBleGNlZWRlZAogICAgc3dhcAogICAgaW50Y18xIC8vIDAKICAgIGV4dHJhY3RfdWludDE2CiAgICBpbnRjXzAgLy8gMQogICAgKwogICAgaXRvYgogICAgZXh0cmFjdCA2IDIKICAgIHJlcGxhY2UyIDAKICAgIGJ1cnkgMQogICAgZGlnIDkKICAgIGludGNfMCAvLyAxCiAgICArCiAgICBidXJ5IDEwCiAgICBiIGJvdW5kZWRfcmFuZF91aW50NjRfZm9yX2hlYWRlckAxMwoKYm91bmRlZF9yYW5kX3VpbnQ2NF9lbHNlX2JvZHlAMTE6CiAgICBkaWcgMwogICAgZHVwCiAgICBwdXNoaW50IDE4NDQ2NzQ0MDczNzA5NTUxNjE1IC8vIDE4NDQ2NzQ0MDczNzA5NTUxNjE1CiAgICA8CiAgICBhc3NlcnQKICAgIGl0b2IKICAgIHB1c2hieXRlcyAweDAxMDAwMDAwMDAwMDAwMDAwMAogICAgc3dhcAogICAgYi0KICAgIGJ0b2kKICAgIGJ1cnkgMTIKICAgIGIgYm91bmRlZF9yYW5kX3VpbnQ2NF9hZnRlcl9pZl9lbHNlQDEyCg==",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDExCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
    },
    "byteCode": {
        "approval": "CyAGAQCt/tXk1IX9qFj/////D8+Cnrvv796CFNGCnrvv796CFDEbQQAYgAS6VoLONhoAjgEAAQAxGRQxGBBEQgCFI4EEMRmOAgAKAAEAMRhEMQAyCRJDMRgURCJDigIDi/4kHUUBIQQeRQFJFCEFTJCL/yQdRQEeRQGL/oESkYv+G4EbkSUai/6BO5FKkUwcIh5FAYEfGk8CTJAlGhmBIJCL/4ESkYv/G4EbkSUai/+BO5FKkUwcIh5FAYEfGk8CTJAlGhkZiYAARwU2GgFJFYEQEkQ2GgJJFYEIEkQ2GgNJFYEIEkQ2GgRJFYECEkRLAyNbIyQdRQFJIQQeRQFPAh5FASQdRQEhBB5OBkhPBIEIW0whBR5FAR5FASQdRQEhBR5OBEhPAhdJTgNPAhdOAkwXTIACAABMQABOSwJAAEkjSwVFCUsGRQpFCksJSwIMQQAqSwhLCIj/A04CRQpFChZLAUlPAlBMI1kiCBZXBgJcAEUBSwkiCEUKQv/OgAQVH3x1SwFQsCJDSwJBAG1LAkkiDURJIglLBUlPAgxECUUMSwtJHCIeRQFMGEUHI0sFRQlLBkUKRQpLCUsCDEH/vUsISwiI/pZJTgNFDkUKRQpLBw9B/+pLCksMGEsECBZLAUlPAlBMI1kiCBZXBgJcAEUBSwkiCEUKQv+9SwNJgf///////////wEMRBaACQEAAAAAAAAAAEyhF0UMQv+C",
        "clear": "C4EBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 5,
            "minor": 4,
            "patch": 0
        }
    },
    "events": [],
    "templateVariables": {}
}