{
    "hints": {
        "bounded_rand_uint64(byte[16],uint64,uint64,uint16)uint64[]": {
            "call_config": {
                "no_op": "CALL"
            }
        }
    },
    "source": {
        "approval": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuYXBwcm92YWxfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIGludGNibG9jayAxIDAgNjM2NDEzNjIyMzg0Njc5MzAwNSA0Mjk0OTY3Mjk1IDE0NDI2OTUwNDA4ODg5NjM0MDcgMTQ0MjY5NTA0MDg4ODk2MzQwOQogICAgdHhuIE51bUFwcEFyZ3MKICAgIGJ6IG1haW5fYmFyZV9yb3V0aW5nQDYKICAgIHB1c2hieXRlcyAweGJhNTY4MmNlIC8vIG1ldGhvZCAiYm91bmRlZF9yYW5kX3VpbnQ2NChieXRlWzE2XSx1aW50NjQsdWludDY0LHVpbnQxNil1aW50NjRbXSIKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDAKICAgIG1hdGNoIG1haW5fYm91bmRlZF9yYW5kX3VpbnQ2NF9yb3V0ZUAzCgptYWluX2FmdGVyX2lmX2Vsc2VAMTE6CiAgICBpbnRjXzEgLy8gMAogICAgcmV0dXJuCgptYWluX2JvdW5kZWRfcmFuZF91aW50NjRfcm91dGVAMzoKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgbm90IE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIG5vdCBjcmVhdGluZwogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMgogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMwogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgNAogICAgY2FsbHN1YiBib3VuZGVkX3JhbmRfdWludDY0CiAgICBwdXNoYnl0ZXMgMHgxNTFmN2M3NQogICAgc3dhcAogICAgY29uY2F0CiAgICBsb2cKICAgIGludGNfMCAvLyAxCiAgICByZXR1cm4KCm1haW5fYmFyZV9yb3V0aW5nQDY6CiAgICBwdXNoaW50IDQgLy8gNAogICAgaW50Y18xIC8vIDAKICAgIHR4biBPbkNvbXBsZXRpb24KICAgIG1hdGNoIG1haW5fdXBkYXRlQDcgbWFpbl9fX2FsZ29weV9kZWZhdWx0X2NyZWF0ZUA4CiAgICBiIG1haW5fYWZ0ZXJfaWZfZWxzZUAxMQoKbWFpbl9fX2FsZ29weV9kZWZhdWx0X2NyZWF0ZUA4OgogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgICEKICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gY3JlYXRpbmcKICAgIGludGNfMCAvLyAxCiAgICByZXR1cm4KCm1haW5fdXBkYXRlQDc6CiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBub3QgY3JlYXRpbmcKICAgIGNhbGxzdWIgdXBkYXRlCiAgICBpbnRjXzAgLy8gMQogICAgcmV0dXJuCgoKLy8gc21hcnRfY29udHJhY3RzLmxpYl9wY2c2NF9leHBvc2VyLmNvbnRyYWN0LkxpYlBjZzY0RXhwb3NlckFsZ29weS5ib3VuZGVkX3JhbmRfdWludDY0KHNlZWQ6IGJ5dGVzLCBsb3dlcl9ib3VuZDogYnl0ZXMsIHVwcGVyX2JvdW5kOiBieXRlcywgbGVuZ3RoOiBieXRlcykgLT4gYnl0ZXM6CmJvdW5kZWRfcmFuZF91aW50NjQ6CiAgICBwcm90byA0IDEKICAgIHB1c2hieXRlcyAiIgogICAgZHVwbiA1CiAgICBmcmFtZV9kaWcgLTQKICAgIGxlbgogICAgcHVzaGludCAxNiAvLyAxNgogICAgPT0KICAgIGFzc2VydAogICAgZnJhbWVfZGlnIC00CiAgICBpbnRjXzEgLy8gMAogICAgZXh0cmFjdF91aW50NjQKICAgIGludGNfMSAvLyAwCiAgICBpbnRjXzIgLy8gNjM2NDEzNjIyMzg0Njc5MzAwNQogICAgbXVsdwogICAgYnVyeSAxCiAgICBkdXAKICAgIGludGMgNCAvLyAxNDQyNjk1MDQwODg4OTYzNDA3CiAgICBhZGR3CiAgICBidXJ5IDEKICAgIHVuY292ZXIgMgogICAgYWRkdwogICAgYnVyeSAxCiAgICBpbnRjXzIgLy8gNjM2NDEzNjIyMzg0Njc5MzAwNQogICAgbXVsdwogICAgYnVyeSAxCiAgICBpbnRjIDQgLy8gMTQ0MjY5NTA0MDg4ODk2MzQwNwogICAgYWRkdwogICAgY292ZXIgMgogICAgcG9wCiAgICBmcmFtZV9kaWcgLTQKICAgIHB1c2hpbnQgOCAvLyA4CiAgICBleHRyYWN0X3VpbnQ2NAogICAgc3dhcAogICAgaW50YyA1IC8vIDE0NDI2OTUwNDA4ODg5NjM0MDkKICAgIGFkZHcKICAgIGJ1cnkgMQogICAgYWRkdwogICAgYnVyeSAxCiAgICBpbnRjXzIgLy8gNjM2NDEzNjIyMzg0Njc5MzAwNQogICAgbXVsdwogICAgYnVyeSAxCiAgICBpbnRjIDUgLy8gMTQ0MjY5NTA0MDg4ODk2MzQwOQogICAgYWRkdwogICAgYnVyeSAxCiAgICBmcmFtZV9kaWcgLTMKICAgIGJ0b2kKICAgIGR1cAogICAgZnJhbWVfZGlnIC0yCiAgICBidG9pCiAgICBzd2FwCiAgICBmcmFtZV9kaWcgLTEKICAgIGJ0b2kKICAgIHN3YXAKICAgIHB1c2hieXRlcyAweDAwMDAKICAgIHN3YXAKICAgIGJueiBib3VuZGVkX3JhbmRfdWludDY0X2Vsc2VfYm9keUAxMAogICAgZnJhbWVfZGlnIDkKICAgIGJueiBib3VuZGVkX3JhbmRfdWludDY0X2Vsc2VfYm9keUAxMAogICAgaW50Y18xIC8vIDAKICAgIGZyYW1lX2J1cnkgMgogICAgZnJhbWVfZGlnIDcKICAgIGZyYW1lX2J1cnkgNAogICAgZnJhbWVfZGlnIDYKICAgIGZyYW1lX2J1cnkgMwoKYm91bmRlZF9yYW5kX3VpbnQ2NF9mb3JfaGVhZGVyQDY6CiAgICBmcmFtZV9kaWcgMgogICAgZnJhbWVfZGlnIDEwCiAgICA8CiAgICBieiBib3VuZGVkX3JhbmRfdWludDY0X2FmdGVyX2lmX2Vsc2VAMjMKICAgIGZyYW1lX2RpZyAzCiAgICBmcmFtZV9kaWcgNAogICAgY2FsbHN1YiBfX3BjZzY0X3VuYm91bmRlZF9yYW5kb20KICAgIGNvdmVyIDIKICAgIGZyYW1lX2J1cnkgNAogICAgZnJhbWVfYnVyeSAzCiAgICBmcmFtZV9kaWcgMTEKICAgIGV4dHJhY3QgMiAwCiAgICBzd2FwCiAgICBpdG9iCiAgICBjb25jYXQKICAgIGR1cAogICAgbGVuCiAgICBwdXNoaW50IDggLy8gOAogICAgLwogICAgaXRvYgogICAgZXh0cmFjdCA2IDIKICAgIHN3YXAKICAgIGNvbmNhdAogICAgZnJhbWVfYnVyeSAxMQogICAgZnJhbWVfZGlnIDIKICAgIGludGNfMCAvLyAxCiAgICArCiAgICBmcmFtZV9idXJ5IDIKICAgIGIgYm91bmRlZF9yYW5kX3VpbnQ2NF9mb3JfaGVhZGVyQDYKCmJvdW5kZWRfcmFuZF91aW50NjRfYWZ0ZXJfaWZfZWxzZUAyMzoKICAgIGZyYW1lX2RpZyAxMQogICAgZnJhbWVfYnVyeSAwCiAgICByZXRzdWIKCmJvdW5kZWRfcmFuZF91aW50NjRfZWxzZV9ib2R5QDEwOgogICAgZnJhbWVfZGlnIDkKICAgIGJ6IGJvdW5kZWRfcmFuZF91aW50NjRfZWxzZV9ib2R5QDEyCiAgICBmcmFtZV9kaWcgOQogICAgZHVwCiAgICBpbnRjXzAgLy8gMQogICAgPgogICAgYXNzZXJ0CiAgICBkdXAKICAgIGludGNfMCAvLyAxCiAgICAtCiAgICBmcmFtZV9kaWcgOAogICAgZHVwCiAgICB1bmNvdmVyIDIKICAgIDwKICAgIGFzc2VydAogICAgLQogICAgZnJhbWVfYnVyeSAwCgpib3VuZGVkX3JhbmRfdWludDY0X2FmdGVyX2lmX2Vsc2VAMTM6CiAgICBmcmFtZV9kaWcgMAogICAgZHVwCiAgICB+CiAgICBpbnRjXzAgLy8gMQogICAgYWRkdwogICAgYnVyeSAxCiAgICBzd2FwCiAgICAlCiAgICBmcmFtZV9idXJ5IDUKICAgIGludGNfMSAvLyAwCiAgICBmcmFtZV9idXJ5IDIKICAgIGZyYW1lX2RpZyA3CiAgICBmcmFtZV9idXJ5IDQKICAgIGZyYW1lX2RpZyA2CiAgICBmcmFtZV9idXJ5IDMKCmJvdW5kZWRfcmFuZF91aW50NjRfZm9yX2hlYWRlckAxNDoKICAgIGZyYW1lX2RpZyAyCiAgICBmcmFtZV9kaWcgMTAKICAgIDwKICAgIGJ6IGJvdW5kZWRfcmFuZF91aW50NjRfYWZ0ZXJfaWZfZWxzZUAyMwoKYm91bmRlZF9yYW5kX3VpbnQ2NF93aGlsZV90b3BAMTY6CiAgICBmcmFtZV9kaWcgMwogICAgZnJhbWVfZGlnIDQKICAgIGNhbGxzdWIgX19wY2c2NF91bmJvdW5kZWRfcmFuZG9tCiAgICBkdXAKICAgIGNvdmVyIDMKICAgIGZyYW1lX2J1cnkgMQogICAgZnJhbWVfYnVyeSA0CiAgICBmcmFtZV9idXJ5IDMKICAgIGZyYW1lX2RpZyA1CiAgICA+PQogICAgYnogYm91bmRlZF9yYW5kX3VpbnQ2NF93aGlsZV90b3BAMTYKICAgIGZyYW1lX2RpZyAxMQogICAgZXh0cmFjdCAyIDAKICAgIGZyYW1lX2RpZyAxCiAgICBmcmFtZV9kaWcgMAogICAgJQogICAgZnJhbWVfZGlnIDgKICAgICsKICAgIGl0b2IKICAgIGNvbmNhdAogICAgZHVwCiAgICBsZW4KICAgIHB1c2hpbnQgOCAvLyA4CiAgICAvCiAgICBpdG9iCiAgICBleHRyYWN0IDYgMgogICAgc3dhcAogICAgY29uY2F0CiAgICBmcmFtZV9idXJ5IDExCiAgICBmcmFtZV9kaWcgMgogICAgaW50Y18wIC8vIDEKICAgICsKICAgIGZyYW1lX2J1cnkgMgogICAgYiBib3VuZGVkX3JhbmRfdWludDY0X2Zvcl9oZWFkZXJAMTQKCmJvdW5kZWRfcmFuZF91aW50NjRfZWxzZV9ib2R5QDEyOgogICAgZnJhbWVfZGlnIDgKICAgIGR1cAogICAgcHVzaGludCAxODQ0Njc0NDA3MzcwOTU1MTYxNSAvLyAxODQ0Njc0NDA3MzcwOTU1MTYxNQogICAgPAogICAgYXNzZXJ0CiAgICBpdG9iCiAgICBwdXNoYnl0ZXMgMHgwMTAwMDAwMDAwMDAwMDAwMDAKICAgIHN3YXAKICAgIGItCiAgICBidG9pCiAgICBmcmFtZV9idXJ5IDAKICAgIGIgYm91bmRlZF9yYW5kX3VpbnQ2NF9hZnRlcl9pZl9lbHNlQDEzCgoKLy8gbGliX3BjZy5wY2c2NC5fX3BjZzY0X3VuYm91bmRlZF9yYW5kb20oc3RhdGUuMDogdWludDY0LCBzdGF0ZS4xOiB1aW50NjQpIC0+IHVpbnQ2NCwgdWludDY0LCB1aW50NjQ6Cl9fcGNnNjRfdW5ib3VuZGVkX3JhbmRvbToKICAgIHByb3RvIDIgMwogICAgZnJhbWVfZGlnIC0yCiAgICBpbnRjXzIgLy8gNjM2NDEzNjIyMzg0Njc5MzAwNQogICAgbXVsdwogICAgYnVyeSAxCiAgICBpbnRjIDQgLy8gMTQ0MjY5NTA0MDg4ODk2MzQwNwogICAgYWRkdwogICAgYnVyeSAxCiAgICBkdXAKICAgICEKICAgIGludGMgNSAvLyAxNDQyNjk1MDQwODg4OTYzNDA5CiAgICBzd2FwCiAgICBzaGwKICAgIGZyYW1lX2RpZyAtMQogICAgaW50Y18yIC8vIDYzNjQxMzYyMjM4NDY3OTMwMDUKICAgIG11bHcKICAgIGJ1cnkgMQogICAgYWRkdwogICAgYnVyeSAxCiAgICBmcmFtZV9kaWcgLTIKICAgIHB1c2hpbnQgMTggLy8gMTgKICAgIHNocgogICAgZnJhbWVfZGlnIC0yCiAgICBeCiAgICBwdXNoaW50IDI3IC8vIDI3CiAgICBzaHIKICAgIGludGNfMyAvLyA0Mjk0OTY3Mjk1CiAgICAmCiAgICBmcmFtZV9kaWcgLTIKICAgIHB1c2hpbnQgNTkgLy8gNTkKICAgIHNocgogICAgZHVwMgogICAgc2hyCiAgICBzd2FwCiAgICB+CiAgICBpbnRjXzAgLy8gMQogICAgYWRkdwogICAgYnVyeSAxCiAgICBwdXNoaW50IDMxIC8vIDMxCiAgICAmCiAgICB1bmNvdmVyIDIKICAgIHN3YXAKICAgIHNobAogICAgaW50Y18zIC8vIDQyOTQ5NjcyOTUKICAgICYKICAgIHwKICAgIHB1c2hpbnQgMzIgLy8gMzIKICAgIHNobAogICAgZnJhbWVfZGlnIC0xCiAgICBwdXNoaW50IDE4IC8vIDE4CiAgICBzaHIKICAgIGZyYW1lX2RpZyAtMQogICAgXgogICAgcHVzaGludCAyNyAvLyAyNwogICAgc2hyCiAgICBpbnRjXzMgLy8gNDI5NDk2NzI5NQogICAgJgogICAgZnJhbWVfZGlnIC0xCiAgICBwdXNoaW50IDU5IC8vIDU5CiAgICBzaHIKICAgIGR1cDIKICAgIHNocgogICAgc3dhcAogICAgfgogICAgaW50Y18wIC8vIDEKICAgIGFkZHcKICAgIGJ1cnkgMQogICAgcHVzaGludCAzMSAvLyAzMQogICAgJgogICAgdW5jb3ZlciAyCiAgICBzd2FwCiAgICBzaGwKICAgIGludGNfMyAvLyA0Mjk0OTY3Mjk1CiAgICAmCiAgICB8CiAgICB8CiAgICByZXRzdWIKCgovLyBzbWFydF9jb250cmFjdHMubGliX3BjZzY0X2V4cG9zZXIuY29udHJhY3QuTGliUGNnNjRFeHBvc2VyQWxnb3B5LnVwZGF0ZSgpIC0+IHZvaWQ6CnVwZGF0ZToKICAgIHByb3RvIDAgMAogICAgdHhuIFNlbmRlcgogICAgZ2xvYmFsIENyZWF0b3JBZGRyZXNzCiAgICA9PQogICAgYXNzZXJ0CiAgICByZXRzdWIK",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
    },
    "state": {
        "global": {
            "num_byte_slices": 0,
            "num_uints": 0
        },
        "local": {
            "num_byte_slices": 0,
            "num_uints": 0
        }
    },
    "schema": {
        "global": {
            "declared": {},
            "reserved": {}
        },
        "local": {
            "declared": {},
            "reserved": {}
        }
    },
    "contract": {
        "name": "LibPcg64ExposerAlgopy",
        "methods": [
            {
                "name": "bounded_rand_uint64",
                "args": [
                    {
                        "type": "byte[16]",
                        "name": "seed"
                    },
                    {
                        "type": "uint64",
                        "name": "lower_bound"
                    },
                    {
                        "type": "uint64",
                        "name": "upper_bound"
                    },
                    {
                        "type": "uint16",
                        "name": "length"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "uint64[]"
                }
            }
        ],
        "networks": {}
    },
    "bare_call_config": {
        "update_application": "CALL",
        "no_op": "CREATE"
    }
}