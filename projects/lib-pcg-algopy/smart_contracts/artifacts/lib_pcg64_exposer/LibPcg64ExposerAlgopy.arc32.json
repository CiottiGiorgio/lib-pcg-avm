{
    "hints": {
        "bounded_rand_uint64(byte[16],uint64,uint64,uint16)uint64[]": {
            "call_config": {
                "no_op": "CALL"
            }
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCgpzbWFydF9jb250cmFjdHMubGliX3BjZzY0X2V4cG9zZXIuY29udHJhY3QuTGliUGNnNjRFeHBvc2VyQWxnb3B5LmNsZWFyX3N0YXRlX3Byb2dyYW06CiAgICAvLyBzbWFydF9jb250cmFjdHMvbGliX3BjZzY0X2V4cG9zZXIvY29udHJhY3QucHk6OAogICAgLy8gY2xhc3MgTGliUGNnNjRFeHBvc2VyQWxnb3B5KGFyYzQuQVJDNENvbnRyYWN0KToKICAgIGludCAxCiAgICByZXR1cm4K"
    },
    "state": {
        "global": {
            "num_byte_slices": 0,
            "num_uints": 0
        },
        "local": {
            "num_byte_slices": 0,
            "num_uints": 0
        }
    },
    "schema": {
        "global": {
            "declared": {},
            "reserved": {}
        },
        "local": {
            "declared": {},
            "reserved": {}
        }
    },
    "contract": {
        "name": "LibPcg64ExposerAlgopy",
        "methods": [
            {
                "name": "bounded_rand_uint64",
                "args": [
                    {
                        "type": "byte[16]",
                        "name": "seed"
                    },
                    {
                        "type": "uint64",
                        "name": "lower_bound"
                    },
                    {
                        "type": "uint64",
                        "name": "upper_bound"
                    },
                    {
                        "type": "uint16",
                        "name": "length"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "uint64[]"
                }
            }
        ],
        "networks": {}
    },
    "bare_call_config": {
        "update_application": "CALL",
        "no_op": "CREATE"
    }
}