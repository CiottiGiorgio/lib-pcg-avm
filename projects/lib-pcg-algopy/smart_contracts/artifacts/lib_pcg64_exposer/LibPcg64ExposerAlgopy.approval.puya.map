{
  "version": 3,
  "sources": [
    "../../../lib_pcg/pcg32.py",
    "../../../lib_pcg/pcg64.py",
    "../../lib_pcg64_exposer/contract.py"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AEOA;;AAAA;;;AAAA;;;;;;AAAA;;;AAAA;;;;AAAA;;AACK;;AAAA;AAAA;AAAA;;AAAA;AADL;;;AAAA;;;AAAA;;;AAAA;;;AACK;;;AAAA;;;;;;AAAA;AAAA;AAAA;AAAA;;AADL;;AAAA;AAAA;;AAAA;;;;;;AAAA;;;;;;;;;AAiBK;;AAAA;AAAA;;;AAAA;;ADmEL;;;ADiLyB;;AAAe;AAAf;AAAA;;AClKe;;ADmKf;AAAA;;ACjK0B;AAAA;AAAjC;;AAAA;AAAA;ADgKO;;AAAe;AAAf;AAAA;;AACA;AAAA;;AASE;;AAAS;;AAAT;AAAD;;AAAA;AAA0B;;AAA3B;AAqBL;AAAT;AArB8C;;AAAS;;AAAT;AAO7C;AAAA;AAMuB;AAAA;AAAQ;AAAhB;AAAA;;AANiD;;AAArB;AAAV;;AAAA;AAAA;AAczB;AAAT;AAdA;AC9KsD;;AAA5B;ADuKV;;AAAS;;AAAT;AAAD;;AAAA;AAA0B;;AAA3B;AAqBL;AAAT;AArB8C;;AAAS;;AAAT;AAO7C;AAAA;AAMuB;AAAA;AAAQ;AAAhB;AAAA;;AANiD;;AAArB;AAAV;;AAAA;AAAA;AAczB;AAAT;AAdA;AC9K0B;AAAjC;ACvGJ;;;;;;;ADkBW;;AAAA;AAAe;;AAAf;AAAP;AAGiB;;AAAwB;AAAxB;AD6HI;AAkHe;AAAf;AAAA;;AACA;AChPwB;;ADgPxB;AAAA;;AAlHD;;AAAA;AAAA;;AAiHgB;AAAf;AAAA;;AC/OwB;;ADgPxB;AAAA;;AAAA;AC/OJ;;AAAwB;;AAAxB;AD+OI;AC/OwB;;AD+OxB;AAAA;;AAlHD;AAAA;;AAiHgB;AAAf;AAAA;;AC9OwB;;AD+OxB;AAAA;;AE1PN;;AAAA;AAAA;AAAoB;;AAAA;AAAA;AAAoB;;AAAA;AAAA;ADwC9C;;;;AAAA;AAEN;;;AAAA;;AAAA;;;AACU;AAAL;;;;;;;;;;AAAK;;AAAA;;AAAA;AAAjB;;;AACuB;;AAAA;;AAAA;;;AAAA;;AAAA;;AAAA;;AAEX;;AAAA;;;AAAc;AAAA;AAAd;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAHK;;AAAA;AAAA;AAAA;;;;;ACxCT;;AAAA;;AAAA;AD6CR;;AAAA;;;AACmB;;AAAA;AAAc;AAAd;AAAP;AACqB;AAAc;AAAd;AAAd;;AAAA;AAAA;;AAAA;AAAP;AAEiB;AAAjB;;AD4NuB;;AAAA;AAAA;AAAQ;AAAhB;AAAA;;ACtNnB;AAAY;AAAZ;;AAES;AAAL;;;;;;;;;;AAAK;;AAAA;;AAAA;AAAjB;;;AAEmC;;AAAA;;AAAA;;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;;AAChB;;AAAA;AAAnB;;;AACoB;;AAAA;;;AACiB;;AAAA;;AAAA;AAAD;;AAAA;AAAZ;AADJ;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAJH;;AAAA;AAAA;AAAA;;;;;AANE;;AAAA;AAAc;;;;;;;;;;;AAAd;AAAP;AAE6C;AAAnB;;;;;;;;;;;AAAD;AAAC;AAAT;AAAjB;;;;;ACnDZ;;;AAEe;;AAAc;;AAAd;AAAP;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "algopy.arc4.ARC4Contract.approval_program",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 1 0 6364136223846793005 4294967295 1442695040888963407 1442695040888963409"
    },
    "37": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "39": {
      "op": "bz main_bare_routing@6",
      "stack_out": []
    },
    "42": {
      "op": "pushbytes 0xba5682ce // method \"bounded_rand_uint64(byte[16],uint64,uint64,uint16)uint64[]\""
    },
    "48": {
      "op": "txna ApplicationArgs 0"
    },
    "51": {
      "op": "match main_bounded_rand_uint64_route@3"
    },
    "55": {
      "block": "main_after_if_else@11",
      "stack_in": [],
      "op": "intc_1 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "56": {
      "op": "return"
    },
    "57": {
      "block": "main_bounded_rand_uint64_route@3",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "59": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "60": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "61": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "63": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "64": {
      "op": "txna ApplicationArgs 1"
    },
    "67": {
      "op": "txna ApplicationArgs 2"
    },
    "70": {
      "op": "txna ApplicationArgs 3"
    },
    "73": {
      "op": "txna ApplicationArgs 4",
      "defined_out": [
        "tmp%10#0",
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0",
        "tmp%10#0"
      ]
    },
    "76": {
      "callsub": "smart_contracts.lib_pcg64_exposer.contract.LibPcg64ExposerAlgoPy.bounded_rand_uint64",
      "op": "callsub bounded_rand_uint64",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "79": {
      "op": "pushbytes 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0",
        "0x151f7c75"
      ]
    },
    "85": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%11#0"
      ]
    },
    "86": {
      "op": "concat",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "87": {
      "op": "log",
      "stack_out": []
    },
    "88": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "89": {
      "op": "return"
    },
    "90": {
      "block": "main_bare_routing@6",
      "stack_in": [],
      "op": "pushint 4 // 4"
    },
    "92": {
      "op": "intc_1 // 0"
    },
    "93": {
      "op": "txn OnCompletion",
      "defined_out": [
        "0",
        "4",
        "tmp%13#0"
      ],
      "stack_out": [
        "4",
        "0",
        "tmp%13#0"
      ]
    },
    "95": {
      "op": "match main_update@7 main___algopy_default_create@8",
      "stack_out": []
    },
    "101": {
      "op": "b main_after_if_else@11"
    },
    "104": {
      "block": "main___algopy_default_create@8",
      "stack_in": [],
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "106": {
      "op": "!",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0"
      ]
    },
    "107": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "108": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "109": {
      "op": "return"
    },
    "110": {
      "block": "main_update@7",
      "stack_in": [],
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "112": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "113": {
      "callsub": "smart_contracts.lib_pcg64_exposer.contract.LibPcg64ExposerAlgoPy.update",
      "op": "callsub update"
    },
    "116": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "117": {
      "op": "return"
    },
    "118": {
      "subroutine": "lib_pcg.pcg64.__pcg64_unbounded_random",
      "params": {
        "state.0#0": "uint64",
        "state.1#0": "uint64"
      },
      "block": "__pcg64_unbounded_random",
      "stack_in": [],
      "op": "proto 2 3"
    },
    "121": {
      "op": "frame_dig -2",
      "defined_out": [
        "state.0#0 (copy)"
      ],
      "stack_out": [
        "state.0#0 (copy)"
      ]
    },
    "123": {
      "op": "intc_2 // 6364136223846793005",
      "defined_out": [
        "6364136223846793005",
        "state.0#0 (copy)"
      ],
      "stack_out": [
        "state.0#0 (copy)",
        "6364136223846793005"
      ]
    },
    "124": {
      "op": "mulw",
      "defined_out": [
        "_high_mul#0",
        "low_mul#0"
      ],
      "stack_out": [
        "_high_mul#0",
        "low_mul#0"
      ]
    },
    "125": {
      "op": "bury 1",
      "stack_out": [
        "low_mul#0"
      ]
    },
    "127": {
      "op": "intc 4 // 1442695040888963407",
      "defined_out": [
        "1442695040888963407",
        "low_mul#0"
      ],
      "stack_out": [
        "low_mul#0",
        "1442695040888963407"
      ]
    },
    "129": {
      "op": "addw",
      "defined_out": [
        "_high_add#0",
        "low_add#0"
      ],
      "stack_out": [
        "_high_add#0",
        "low_add#0"
      ]
    },
    "130": {
      "op": "bury 1",
      "stack_out": [
        "low_add#0"
      ]
    },
    "132": {
      "op": "dup",
      "defined_out": [
        "low_add#0",
        "low_add#0 (copy)"
      ],
      "stack_out": [
        "low_add#0",
        "low_add#0 (copy)"
      ]
    },
    "133": {
      "op": "!",
      "defined_out": [
        "low_add#0",
        "reinterpret_uint64%0#0"
      ],
      "stack_out": [
        "low_add#0",
        "reinterpret_uint64%0#0"
      ]
    },
    "134": {
      "op": "intc 5 // 1442695040888963409",
      "defined_out": [
        "1442695040888963409",
        "low_add#0",
        "reinterpret_uint64%0#0"
      ],
      "stack_out": [
        "low_add#0",
        "reinterpret_uint64%0#0",
        "1442695040888963409"
      ]
    },
    "136": {
      "op": "swap",
      "stack_out": [
        "low_add#0",
        "1442695040888963409",
        "reinterpret_uint64%0#0"
      ]
    },
    "137": {
      "op": "shl",
      "defined_out": [
        "incr#1",
        "low_add#0"
      ],
      "stack_out": [
        "low_add#0",
        "incr#1"
      ]
    },
    "138": {
      "op": "frame_dig -1",
      "defined_out": [
        "incr#1",
        "low_add#0",
        "state.1#0 (copy)"
      ],
      "stack_out": [
        "low_add#0",
        "incr#1",
        "state.1#0 (copy)"
      ]
    },
    "140": {
      "op": "intc_2 // 6364136223846793005",
      "stack_out": [
        "low_add#0",
        "incr#1",
        "state.1#0 (copy)",
        "6364136223846793005"
      ]
    },
    "141": {
      "op": "mulw",
      "stack_out": [
        "low_add#0",
        "incr#1",
        "_high_mul#0",
        "low_mul#0"
      ]
    },
    "142": {
      "op": "bury 1",
      "stack_out": [
        "low_add#0",
        "incr#1",
        "low_mul#0"
      ]
    },
    "144": {
      "op": "addw",
      "defined_out": [
        "_high_add#0",
        "low_add#0",
        "low_add#1"
      ],
      "stack_out": [
        "low_add#0",
        "_high_add#0",
        "low_add#1"
      ]
    },
    "145": {
      "op": "bury 1",
      "stack_out": [
        "low_add#0",
        "low_add#1"
      ]
    },
    "147": {
      "op": "frame_dig -2",
      "stack_out": [
        "low_add#0",
        "low_add#1",
        "state.0#0 (copy)"
      ]
    },
    "149": {
      "op": "pushint 18 // 18",
      "defined_out": [
        "18",
        "low_add#0",
        "low_add#1",
        "state.0#0 (copy)"
      ],
      "stack_out": [
        "low_add#0",
        "low_add#1",
        "state.0#0 (copy)",
        "18"
      ]
    },
    "151": {
      "op": "shr",
      "defined_out": [
        "low_add#0",
        "low_add#1",
        "tmp%0#1"
      ],
      "stack_out": [
        "low_add#0",
        "low_add#1",
        "tmp%0#1"
      ]
    },
    "152": {
      "op": "frame_dig -2",
      "stack_out": [
        "low_add#0",
        "low_add#1",
        "tmp%0#1",
        "state.0#0 (copy)"
      ]
    },
    "154": {
      "op": "^",
      "defined_out": [
        "low_add#0",
        "low_add#1",
        "tmp%1#1"
      ],
      "stack_out": [
        "low_add#0",
        "low_add#1",
        "tmp%1#1"
      ]
    },
    "155": {
      "op": "pushint 27 // 27",
      "defined_out": [
        "27",
        "low_add#0",
        "low_add#1",
        "tmp%1#1"
      ],
      "stack_out": [
        "low_add#0",
        "low_add#1",
        "tmp%1#1",
        "27"
      ]
    },
    "157": {
      "op": "shr",
      "defined_out": [
        "low_add#0",
        "low_add#1",
        "value#0"
      ],
      "stack_out": [
        "low_add#0",
        "low_add#1",
        "value#0"
      ]
    },
    "158": {
      "op": "intc_3 // 4294967295",
      "defined_out": [
        "4294967295",
        "low_add#0",
        "low_add#1",
        "value#0"
      ],
      "stack_out": [
        "low_add#0",
        "low_add#1",
        "value#0",
        "4294967295"
      ]
    },
    "159": {
      "op": "&",
      "stack_out": [
        "low_add#0",
        "low_add#1",
        "value#0"
      ]
    },
    "160": {
      "op": "frame_dig -2",
      "stack_out": [
        "low_add#0",
        "low_add#1",
        "value#0",
        "state.0#0 (copy)"
      ]
    },
    "162": {
      "op": "pushint 59 // 59",
      "defined_out": [
        "59",
        "low_add#0",
        "low_add#1",
        "state.0#0 (copy)",
        "value#0"
      ],
      "stack_out": [
        "low_add#0",
        "low_add#1",
        "value#0",
        "state.0#0 (copy)",
        "59"
      ]
    },
    "164": {
      "op": "shr",
      "defined_out": [
        "low_add#0",
        "low_add#1",
        "rot#0",
        "value#0"
      ],
      "stack_out": [
        "low_add#0",
        "low_add#1",
        "value#0",
        "rot#0"
      ]
    },
    "165": {
      "op": "dup2",
      "defined_out": [
        "low_add#0",
        "low_add#1",
        "rot#0",
        "rot#0 (copy)",
        "value#0",
        "value#0 (copy)"
      ],
      "stack_out": [
        "low_add#0",
        "low_add#1",
        "value#0",
        "rot#0",
        "value#0 (copy)",
        "rot#0 (copy)"
      ]
    },
    "166": {
      "op": "shr",
      "stack_out": [
        "low_add#0",
        "low_add#1",
        "value#0",
        "rot#0",
        "tmp%0#1"
      ]
    },
    "167": {
      "op": "swap",
      "stack_out": [
        "low_add#0",
        "low_add#1",
        "value#0",
        "tmp%0#1",
        "rot#0"
      ]
    },
    "168": {
      "op": "~",
      "defined_out": [
        "low_add#0",
        "low_add#1",
        "tmp%0#1",
        "tmp%0#7",
        "value#0"
      ],
      "stack_out": [
        "low_add#0",
        "low_add#1",
        "value#0",
        "tmp%0#1",
        "tmp%0#7"
      ]
    },
    "169": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "low_add#0",
        "low_add#1",
        "tmp%0#1",
        "tmp%0#7",
        "value#0"
      ],
      "stack_out": [
        "low_add#0",
        "low_add#1",
        "value#0",
        "tmp%0#1",
        "tmp%0#7",
        "1"
      ]
    },
    "170": {
      "op": "addw",
      "defined_out": [
        "_addw_high#0",
        "addw_low#0",
        "low_add#0",
        "low_add#1",
        "tmp%0#1",
        "value#0"
      ],
      "stack_out": [
        "low_add#0",
        "low_add#1",
        "value#0",
        "tmp%0#1",
        "_addw_high#0",
        "addw_low#0"
      ]
    },
    "171": {
      "op": "bury 1",
      "stack_out": [
        "low_add#0",
        "low_add#1",
        "value#0",
        "tmp%0#1",
        "addw_low#0"
      ]
    },
    "173": {
      "op": "pushint 31 // 31",
      "defined_out": [
        "31",
        "addw_low#0",
        "low_add#0",
        "low_add#1",
        "tmp%0#1",
        "value#0"
      ],
      "stack_out": [
        "low_add#0",
        "low_add#1",
        "value#0",
        "tmp%0#1",
        "addw_low#0",
        "31"
      ]
    },
    "175": {
      "op": "&",
      "defined_out": [
        "low_add#0",
        "low_add#1",
        "tmp%0#1",
        "tmp%2#0",
        "value#0"
      ],
      "stack_out": [
        "low_add#0",
        "low_add#1",
        "value#0",
        "tmp%0#1",
        "tmp%2#0"
      ]
    },
    "176": {
      "op": "uncover 2",
      "stack_out": [
        "low_add#0",
        "low_add#1",
        "tmp%0#1",
        "tmp%2#0",
        "value#0"
      ]
    },
    "178": {
      "op": "swap",
      "stack_out": [
        "low_add#0",
        "low_add#1",
        "tmp%0#1",
        "value#0",
        "tmp%2#0"
      ]
    },
    "179": {
      "op": "shl",
      "stack_out": [
        "low_add#0",
        "low_add#1",
        "tmp%0#1",
        "value#0"
      ]
    },
    "180": {
      "op": "intc_3 // 4294967295",
      "stack_out": [
        "low_add#0",
        "low_add#1",
        "tmp%0#1",
        "value#0",
        "4294967295"
      ]
    },
    "181": {
      "op": "&",
      "stack_out": [
        "low_add#0",
        "low_add#1",
        "tmp%0#1",
        "tmp%0#7"
      ]
    },
    "182": {
      "op": "|",
      "defined_out": [
        "low_add#0",
        "low_add#1",
        "tmp%5#1"
      ],
      "stack_out": [
        "low_add#0",
        "low_add#1",
        "tmp%5#1"
      ]
    },
    "183": {
      "op": "pushint 32 // 32",
      "defined_out": [
        "32",
        "low_add#0",
        "low_add#1",
        "tmp%5#1"
      ],
      "stack_out": [
        "low_add#0",
        "low_add#1",
        "tmp%5#1",
        "32"
      ]
    },
    "185": {
      "op": "shl",
      "stack_out": [
        "low_add#0",
        "low_add#1",
        "tmp%2#0"
      ]
    },
    "186": {
      "op": "frame_dig -1",
      "stack_out": [
        "low_add#0",
        "low_add#1",
        "tmp%2#0",
        "state.1#0 (copy)"
      ]
    },
    "188": {
      "op": "pushint 18 // 18",
      "stack_out": [
        "low_add#0",
        "low_add#1",
        "tmp%2#0",
        "state.1#0 (copy)",
        "18"
      ]
    },
    "190": {
      "op": "shr",
      "stack_out": [
        "low_add#0",
        "low_add#1",
        "tmp%2#0",
        "tmp%0#1"
      ]
    },
    "191": {
      "op": "frame_dig -1",
      "stack_out": [
        "low_add#0",
        "low_add#1",
        "tmp%2#0",
        "tmp%0#1",
        "state.1#0 (copy)"
      ]
    },
    "193": {
      "op": "^",
      "stack_out": [
        "low_add#0",
        "low_add#1",
        "tmp%2#0",
        "tmp%1#1"
      ]
    },
    "194": {
      "op": "pushint 27 // 27",
      "stack_out": [
        "low_add#0",
        "low_add#1",
        "tmp%2#0",
        "tmp%1#1",
        "27"
      ]
    },
    "196": {
      "op": "shr",
      "stack_out": [
        "low_add#0",
        "low_add#1",
        "tmp%2#0",
        "value#0"
      ]
    },
    "197": {
      "op": "intc_3 // 4294967295",
      "stack_out": [
        "low_add#0",
        "low_add#1",
        "tmp%2#0",
        "value#0",
        "4294967295"
      ]
    },
    "198": {
      "op": "&",
      "stack_out": [
        "low_add#0",
        "low_add#1",
        "tmp%2#0",
        "value#0"
      ]
    },
    "199": {
      "op": "frame_dig -1",
      "stack_out": [
        "low_add#0",
        "low_add#1",
        "tmp%2#0",
        "value#0",
        "state.1#0 (copy)"
      ]
    },
    "201": {
      "op": "pushint 59 // 59",
      "stack_out": [
        "low_add#0",
        "low_add#1",
        "tmp%2#0",
        "value#0",
        "state.1#0 (copy)",
        "59"
      ]
    },
    "203": {
      "op": "shr",
      "stack_out": [
        "low_add#0",
        "low_add#1",
        "tmp%2#0",
        "value#0",
        "rot#0"
      ]
    },
    "204": {
      "op": "dup2",
      "stack_out": [
        "low_add#0",
        "low_add#1",
        "tmp%2#0",
        "value#0",
        "rot#0",
        "value#0 (copy)",
        "rot#0 (copy)"
      ]
    },
    "205": {
      "op": "shr",
      "stack_out": [
        "low_add#0",
        "low_add#1",
        "tmp%2#0",
        "value#0",
        "rot#0",
        "tmp%0#1"
      ]
    },
    "206": {
      "op": "swap",
      "stack_out": [
        "low_add#0",
        "low_add#1",
        "tmp%2#0",
        "value#0",
        "tmp%0#1",
        "rot#0"
      ]
    },
    "207": {
      "op": "~",
      "stack_out": [
        "low_add#0",
        "low_add#1",
        "tmp%2#0",
        "value#0",
        "tmp%0#1",
        "tmp%0#7"
      ]
    },
    "208": {
      "op": "intc_0 // 1",
      "stack_out": [
        "low_add#0",
        "low_add#1",
        "tmp%2#0",
        "value#0",
        "tmp%0#1",
        "tmp%0#7",
        "1"
      ]
    },
    "209": {
      "op": "addw",
      "stack_out": [
        "low_add#0",
        "low_add#1",
        "tmp%2#0",
        "value#0",
        "tmp%0#1",
        "_addw_high#0",
        "addw_low#0"
      ]
    },
    "210": {
      "op": "bury 1",
      "stack_out": [
        "low_add#0",
        "low_add#1",
        "tmp%2#0",
        "value#0",
        "tmp%0#1",
        "addw_low#0"
      ]
    },
    "212": {
      "op": "pushint 31 // 31",
      "stack_out": [
        "low_add#0",
        "low_add#1",
        "tmp%2#0",
        "value#0",
        "tmp%0#1",
        "addw_low#0",
        "31"
      ]
    },
    "214": {
      "op": "&",
      "defined_out": [
        "low_add#0",
        "low_add#1",
        "tmp%0#1",
        "tmp%2#0",
        "tmp%2#4",
        "value#0"
      ],
      "stack_out": [
        "low_add#0",
        "low_add#1",
        "tmp%2#0",
        "value#0",
        "tmp%0#1",
        "tmp%2#4"
      ]
    },
    "215": {
      "op": "uncover 2",
      "stack_out": [
        "low_add#0",
        "low_add#1",
        "tmp%2#0",
        "tmp%0#1",
        "tmp%2#4",
        "value#0"
      ]
    },
    "217": {
      "op": "swap",
      "stack_out": [
        "low_add#0",
        "low_add#1",
        "tmp%2#0",
        "tmp%0#1",
        "value#0",
        "tmp%2#4"
      ]
    },
    "218": {
      "op": "shl",
      "stack_out": [
        "low_add#0",
        "low_add#1",
        "tmp%2#0",
        "tmp%0#1",
        "value#0"
      ]
    },
    "219": {
      "op": "intc_3 // 4294967295",
      "stack_out": [
        "low_add#0",
        "low_add#1",
        "tmp%2#0",
        "tmp%0#1",
        "value#0",
        "4294967295"
      ]
    },
    "220": {
      "op": "&",
      "stack_out": [
        "low_add#0",
        "low_add#1",
        "tmp%2#0",
        "tmp%0#1",
        "tmp%0#7"
      ]
    },
    "221": {
      "op": "|",
      "stack_out": [
        "low_add#0",
        "low_add#1",
        "tmp%2#0",
        "tmp%5#1"
      ]
    },
    "222": {
      "op": "|",
      "defined_out": [
        "low_add#0",
        "low_add#1",
        "tmp%4#0"
      ],
      "stack_out": [
        "low_add#0",
        "low_add#1",
        "tmp%4#0"
      ]
    },
    "223": {
      "retsub": true,
      "op": "retsub"
    },
    "224": {
      "subroutine": "smart_contracts.lib_pcg64_exposer.contract.LibPcg64ExposerAlgoPy.bounded_rand_uint64",
      "params": {
        "seed#0": "bytes",
        "lower_bound#0": "bytes",
        "upper_bound#0": "bytes",
        "length#0": "bytes"
      },
      "block": "bounded_rand_uint64",
      "stack_in": [],
      "op": "proto 4 1"
    },
    "227": {
      "op": "pushbytes \"\"",
      "stack_out": [
        "absolute_bound#0"
      ]
    },
    "229": {
      "op": "dupn 5",
      "stack_out": [
        "absolute_bound#0",
        "candidate#0",
        "i#0",
        "state.0#3",
        "state.1#3",
        "threshold#0"
      ]
    },
    "231": {
      "op": "frame_dig -4",
      "defined_out": [
        "seed#0 (copy)"
      ],
      "stack_out": [
        "absolute_bound#0",
        "candidate#0",
        "i#0",
        "state.0#3",
        "state.1#3",
        "threshold#0",
        "seed#0 (copy)"
      ]
    },
    "233": {
      "op": "len",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "absolute_bound#0",
        "candidate#0",
        "i#0",
        "state.0#3",
        "state.1#3",
        "threshold#0",
        "tmp%0#1"
      ]
    },
    "234": {
      "op": "pushint 16 // 16",
      "defined_out": [
        "16",
        "tmp%0#1"
      ],
      "stack_out": [
        "absolute_bound#0",
        "candidate#0",
        "i#0",
        "state.0#3",
        "state.1#3",
        "threshold#0",
        "tmp%0#1",
        "16"
      ]
    },
    "236": {
      "op": "==",
      "defined_out": [
        "tmp%1#1"
      ],
      "stack_out": [
        "absolute_bound#0",
        "candidate#0",
        "i#0",
        "state.0#3",
        "state.1#3",
        "threshold#0",
        "tmp%1#1"
      ]
    },
    "237": {
      "op": "assert",
      "stack_out": [
        "absolute_bound#0",
        "candidate#0",
        "i#0",
        "state.0#3",
        "state.1#3",
        "threshold#0"
      ]
    },
    "238": {
      "op": "frame_dig -4",
      "stack_out": [
        "absolute_bound#0",
        "candidate#0",
        "i#0",
        "state.0#3",
        "state.1#3",
        "threshold#0",
        "seed#0 (copy)"
      ]
    },
    "240": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "seed#0 (copy)"
      ],
      "stack_out": [
        "absolute_bound#0",
        "candidate#0",
        "i#0",
        "state.0#3",
        "state.1#3",
        "threshold#0",
        "seed#0 (copy)",
        "0"
      ]
    },
    "241": {
      "op": "extract_uint64",
      "defined_out": [
        "initial_state#0"
      ],
      "stack_out": [
        "absolute_bound#0",
        "candidate#0",
        "i#0",
        "state.0#3",
        "state.1#3",
        "threshold#0",
        "initial_state#0"
      ]
    },
    "242": {
      "op": "intc_1 // 0",
      "stack_out": [
        "absolute_bound#0",
        "candidate#0",
        "i#0",
        "state.0#3",
        "state.1#3",
        "threshold#0",
        "initial_state#0",
        "0"
      ]
    },
    "243": {
      "op": "intc_2 // 6364136223846793005",
      "defined_out": [
        "0",
        "6364136223846793005",
        "initial_state#0"
      ],
      "stack_out": [
        "absolute_bound#0",
        "candidate#0",
        "i#0",
        "state.0#3",
        "state.1#3",
        "threshold#0",
        "initial_state#0",
        "0",
        "6364136223846793005"
      ]
    },
    "244": {
      "op": "mulw",
      "defined_out": [
        "_high_mul#0",
        "initial_state#0",
        "low_mul#0"
      ],
      "stack_out": [
        "absolute_bound#0",
        "candidate#0",
        "i#0",
        "state.0#3",
        "state.1#3",
        "threshold#0",
        "initial_state#0",
        "_high_mul#0",
        "low_mul#0"
      ]
    },
    "245": {
      "op": "bury 1",
      "stack_out": [
        "absolute_bound#0",
        "candidate#0",
        "i#0",
        "state.0#3",
        "state.1#3",
        "threshold#0",
        "initial_state#0",
        "low_mul#0"
      ]
    },
    "247": {
      "op": "dup",
      "defined_out": [
        "initial_state#0",
        "low_mul#0",
        "low_mul#0 (copy)"
      ],
      "stack_out": [
        "absolute_bound#0",
        "candidate#0",
        "i#0",
        "state.0#3",
        "state.1#3",
        "threshold#0",
        "initial_state#0",
        "low_mul#0",
        "low_mul#0 (copy)"
      ]
    },
    "248": {
      "op": "intc 4 // 1442695040888963407",
      "defined_out": [
        "1442695040888963407",
        "initial_state#0",
        "low_mul#0",
        "low_mul#0 (copy)"
      ],
      "stack_out": [
        "absolute_bound#0",
        "candidate#0",
        "i#0",
        "state.0#3",
        "state.1#3",
        "threshold#0",
        "initial_state#0",
        "low_mul#0",
        "low_mul#0 (copy)",
        "1442695040888963407"
      ]
    },
    "250": {
      "op": "addw",
      "defined_out": [
        "_high_add#0",
        "initial_state#0",
        "low_add#0",
        "low_mul#0"
      ],
      "stack_out": [
        "absolute_bound#0",
        "candidate#0",
        "i#0",
        "state.0#3",
        "state.1#3",
        "threshold#0",
        "initial_state#0",
        "low_mul#0",
        "_high_add#0",
        "low_add#0"
      ]
    },
    "251": {
      "op": "bury 1",
      "stack_out": [
        "absolute_bound#0",
        "candidate#0",
        "i#0",
        "state.0#3",
        "state.1#3",
        "threshold#0",
        "initial_state#0",
        "low_mul#0",
        "low_add#0"
      ]
    },
    "253": {
      "op": "uncover 2",
      "stack_out": [
        "absolute_bound#0",
        "candidate#0",
        "i#0",
        "state.0#3",
        "state.1#3",
        "threshold#0",
        "low_mul#0",
        "low_add#0",
        "initial_state#0"
      ]
    },
    "255": {
      "op": "addw",
      "defined_out": [
        "_high_addw#0",
        "low_mul#0",
        "state#1"
      ],
      "stack_out": [
        "absolute_bound#0",
        "candidate#0",
        "i#0",
        "state.0#3",
        "state.1#3",
        "threshold#0",
        "low_mul#0",
        "_high_addw#0",
        "state#1"
      ]
    },
    "256": {
      "op": "bury 1",
      "stack_out": [
        "absolute_bound#0",
        "candidate#0",
        "i#0",
        "state.0#3",
        "state.1#3",
        "threshold#0",
        "low_mul#0",
        "state#1"
      ]
    },
    "258": {
      "op": "intc_2 // 6364136223846793005",
      "stack_out": [
        "absolute_bound#0",
        "candidate#0",
        "i#0",
        "state.0#3",
        "state.1#3",
        "threshold#0",
        "low_mul#0",
        "state#1",
        "6364136223846793005"
      ]
    },
    "259": {
      "op": "mulw",
      "defined_out": [
        "_high_mul#0",
        "low_mul#0",
        "low_mul#1"
      ],
      "stack_out": [
        "absolute_bound#0",
        "candidate#0",
        "i#0",
        "state.0#3",
        "state.1#3",
        "threshold#0",
        "low_mul#0",
        "_high_mul#0",
        "low_mul#1"
      ]
    },
    "260": {
      "op": "bury 1",
      "stack_out": [
        "absolute_bound#0",
        "candidate#0",
        "i#0",
        "state.0#3",
        "state.1#3",
        "threshold#0",
        "low_mul#0",
        "low_mul#1"
      ]
    },
    "262": {
      "op": "intc 4 // 1442695040888963407",
      "stack_out": [
        "absolute_bound#0",
        "candidate#0",
        "i#0",
        "state.0#3",
        "state.1#3",
        "threshold#0",
        "low_mul#0",
        "low_mul#1",
        "1442695040888963407"
      ]
    },
    "264": {
      "op": "addw",
      "stack_out": [
        "absolute_bound#0",
        "candidate#0",
        "i#0",
        "state.0#3",
        "state.1#3",
        "threshold#0",
        "low_mul#0",
        "_high_add#0",
        "low_add#0"
      ]
    },
    "265": {
      "op": "cover 2",
      "defined_out": [
        "_high_add#0",
        "low_add#0",
        "low_mul#0"
      ],
      "stack_out": [
        "absolute_bound#0",
        "candidate#0",
        "i#0",
        "state.0#3",
        "state.1#3",
        "threshold#0",
        "low_add#0",
        "low_mul#0",
        "_high_add#0"
      ]
    },
    "267": {
      "op": "pop",
      "stack_out": [
        "absolute_bound#0",
        "candidate#0",
        "i#0",
        "state.0#3",
        "state.1#3",
        "threshold#0",
        "low_add#0",
        "low_mul#0"
      ]
    },
    "268": {
      "op": "frame_dig -4",
      "stack_out": [
        "absolute_bound#0",
        "candidate#0",
        "i#0",
        "state.0#3",
        "state.1#3",
        "threshold#0",
        "low_add#0",
        "low_mul#0",
        "seed#0 (copy)"
      ]
    },
    "270": {
      "op": "pushint 8 // 8",
      "defined_out": [
        "8",
        "low_add#0",
        "low_mul#0",
        "seed#0 (copy)"
      ],
      "stack_out": [
        "absolute_bound#0",
        "candidate#0",
        "i#0",
        "state.0#3",
        "state.1#3",
        "threshold#0",
        "low_add#0",
        "low_mul#0",
        "seed#0 (copy)",
        "8"
      ]
    },
    "272": {
      "op": "extract_uint64",
      "stack_out": [
        "absolute_bound#0",
        "candidate#0",
        "i#0",
        "state.0#3",
        "state.1#3",
        "threshold#0",
        "low_add#0",
        "low_mul#0",
        "initial_state#0"
      ]
    },
    "273": {
      "op": "swap",
      "stack_out": [
        "absolute_bound#0",
        "candidate#0",
        "i#0",
        "state.0#3",
        "state.1#3",
        "threshold#0",
        "low_add#0",
        "initial_state#0",
        "low_mul#0"
      ]
    },
    "274": {
      "op": "intc 5 // 1442695040888963409",
      "defined_out": [
        "1442695040888963409",
        "initial_state#0",
        "low_add#0",
        "low_mul#0"
      ],
      "stack_out": [
        "absolute_bound#0",
        "candidate#0",
        "i#0",
        "state.0#3",
        "state.1#3",
        "threshold#0",
        "low_add#0",
        "initial_state#0",
        "low_mul#0",
        "1442695040888963409"
      ]
    },
    "276": {
      "op": "addw",
      "defined_out": [
        "_high_add#0",
        "initial_state#0",
        "low_add#0",
        "low_add#2"
      ],
      "stack_out": [
        "absolute_bound#0",
        "candidate#0",
        "i#0",
        "state.0#3",
        "state.1#3",
        "threshold#0",
        "low_add#0",
        "initial_state#0",
        "_high_add#0",
        "low_add#2"
      ]
    },
    "277": {
      "op": "bury 1",
      "stack_out": [
        "absolute_bound#0",
        "candidate#0",
        "i#0",
        "state.0#3",
        "state.1#3",
        "threshold#0",
        "low_add#0",
        "initial_state#0",
        "low_add#2"
      ]
    },
    "279": {
      "op": "addw",
      "stack_out": [
        "absolute_bound#0",
        "candidate#0",
        "i#0",
        "state.0#3",
        "state.1#3",
        "threshold#0",
        "low_add#0",
        "_high_addw#0",
        "state#1"
      ]
    },
    "280": {
      "op": "bury 1",
      "stack_out": [
        "absolute_bound#0",
        "candidate#0",
        "i#0",
        "state.0#3",
        "state.1#3",
        "threshold#0",
        "low_add#0",
        "state#1"
      ]
    },
    "282": {
      "op": "intc_2 // 6364136223846793005",
      "stack_out": [
        "absolute_bound#0",
        "candidate#0",
        "i#0",
        "state.0#3",
        "state.1#3",
        "threshold#0",
        "low_add#0",
        "state#1",
        "6364136223846793005"
      ]
    },
    "283": {
      "op": "mulw",
      "stack_out": [
        "absolute_bound#0",
        "candidate#0",
        "i#0",
        "state.0#3",
        "state.1#3",
        "threshold#0",
        "low_add#0",
        "_high_mul#0",
        "low_mul#0"
      ]
    },
    "284": {
      "op": "bury 1",
      "stack_out": [
        "absolute_bound#0",
        "candidate#0",
        "i#0",
        "state.0#3",
        "state.1#3",
        "threshold#0",
        "low_add#0",
        "low_mul#0"
      ]
    },
    "286": {
      "op": "intc 5 // 1442695040888963409",
      "stack_out": [
        "absolute_bound#0",
        "candidate#0",
        "i#0",
        "state.0#3",
        "state.1#3",
        "threshold#0",
        "low_add#0",
        "low_mul#0",
        "1442695040888963409"
      ]
    },
    "288": {
      "op": "addw",
      "stack_out": [
        "absolute_bound#0",
        "candidate#0",
        "i#0",
        "state.0#3",
        "state.1#3",
        "threshold#0",
        "low_add#0",
        "_high_add#0",
        "low_add#2"
      ]
    },
    "289": {
      "op": "bury 1",
      "defined_out": [
        "low_add#0",
        "low_add#2"
      ],
      "stack_out": [
        "absolute_bound#0",
        "candidate#0",
        "i#0",
        "state.0#3",
        "state.1#3",
        "threshold#0",
        "low_add#0",
        "low_add#2"
      ]
    },
    "291": {
      "op": "frame_dig -3",
      "defined_out": [
        "low_add#0",
        "low_add#2",
        "lower_bound#0 (copy)"
      ],
      "stack_out": [
        "absolute_bound#0",
        "candidate#0",
        "i#0",
        "state.0#3",
        "state.1#3",
        "threshold#0",
        "low_add#0",
        "low_add#2",
        "lower_bound#0 (copy)"
      ]
    },
    "293": {
      "op": "btoi",
      "defined_out": [
        "low_add#0",
        "low_add#2",
        "lower_bound#1"
      ],
      "stack_out": [
        "absolute_bound#0",
        "candidate#0",
        "i#0",
        "state.0#3",
        "state.1#3",
        "threshold#0",
        "low_add#0",
        "low_add#2",
        "lower_bound#1"
      ]
    },
    "294": {
      "op": "dup",
      "defined_out": [
        "low_add#0",
        "low_add#2",
        "lower_bound#1"
      ],
      "stack_out": [
        "absolute_bound#0",
        "candidate#0",
        "i#0",
        "state.0#3",
        "state.1#3",
        "threshold#0",
        "low_add#0",
        "low_add#2",
        "lower_bound#1",
        "lower_bound#1"
      ]
    },
    "295": {
      "op": "frame_dig -2",
      "defined_out": [
        "low_add#0",
        "low_add#2",
        "lower_bound#1",
        "upper_bound#0 (copy)"
      ],
      "stack_out": [
        "absolute_bound#0",
        "candidate#0",
        "i#0",
        "state.0#3",
        "state.1#3",
        "threshold#0",
        "low_add#0",
        "low_add#2",
        "lower_bound#1",
        "lower_bound#1",
        "upper_bound#0 (copy)"
      ]
    },
    "297": {
      "op": "btoi",
      "defined_out": [
        "low_add#0",
        "low_add#2",
        "lower_bound#1",
        "upper_bound#1"
      ],
      "stack_out": [
        "absolute_bound#0",
        "candidate#0",
        "i#0",
        "state.0#3",
        "state.1#3",
        "threshold#0",
        "low_add#0",
        "low_add#2",
        "lower_bound#1",
        "lower_bound#1",
        "upper_bound#1"
      ]
    },
    "298": {
      "op": "swap",
      "defined_out": [
        "low_add#0",
        "low_add#2",
        "lower_bound#1",
        "upper_bound#1"
      ],
      "stack_out": [
        "absolute_bound#0",
        "candidate#0",
        "i#0",
        "state.0#3",
        "state.1#3",
        "threshold#0",
        "low_add#0",
        "low_add#2",
        "lower_bound#1",
        "upper_bound#1",
        "lower_bound#1"
      ]
    },
    "299": {
      "op": "frame_dig -1",
      "defined_out": [
        "length#0 (copy)",
        "low_add#0",
        "low_add#2",
        "lower_bound#1",
        "upper_bound#1"
      ],
      "stack_out": [
        "absolute_bound#0",
        "candidate#0",
        "i#0",
        "state.0#3",
        "state.1#3",
        "threshold#0",
        "low_add#0",
        "low_add#2",
        "lower_bound#1",
        "upper_bound#1",
        "lower_bound#1",
        "length#0 (copy)"
      ]
    },
    "301": {
      "op": "btoi",
      "defined_out": [
        "length#1",
        "low_add#0",
        "low_add#2",
        "lower_bound#1",
        "upper_bound#1"
      ],
      "stack_out": [
        "absolute_bound#0",
        "candidate#0",
        "i#0",
        "state.0#3",
        "state.1#3",
        "threshold#0",
        "low_add#0",
        "low_add#2",
        "lower_bound#1",
        "upper_bound#1",
        "lower_bound#1",
        "length#1"
      ]
    },
    "302": {
      "op": "swap",
      "defined_out": [
        "length#1",
        "low_add#0",
        "low_add#2",
        "lower_bound#1",
        "upper_bound#1"
      ],
      "stack_out": [
        "absolute_bound#0",
        "candidate#0",
        "i#0",
        "state.0#3",
        "state.1#3",
        "threshold#0",
        "low_add#0",
        "low_add#2",
        "lower_bound#1",
        "upper_bound#1",
        "length#1",
        "lower_bound#1"
      ]
    },
    "303": {
      "op": "pushbytes 0x0000",
      "defined_out": [
        "length#1",
        "low_add#0",
        "low_add#2",
        "lower_bound#1",
        "result#0",
        "upper_bound#1"
      ],
      "stack_out": [
        "absolute_bound#0",
        "candidate#0",
        "i#0",
        "state.0#3",
        "state.1#3",
        "threshold#0",
        "low_add#0",
        "low_add#2",
        "lower_bound#1",
        "upper_bound#1",
        "length#1",
        "lower_bound#1",
        "result#0"
      ]
    },
    "307": {
      "op": "swap",
      "defined_out": [
        "length#1",
        "low_add#0",
        "low_add#2",
        "lower_bound#1",
        "result#0",
        "upper_bound#1"
      ],
      "stack_out": [
        "absolute_bound#0",
        "candidate#0",
        "i#0",
        "state.0#3",
        "state.1#3",
        "threshold#0",
        "low_add#0",
        "low_add#2",
        "lower_bound#1",
        "upper_bound#1",
        "length#1",
        "result#0",
        "lower_bound#1"
      ]
    },
    "308": {
      "op": "bnz bounded_rand_uint64_else_body@9",
      "stack_out": [
        "absolute_bound#0",
        "candidate#0",
        "i#0",
        "state.0#3",
        "state.1#3",
        "threshold#0",
        "low_add#0",
        "low_add#2",
        "lower_bound#1",
        "upper_bound#1",
        "length#1",
        "result#0"
      ]
    },
    "311": {
      "op": "frame_dig 9"
    },
    "313": {
      "op": "bnz bounded_rand_uint64_else_body@9"
    },
    "316": {
      "op": "intc_1 // 0"
    },
    "317": {
      "op": "frame_bury 2"
    },
    "319": {
      "op": "frame_dig 7"
    },
    "321": {
      "op": "frame_bury 4"
    },
    "323": {
      "op": "frame_dig 6"
    },
    "325": {
      "op": "frame_bury 3"
    },
    "327": {
      "block": "bounded_rand_uint64_for_header@6",
      "stack_in": [
        "absolute_bound#0",
        "candidate#0",
        "i#0",
        "state.0#3",
        "state.1#3",
        "threshold#0",
        "low_add#0",
        "low_add#2",
        "lower_bound#1",
        "upper_bound#1",
        "length#1",
        "result#0"
      ],
      "op": "frame_dig 2",
      "defined_out": [
        "i#0"
      ],
      "stack_out": [
        "absolute_bound#0",
        "candidate#0",
        "i#0",
        "state.0#3",
        "state.1#3",
        "threshold#0",
        "low_add#0",
        "low_add#2",
        "lower_bound#1",
        "upper_bound#1",
        "length#1",
        "result#0",
        "i#0"
      ]
    },
    "329": {
      "op": "frame_dig 10",
      "defined_out": [
        "i#0",
        "length#1"
      ],
      "stack_out": [
        "absolute_bound#0",
        "candidate#0",
        "i#0",
        "state.0#3",
        "state.1#3",
        "threshold#0",
        "low_add#0",
        "low_add#2",
        "lower_bound#1",
        "upper_bound#1",
        "length#1",
        "result#0",
        "i#0",
        "length#1"
      ]
    },
    "331": {
      "op": "<",
      "defined_out": [
        "continue_looping%0#0",
        "i#0",
        "length#1"
      ],
      "stack_out": [
        "absolute_bound#0",
        "candidate#0",
        "i#0",
        "state.0#3",
        "state.1#3",
        "threshold#0",
        "low_add#0",
        "low_add#2",
        "lower_bound#1",
        "upper_bound#1",
        "length#1",
        "result#0",
        "continue_looping%0#0"
      ]
    },
    "332": {
      "op": "bz bounded_rand_uint64_after_if_else@19",
      "stack_out": [
        "absolute_bound#0",
        "candidate#0",
        "i#0",
        "state.0#3",
        "state.1#3",
        "threshold#0",
        "low_add#0",
        "low_add#2",
        "lower_bound#1",
        "upper_bound#1",
        "length#1",
        "result#0"
      ]
    },
    "335": {
      "op": "frame_dig 3"
    },
    "337": {
      "op": "frame_dig 4"
    },
    "339": {
      "callsub": "lib_pcg.pcg64.__pcg64_unbounded_random",
      "op": "callsub __pcg64_unbounded_random"
    },
    "342": {
      "op": "cover 2"
    },
    "344": {
      "op": "frame_bury 4"
    },
    "346": {
      "op": "frame_bury 3"
    },
    "348": {
      "op": "frame_dig 11"
    },
    "350": {
      "op": "extract 2 0"
    },
    "353": {
      "op": "swap"
    },
    "354": {
      "op": "itob"
    },
    "355": {
      "op": "concat"
    },
    "356": {
      "op": "dup"
    },
    "357": {
      "op": "len"
    },
    "358": {
      "op": "pushint 8 // 8"
    },
    "360": {
      "op": "/"
    },
    "361": {
      "op": "itob"
    },
    "362": {
      "op": "extract 6 2"
    },
    "365": {
      "op": "swap"
    },
    "366": {
      "op": "concat"
    },
    "367": {
      "op": "frame_bury 11"
    },
    "369": {
      "op": "frame_dig 2"
    },
    "371": {
      "op": "intc_0 // 1"
    },
    "372": {
      "op": "+"
    },
    "373": {
      "op": "frame_bury 2"
    },
    "375": {
      "op": "b bounded_rand_uint64_for_header@6"
    },
    "378": {
      "block": "bounded_rand_uint64_after_if_else@19",
      "stack_in": [
        "absolute_bound#0",
        "candidate#0",
        "i#0",
        "state.0#3",
        "state.1#3",
        "threshold#0",
        "low_add#0",
        "low_add#2",
        "lower_bound#1",
        "upper_bound#1",
        "length#1",
        "result#0"
      ],
      "op": "frame_dig 11",
      "defined_out": [
        "result#0"
      ],
      "stack_out": [
        "absolute_bound#0",
        "candidate#0",
        "i#0",
        "state.0#3",
        "state.1#3",
        "threshold#0",
        "low_add#0",
        "low_add#2",
        "lower_bound#1",
        "upper_bound#1",
        "length#1",
        "result#0",
        "result#0"
      ]
    },
    "380": {
      "op": "frame_bury 0"
    },
    "382": {
      "retsub": true,
      "op": "retsub"
    },
    "383": {
      "block": "bounded_rand_uint64_else_body@9",
      "stack_in": [
        "absolute_bound#0",
        "candidate#0",
        "i#0",
        "state.0#3",
        "state.1#3",
        "threshold#0",
        "low_add#0",
        "low_add#2",
        "lower_bound#1",
        "upper_bound#1",
        "length#1",
        "result#0"
      ],
      "op": "frame_dig 9",
      "defined_out": [
        "upper_bound#1"
      ],
      "stack_out": [
        "absolute_bound#0",
        "candidate#0",
        "i#0",
        "state.0#3",
        "state.1#3",
        "threshold#0",
        "low_add#0",
        "low_add#2",
        "lower_bound#1",
        "upper_bound#1",
        "length#1",
        "result#0",
        "upper_bound#1"
      ]
    },
    "385": {
      "op": "bz bounded_rand_uint64_else_body@11",
      "stack_out": [
        "absolute_bound#0",
        "candidate#0",
        "i#0",
        "state.0#3",
        "state.1#3",
        "threshold#0",
        "low_add#0",
        "low_add#2",
        "lower_bound#1",
        "upper_bound#1",
        "length#1",
        "result#0"
      ]
    },
    "388": {
      "op": "frame_dig 9"
    },
    "390": {
      "op": "dup"
    },
    "391": {
      "op": "intc_0 // 1"
    },
    "392": {
      "op": ">"
    },
    "393": {
      "op": "assert"
    },
    "394": {
      "op": "dup"
    },
    "395": {
      "op": "intc_0 // 1"
    },
    "396": {
      "op": "-"
    },
    "397": {
      "op": "frame_dig 8"
    },
    "399": {
      "op": "dup"
    },
    "400": {
      "op": "uncover 2"
    },
    "402": {
      "op": "<"
    },
    "403": {
      "op": "assert"
    },
    "404": {
      "op": "-"
    },
    "405": {
      "op": "frame_bury 0"
    },
    "407": {
      "block": "bounded_rand_uint64_after_if_else@12",
      "stack_in": [
        "absolute_bound#0",
        "candidate#0",
        "i#0",
        "state.0#3",
        "state.1#3",
        "threshold#0",
        "low_add#0",
        "low_add#2",
        "lower_bound#1",
        "upper_bound#1",
        "length#1",
        "result#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "absolute_bound#0"
      ],
      "stack_out": [
        "absolute_bound#0",
        "candidate#0",
        "i#0",
        "state.0#3",
        "state.1#3",
        "threshold#0",
        "low_add#0",
        "low_add#2",
        "lower_bound#1",
        "upper_bound#1",
        "length#1",
        "result#0",
        "absolute_bound#0"
      ]
    },
    "409": {
      "op": "dup",
      "defined_out": [
        "absolute_bound#0",
        "absolute_bound#0 (copy)"
      ],
      "stack_out": [
        "absolute_bound#0",
        "candidate#0",
        "i#0",
        "state.0#3",
        "state.1#3",
        "threshold#0",
        "low_add#0",
        "low_add#2",
        "lower_bound#1",
        "upper_bound#1",
        "length#1",
        "result#0",
        "absolute_bound#0",
        "absolute_bound#0 (copy)"
      ]
    },
    "410": {
      "op": "~",
      "defined_out": [
        "absolute_bound#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "absolute_bound#0",
        "candidate#0",
        "i#0",
        "state.0#3",
        "state.1#3",
        "threshold#0",
        "low_add#0",
        "low_add#2",
        "lower_bound#1",
        "upper_bound#1",
        "length#1",
        "result#0",
        "absolute_bound#0",
        "tmp%0#1"
      ]
    },
    "411": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "absolute_bound#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "absolute_bound#0",
        "candidate#0",
        "i#0",
        "state.0#3",
        "state.1#3",
        "threshold#0",
        "low_add#0",
        "low_add#2",
        "lower_bound#1",
        "upper_bound#1",
        "length#1",
        "result#0",
        "absolute_bound#0",
        "tmp%0#1",
        "1"
      ]
    },
    "412": {
      "op": "addw",
      "defined_out": [
        "_addw_high#0",
        "absolute_bound#0",
        "addw_low#0"
      ],
      "stack_out": [
        "absolute_bound#0",
        "candidate#0",
        "i#0",
        "state.0#3",
        "state.1#3",
        "threshold#0",
        "low_add#0",
        "low_add#2",
        "lower_bound#1",
        "upper_bound#1",
        "length#1",
        "result#0",
        "absolute_bound#0",
        "_addw_high#0",
        "addw_low#0"
      ]
    },
    "413": {
      "op": "bury 1",
      "stack_out": [
        "absolute_bound#0",
        "candidate#0",
        "i#0",
        "state.0#3",
        "state.1#3",
        "threshold#0",
        "low_add#0",
        "low_add#2",
        "lower_bound#1",
        "upper_bound#1",
        "length#1",
        "result#0",
        "absolute_bound#0",
        "addw_low#0"
      ]
    },
    "415": {
      "op": "swap",
      "stack_out": [
        "absolute_bound#0",
        "candidate#0",
        "i#0",
        "state.0#3",
        "state.1#3",
        "threshold#0",
        "low_add#0",
        "low_add#2",
        "lower_bound#1",
        "upper_bound#1",
        "length#1",
        "result#0",
        "addw_low#0",
        "absolute_bound#0"
      ]
    },
    "416": {
      "op": "%",
      "defined_out": [
        "absolute_bound#0",
        "threshold#0"
      ],
      "stack_out": [
        "absolute_bound#0",
        "candidate#0",
        "i#0",
        "state.0#3",
        "state.1#3",
        "threshold#0",
        "low_add#0",
        "low_add#2",
        "lower_bound#1",
        "upper_bound#1",
        "length#1",
        "result#0",
        "threshold#0"
      ]
    },
    "417": {
      "op": "frame_bury 5",
      "defined_out": [
        "absolute_bound#0",
        "threshold#0"
      ],
      "stack_out": [
        "absolute_bound#0",
        "candidate#0",
        "i#0",
        "state.0#3",
        "state.1#3",
        "threshold#0",
        "low_add#0",
        "low_add#2",
        "lower_bound#1",
        "upper_bound#1",
        "length#1",
        "result#0"
      ]
    },
    "419": {
      "op": "intc_1 // 0",
      "defined_out": [
        "absolute_bound#0",
        "i#0",
        "threshold#0"
      ],
      "stack_out": [
        "absolute_bound#0",
        "candidate#0",
        "i#0",
        "state.0#3",
        "state.1#3",
        "threshold#0",
        "low_add#0",
        "low_add#2",
        "lower_bound#1",
        "upper_bound#1",
        "length#1",
        "result#0",
        "i#0"
      ]
    },
    "420": {
      "op": "frame_bury 2",
      "defined_out": [
        "absolute_bound#0",
        "i#0",
        "threshold#0"
      ],
      "stack_out": [
        "absolute_bound#0",
        "candidate#0",
        "i#0",
        "state.0#3",
        "state.1#3",
        "threshold#0",
        "low_add#0",
        "low_add#2",
        "lower_bound#1",
        "upper_bound#1",
        "length#1",
        "result#0"
      ]
    },
    "422": {
      "op": "frame_dig 7",
      "defined_out": [
        "absolute_bound#0",
        "i#0",
        "state.1#3",
        "threshold#0"
      ],
      "stack_out": [
        "absolute_bound#0",
        "candidate#0",
        "i#0",
        "state.0#3",
        "state.1#3",
        "threshold#0",
        "low_add#0",
        "low_add#2",
        "lower_bound#1",
        "upper_bound#1",
        "length#1",
        "result#0",
        "state.1#3"
      ]
    },
    "424": {
      "op": "frame_bury 4",
      "defined_out": [
        "absolute_bound#0",
        "i#0",
        "state.1#3",
        "threshold#0"
      ],
      "stack_out": [
        "absolute_bound#0",
        "candidate#0",
        "i#0",
        "state.0#3",
        "state.1#3",
        "threshold#0",
        "low_add#0",
        "low_add#2",
        "lower_bound#1",
        "upper_bound#1",
        "length#1",
        "result#0"
      ]
    },
    "426": {
      "op": "frame_dig 6",
      "defined_out": [
        "absolute_bound#0",
        "i#0",
        "state.0#3",
        "state.1#3",
        "threshold#0"
      ],
      "stack_out": [
        "absolute_bound#0",
        "candidate#0",
        "i#0",
        "state.0#3",
        "state.1#3",
        "threshold#0",
        "low_add#0",
        "low_add#2",
        "lower_bound#1",
        "upper_bound#1",
        "length#1",
        "result#0",
        "state.0#3"
      ]
    },
    "428": {
      "op": "frame_bury 3",
      "stack_out": [
        "absolute_bound#0",
        "candidate#0",
        "i#0",
        "state.0#3",
        "state.1#3",
        "threshold#0",
        "low_add#0",
        "low_add#2",
        "lower_bound#1",
        "upper_bound#1",
        "length#1",
        "result#0"
      ]
    },
    "430": {
      "block": "bounded_rand_uint64_for_header@13",
      "stack_in": [
        "absolute_bound#0",
        "candidate#0",
        "i#0",
        "state.0#3",
        "state.1#3",
        "threshold#0",
        "low_add#0",
        "low_add#2",
        "lower_bound#1",
        "upper_bound#1",
        "length#1",
        "result#0"
      ],
      "op": "frame_dig 2",
      "defined_out": [
        "i#0"
      ],
      "stack_out": [
        "absolute_bound#0",
        "candidate#0",
        "i#0",
        "state.0#3",
        "state.1#3",
        "threshold#0",
        "low_add#0",
        "low_add#2",
        "lower_bound#1",
        "upper_bound#1",
        "length#1",
        "result#0",
        "i#0"
      ]
    },
    "432": {
      "op": "frame_dig 10",
      "defined_out": [
        "i#0",
        "length#1"
      ],
      "stack_out": [
        "absolute_bound#0",
        "candidate#0",
        "i#0",
        "state.0#3",
        "state.1#3",
        "threshold#0",
        "low_add#0",
        "low_add#2",
        "lower_bound#1",
        "upper_bound#1",
        "length#1",
        "result#0",
        "i#0",
        "length#1"
      ]
    },
    "434": {
      "op": "<",
      "defined_out": [
        "continue_looping%1#0",
        "i#0",
        "length#1"
      ],
      "stack_out": [
        "absolute_bound#0",
        "candidate#0",
        "i#0",
        "state.0#3",
        "state.1#3",
        "threshold#0",
        "low_add#0",
        "low_add#2",
        "lower_bound#1",
        "upper_bound#1",
        "length#1",
        "result#0",
        "continue_looping%1#0"
      ]
    },
    "435": {
      "op": "bz bounded_rand_uint64_after_if_else@19",
      "stack_out": [
        "absolute_bound#0",
        "candidate#0",
        "i#0",
        "state.0#3",
        "state.1#3",
        "threshold#0",
        "low_add#0",
        "low_add#2",
        "lower_bound#1",
        "upper_bound#1",
        "length#1",
        "result#0"
      ]
    },
    "438": {
      "block": "bounded_rand_uint64_while_top@15",
      "stack_in": [
        "absolute_bound#0",
        "candidate#0",
        "i#0",
        "state.0#3",
        "state.1#3",
        "threshold#0",
        "low_add#0",
        "low_add#2",
        "lower_bound#1",
        "upper_bound#1",
        "length#1",
        "result#0"
      ],
      "op": "frame_dig 3",
      "defined_out": [
        "state.0#3"
      ],
      "stack_out": [
        "absolute_bound#0",
        "candidate#0",
        "i#0",
        "state.0#3",
        "state.1#3",
        "threshold#0",
        "low_add#0",
        "low_add#2",
        "lower_bound#1",
        "upper_bound#1",
        "length#1",
        "result#0",
        "state.0#3"
      ]
    },
    "440": {
      "op": "frame_dig 4",
      "defined_out": [
        "state.0#3",
        "state.1#3"
      ],
      "stack_out": [
        "absolute_bound#0",
        "candidate#0",
        "i#0",
        "state.0#3",
        "state.1#3",
        "threshold#0",
        "low_add#0",
        "low_add#2",
        "lower_bound#1",
        "upper_bound#1",
        "length#1",
        "result#0",
        "state.0#3",
        "state.1#3"
      ]
    },
    "442": {
      "callsub": "lib_pcg.pcg64.__pcg64_unbounded_random",
      "op": "callsub __pcg64_unbounded_random",
      "defined_out": [
        "candidate#0",
        "state.0#3",
        "state.1#3"
      ],
      "stack_out": [
        "absolute_bound#0",
        "candidate#0",
        "i#0",
        "state.0#3",
        "state.1#3",
        "threshold#0",
        "low_add#0",
        "low_add#2",
        "lower_bound#1",
        "upper_bound#1",
        "length#1",
        "result#0",
        "state.0#3",
        "state.1#3",
        "candidate#0"
      ]
    },
    "445": {
      "op": "dup",
      "stack_out": [
        "absolute_bound#0",
        "candidate#0",
        "i#0",
        "state.0#3",
        "state.1#3",
        "threshold#0",
        "low_add#0",
        "low_add#2",
        "lower_bound#1",
        "upper_bound#1",
        "length#1",
        "result#0",
        "state.0#3",
        "state.1#3",
        "candidate#0",
        "candidate#0 (copy)"
      ]
    },
    "446": {
      "op": "cover 3",
      "stack_out": [
        "absolute_bound#0",
        "candidate#0",
        "i#0",
        "state.0#3",
        "state.1#3",
        "threshold#0",
        "low_add#0",
        "low_add#2",
        "lower_bound#1",
        "upper_bound#1",
        "length#1",
        "result#0",
        "candidate#0",
        "state.0#3",
        "state.1#3",
        "candidate#0"
      ]
    },
    "448": {
      "op": "frame_bury 1",
      "defined_out": [
        "candidate#0",
        "state.0#3",
        "state.1#3"
      ],
      "stack_out": [
        "absolute_bound#0",
        "candidate#0",
        "i#0",
        "state.0#3",
        "state.1#3",
        "threshold#0",
        "low_add#0",
        "low_add#2",
        "lower_bound#1",
        "upper_bound#1",
        "length#1",
        "result#0",
        "candidate#0",
        "state.0#3",
        "state.1#3"
      ]
    },
    "450": {
      "op": "frame_bury 4",
      "defined_out": [
        "candidate#0",
        "state.0#3",
        "state.1#3"
      ],
      "stack_out": [
        "absolute_bound#0",
        "candidate#0",
        "i#0",
        "state.0#3",
        "state.1#3",
        "threshold#0",
        "low_add#0",
        "low_add#2",
        "lower_bound#1",
        "upper_bound#1",
        "length#1",
        "result#0",
        "candidate#0",
        "state.0#3"
      ]
    },
    "452": {
      "op": "frame_bury 3",
      "stack_out": [
        "absolute_bound#0",
        "candidate#0",
        "i#0",
        "state.0#3",
        "state.1#3",
        "threshold#0",
        "low_add#0",
        "low_add#2",
        "lower_bound#1",
        "upper_bound#1",
        "length#1",
        "result#0",
        "candidate#0"
      ]
    },
    "454": {
      "op": "frame_dig 5",
      "defined_out": [
        "candidate#0",
        "state.0#3",
        "state.1#3",
        "threshold#0"
      ],
      "stack_out": [
        "absolute_bound#0",
        "candidate#0",
        "i#0",
        "state.0#3",
        "state.1#3",
        "threshold#0",
        "low_add#0",
        "low_add#2",
        "lower_bound#1",
        "upper_bound#1",
        "length#1",
        "result#0",
        "candidate#0",
        "threshold#0"
      ]
    },
    "456": {
      "op": ">=",
      "defined_out": [
        "candidate#0",
        "state.0#3",
        "state.1#3",
        "threshold#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "absolute_bound#0",
        "candidate#0",
        "i#0",
        "state.0#3",
        "state.1#3",
        "threshold#0",
        "low_add#0",
        "low_add#2",
        "lower_bound#1",
        "upper_bound#1",
        "length#1",
        "result#0",
        "tmp%9#0"
      ]
    },
    "457": {
      "op": "bz bounded_rand_uint64_while_top@15",
      "stack_out": [
        "absolute_bound#0",
        "candidate#0",
        "i#0",
        "state.0#3",
        "state.1#3",
        "threshold#0",
        "low_add#0",
        "low_add#2",
        "lower_bound#1",
        "upper_bound#1",
        "length#1",
        "result#0"
      ]
    },
    "460": {
      "op": "frame_dig 11"
    },
    "462": {
      "op": "extract 2 0"
    },
    "465": {
      "op": "frame_dig 1"
    },
    "467": {
      "op": "frame_dig 0"
    },
    "469": {
      "op": "%"
    },
    "470": {
      "op": "frame_dig 8"
    },
    "472": {
      "op": "+"
    },
    "473": {
      "op": "itob"
    },
    "474": {
      "op": "concat"
    },
    "475": {
      "op": "dup"
    },
    "476": {
      "op": "len"
    },
    "477": {
      "op": "pushint 8 // 8"
    },
    "479": {
      "op": "/"
    },
    "480": {
      "op": "itob"
    },
    "481": {
      "op": "extract 6 2"
    },
    "484": {
      "op": "swap"
    },
    "485": {
      "op": "concat"
    },
    "486": {
      "op": "frame_bury 11"
    },
    "488": {
      "op": "frame_dig 2"
    },
    "490": {
      "op": "intc_0 // 1"
    },
    "491": {
      "op": "+"
    },
    "492": {
      "op": "frame_bury 2"
    },
    "494": {
      "op": "b bounded_rand_uint64_for_header@13"
    },
    "497": {
      "block": "bounded_rand_uint64_else_body@11",
      "stack_in": [
        "absolute_bound#0",
        "candidate#0",
        "i#0",
        "state.0#3",
        "state.1#3",
        "threshold#0",
        "low_add#0",
        "low_add#2",
        "lower_bound#1",
        "upper_bound#1",
        "length#1",
        "result#0"
      ],
      "op": "frame_dig 8",
      "defined_out": [
        "lower_bound#1"
      ],
      "stack_out": [
        "absolute_bound#0",
        "candidate#0",
        "i#0",
        "state.0#3",
        "state.1#3",
        "threshold#0",
        "low_add#0",
        "low_add#2",
        "lower_bound#1",
        "upper_bound#1",
        "length#1",
        "result#0",
        "lower_bound#1"
      ]
    },
    "499": {
      "op": "dup",
      "defined_out": [
        "lower_bound#1",
        "lower_bound#1 (copy)"
      ],
      "stack_out": [
        "absolute_bound#0",
        "candidate#0",
        "i#0",
        "state.0#3",
        "state.1#3",
        "threshold#0",
        "low_add#0",
        "low_add#2",
        "lower_bound#1",
        "upper_bound#1",
        "length#1",
        "result#0",
        "lower_bound#1",
        "lower_bound#1 (copy)"
      ]
    },
    "500": {
      "op": "pushint 18446744073709551615 // 18446744073709551615",
      "defined_out": [
        "18446744073709551615",
        "lower_bound#1",
        "lower_bound#1 (copy)"
      ],
      "stack_out": [
        "absolute_bound#0",
        "candidate#0",
        "i#0",
        "state.0#3",
        "state.1#3",
        "threshold#0",
        "low_add#0",
        "low_add#2",
        "lower_bound#1",
        "upper_bound#1",
        "length#1",
        "result#0",
        "lower_bound#1",
        "lower_bound#1 (copy)",
        "18446744073709551615"
      ]
    },
    "511": {
      "op": "<",
      "defined_out": [
        "lower_bound#1",
        "tmp%6#0"
      ],
      "stack_out": [
        "absolute_bound#0",
        "candidate#0",
        "i#0",
        "state.0#3",
        "state.1#3",
        "threshold#0",
        "low_add#0",
        "low_add#2",
        "lower_bound#1",
        "upper_bound#1",
        "length#1",
        "result#0",
        "lower_bound#1",
        "tmp%6#0"
      ]
    },
    "512": {
      "op": "assert",
      "stack_out": [
        "absolute_bound#0",
        "candidate#0",
        "i#0",
        "state.0#3",
        "state.1#3",
        "threshold#0",
        "low_add#0",
        "low_add#2",
        "lower_bound#1",
        "upper_bound#1",
        "length#1",
        "result#0",
        "lower_bound#1"
      ]
    },
    "513": {
      "op": "itob",
      "defined_out": [
        "lower_bound#1",
        "tmp%7#0"
      ],
      "stack_out": [
        "absolute_bound#0",
        "candidate#0",
        "i#0",
        "state.0#3",
        "state.1#3",
        "threshold#0",
        "low_add#0",
        "low_add#2",
        "lower_bound#1",
        "upper_bound#1",
        "length#1",
        "result#0",
        "tmp%7#0"
      ]
    },
    "514": {
      "op": "pushbytes 0x010000000000000000",
      "defined_out": [
        "0x010000000000000000",
        "lower_bound#1",
        "tmp%7#0"
      ],
      "stack_out": [
        "absolute_bound#0",
        "candidate#0",
        "i#0",
        "state.0#3",
        "state.1#3",
        "threshold#0",
        "low_add#0",
        "low_add#2",
        "lower_bound#1",
        "upper_bound#1",
        "length#1",
        "result#0",
        "tmp%7#0",
        "0x010000000000000000"
      ]
    },
    "525": {
      "op": "swap",
      "stack_out": [
        "absolute_bound#0",
        "candidate#0",
        "i#0",
        "state.0#3",
        "state.1#3",
        "threshold#0",
        "low_add#0",
        "low_add#2",
        "lower_bound#1",
        "upper_bound#1",
        "length#1",
        "result#0",
        "0x010000000000000000",
        "tmp%7#0"
      ]
    },
    "526": {
      "op": "b-",
      "defined_out": [
        "lower_bound#1",
        "reinterpret_bytes%0#0"
      ],
      "stack_out": [
        "absolute_bound#0",
        "candidate#0",
        "i#0",
        "state.0#3",
        "state.1#3",
        "threshold#0",
        "low_add#0",
        "low_add#2",
        "lower_bound#1",
        "upper_bound#1",
        "length#1",
        "result#0",
        "reinterpret_bytes%0#0"
      ]
    },
    "527": {
      "op": "btoi",
      "defined_out": [
        "absolute_bound#0",
        "lower_bound#1"
      ],
      "stack_out": [
        "absolute_bound#0",
        "candidate#0",
        "i#0",
        "state.0#3",
        "state.1#3",
        "threshold#0",
        "low_add#0",
        "low_add#2",
        "lower_bound#1",
        "upper_bound#1",
        "length#1",
        "result#0",
        "absolute_bound#0"
      ]
    },
    "528": {
      "op": "frame_bury 0",
      "defined_out": [
        "absolute_bound#0",
        "lower_bound#1"
      ],
      "stack_out": [
        "absolute_bound#0",
        "candidate#0",
        "i#0",
        "state.0#3",
        "state.1#3",
        "threshold#0",
        "low_add#0",
        "low_add#2",
        "lower_bound#1",
        "upper_bound#1",
        "length#1",
        "result#0"
      ]
    },
    "530": {
      "op": "b bounded_rand_uint64_after_if_else@12"
    },
    "533": {
      "subroutine": "smart_contracts.lib_pcg64_exposer.contract.LibPcg64ExposerAlgoPy.update",
      "params": {},
      "block": "update",
      "stack_in": [],
      "op": "proto 0 0"
    },
    "536": {
      "op": "txn Sender"
    },
    "538": {
      "op": "global CreatorAddress",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "540": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "541": {
      "op": "assert",
      "stack_out": []
    },
    "542": {
      "retsub": true,
      "op": "retsub"
    }
  }
}