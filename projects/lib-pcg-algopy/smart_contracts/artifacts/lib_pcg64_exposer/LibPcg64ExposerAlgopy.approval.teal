#pragma version 10

smart_contracts.lib_pcg64_exposer.contract.LibPcg64ExposerAlgopy.approval_program:
    txn NumAppArgs
    bz main_bare_routing@5
    method "bounded_rand_uint64(byte[16],uint64,uint64,uint16)uint64[]"
    txna ApplicationArgs 0
    match main_bounded_rand_uint64_route@2
    err // reject transaction

main_bounded_rand_uint64_route@2:
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    txna ApplicationArgs 1
    txna ApplicationArgs 2
    txna ApplicationArgs 3
    txna ApplicationArgs 4
    callsub bounded_rand_uint64
    byte 0x151f7c75
    swap
    concat
    log
    int 1
    return

main_bare_routing@5:
    int 0
    int 4
    txn OnCompletion
    match main_create@6 main_update@7
    err // reject transaction

main_create@6:
    txn ApplicationID
    !
    assert // is creating
    int 1
    return

main_update@7:
    txn ApplicationID
    assert // is not creating
    callsub update
    int 1
    return


// smart_contracts.lib_pcg64_exposer.contract.LibPcg64ExposerAlgopy.bounded_rand_uint64(seed: bytes, lower_bound: bytes, upper_bound: bytes, length: bytes) -> bytes:
bounded_rand_uint64:
    proto 4 1
    frame_dig -4
    callsub pcg64_init
    swap
    frame_dig -3
    btoi
    frame_dig -2
    btoi
    frame_dig -1
    btoi
    uncover 3
    cover 4
    callsub pcg64_random
    cover 2
    popn 2
    retsub


// lib_pcg.pcg64.pcg64_init(seed: bytes) -> uint64, uint64:
pcg64_init:
    proto 1 2
    frame_dig -1
    len
    int 16
    ==
    assert
    frame_dig -1
    int 0
    extract_uint64
    int 1442695040888963407
    callsub __pcg32_init
    frame_dig -1
    int 8
    extract_uint64
    int 1442695040888963409
    callsub __pcg32_init
    retsub


// lib_pcg.pcg32.__pcg32_init(initial_state: uint64, incr: uint64) -> uint64:
__pcg32_init:
    proto 2 1
    int 0
    frame_dig -1
    callsub __pcg32_step
    frame_dig -2
    addw
    bury 1
    frame_dig -1
    callsub __pcg32_step
    retsub


// lib_pcg.pcg32.__pcg32_step(state: uint64, incr: uint64) -> uint64:
__pcg32_step:
    proto 2 1
    frame_dig -2
    int 6364136223846793005
    mulw
    bury 1
    frame_dig -1
    addw
    bury 1
    retsub


// lib_pcg.pcg64.pcg64_random(state.0: uint64, state.1: uint64, lower_bound: uint64, upper_bound: uint64, length: uint64) -> uint64, uint64, bytes:
pcg64_random:
    proto 5 3
    byte ""
    dupn 3
    byte 0x0000
    frame_dig -3
    bnz pcg64_random_else_body@7
    frame_dig -2
    bnz pcg64_random_else_body@7
    int 0
    frame_bury 2

pcg64_random_for_header@3:
    frame_dig 2
    frame_dig -1
    <
    bz pcg64_random_after_if_else@20
    frame_dig -5
    frame_dig -4
    callsub __pcg64_unbounded_random
    cover 2
    frame_bury -4
    frame_bury -5
    frame_dig 4
    extract 2 0
    swap
    itob
    concat
    dup
    len
    int 8
    /
    itob
    extract 6 2
    swap
    concat
    frame_bury 4
    frame_dig 2
    int 1
    +
    frame_bury 2
    b pcg64_random_for_header@3

pcg64_random_else_body@7:
    frame_dig -2
    bz pcg64_random_else_body@9
    frame_dig -2
    int 1
    >
    assert
    frame_dig -2
    int 1
    -
    frame_dig -3
    >
    assert
    frame_dig -2
    frame_dig -3
    -
    frame_bury 0
    b pcg64_random_after_if_else@10

pcg64_random_else_body@9:
    frame_dig -3
    int 18446744073709551615
    <
    assert
    frame_dig -3
    itob
    byte 0x010000000000000000
    swap
    b-
    btoi
    frame_bury 0

pcg64_random_after_if_else@10:
    frame_dig 0
    dup
    callsub __uint64_twos
    swap
    %
    frame_bury 3
    int 0
    frame_bury 2

pcg64_random_for_header@11:
    frame_dig 2
    frame_dig -1
    <
    bz pcg64_random_after_for@19

pcg64_random_while_top@13:
    frame_dig -5
    frame_dig -4
    callsub __pcg64_unbounded_random
    dup
    cover 3
    frame_bury 1
    frame_bury -4
    frame_bury -5
    frame_dig 3
    >=
    bz pcg64_random_while_top@13
    frame_dig 4
    extract 2 0
    frame_dig 1
    frame_dig 0
    %
    frame_dig -3
    +
    itob
    concat
    dup
    len
    int 8
    /
    itob
    extract 6 2
    swap
    concat
    frame_bury 4
    frame_dig 2
    int 1
    +
    frame_bury 2
    b pcg64_random_for_header@11

pcg64_random_after_for@19:

pcg64_random_after_if_else@20:
    frame_dig -5
    frame_dig -4
    frame_dig 4
    frame_bury 2
    frame_bury 1
    frame_bury 0
    retsub


// lib_pcg.pcg64.__pcg64_unbounded_random(state.0: uint64, state.1: uint64) -> uint64, uint64, uint64:
__pcg64_unbounded_random:
    proto 2 3
    frame_dig -2
    int 1442695040888963407
    callsub __pcg32_step
    dup
    !
    int 1442695040888963409
    swap
    shl
    frame_dig -1
    swap
    callsub __pcg32_step
    frame_dig -2
    callsub __pcg32_output
    int 32
    shl
    frame_dig -1
    callsub __pcg32_output
    |
    retsub


// lib_pcg.pcg32.__pcg32_output(state: uint64) -> uint64:
__pcg32_output:
    proto 1 1
    frame_dig -1
    int 18
    shr
    frame_dig -1
    ^
    int 27
    shr
    int 4294967295
    &
    frame_dig -1
    int 59
    shr
    dup
    ~
    int 1
    addw
    bury 1
    dig 2
    uncover 2
    shr
    cover 2
    int 31
    &
    shl
    int 4294967295
    &
    |
    retsub


// lib_pcg.pcg32.__uint64_twos(value: uint64) -> uint64:
__uint64_twos:
    proto 1 1
    frame_dig -1
    ~
    int 1
    addw
    bury 1
    retsub


// smart_contracts.lib_pcg64_exposer.contract.LibPcg64ExposerAlgopy.update() -> void:
update:
    proto 0 0
    txn Sender
    global CreatorAddress
    ==
    assert
    retsub
