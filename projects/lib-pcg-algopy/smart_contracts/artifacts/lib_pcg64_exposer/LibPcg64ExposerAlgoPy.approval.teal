#pragma version 11
#pragma typetrack false

// algopy.arc4.ARC4Contract.approval_program() -> uint64:
main:
    intcblock 1 0 6364136223846793005 4294967295 1442695040888963407 1442695040888963409
    txn NumAppArgs
    bz main_bare_routing@5
    pushbytes 0xba5682ce // method "bounded_rand_uint64(byte[16],uint64,uint64,uint16)uint64[]"
    txna ApplicationArgs 0
    match main_bounded_rand_uint64_route@3
    err

main_bounded_rand_uint64_route@3:
    txn OnCompletion
    !
    txn ApplicationID
    &&
    assert // OnCompletion must be NoOp && can only call when not creating
    b bounded_rand_uint64

main_bare_routing@5:
    intc_1 // NoOp
    pushint 4 // UpdateApplication
    txn OnCompletion
    match main___algopy_default_create@6 main_update@7
    err

main_update@7:
    txn ApplicationID
    assert // can only call when not creating
    txn Sender
    global CreatorAddress
    ==
    return

main___algopy_default_create@6:
    txn ApplicationID
    !
    return // on error: can only call when creating


// lib_pcg.pcg64.__pcg64_unbounded_random(state.0: uint64, state.1: uint64) -> uint64, uint64, uint64:
__pcg64_unbounded_random:
    proto 2 3
    frame_dig -2
    intc_2 // 6364136223846793005
    mulw
    bury 1
    intc 4 // 1442695040888963407
    addw
    bury 1
    dup
    !
    intc 5 // 1442695040888963409
    swap
    shl
    frame_dig -1
    intc_2 // 6364136223846793005
    mulw
    bury 1
    addw
    bury 1
    frame_dig -2
    pushint 18 // 18
    shr
    frame_dig -2
    ^
    pushint 27 // 27
    shr
    intc_3 // 4294967295
    &
    frame_dig -2
    pushint 59 // 59
    shr
    dup2
    shr
    swap
    ~
    intc_0 // 1
    addw
    bury 1
    pushint 31 // 31
    &
    uncover 2
    swap
    shl
    intc_3 // 4294967295
    &
    |
    pushint 32 // 32
    shl
    frame_dig -1
    pushint 18 // 18
    shr
    frame_dig -1
    ^
    pushint 27 // 27
    shr
    intc_3 // 4294967295
    &
    frame_dig -1
    pushint 59 // 59
    shr
    dup2
    shr
    swap
    ~
    intc_0 // 1
    addw
    bury 1
    pushint 31 // 31
    &
    uncover 2
    swap
    shl
    intc_3 // 4294967295
    &
    |
    |
    retsub


// smart_contracts.lib_pcg64_exposer.contract.LibPcg64ExposerAlgoPy.bounded_rand_uint64[routing]() -> void:
bounded_rand_uint64:
    pushbytes ""
    dupn 5
    txna ApplicationArgs 1
    txna ApplicationArgs 2
    txna ApplicationArgs 3
    txna ApplicationArgs 4
    dig 3
    len
    pushint 16 // 16
    ==
    assert
    dig 3
    intc_1 // 0
    extract_uint64
    intc_1 // 0
    intc_2 // 6364136223846793005
    mulw
    bury 1
    dup
    intc 4 // 1442695040888963407
    addw
    bury 1
    uncover 2
    addw
    bury 1
    intc_2 // 6364136223846793005
    mulw
    bury 1
    intc 4 // 1442695040888963407
    addw
    cover 6
    pop
    uncover 4
    pushint 8 // 8
    extract_uint64
    swap
    intc 5 // 1442695040888963409
    addw
    bury 1
    addw
    bury 1
    intc_2 // 6364136223846793005
    mulw
    bury 1
    intc 5 // 1442695040888963409
    addw
    cover 4
    pop
    uncover 2
    btoi
    dup
    cover 3
    uncover 2
    btoi
    cover 2
    swap
    btoi
    swap
    pushbytes 0x0000
    swap
    bnz bounded_rand_uint64_else_body@9
    dig 2
    bnz bounded_rand_uint64_else_body@9
    intc_1 // 0
    dig 5
    bury 9
    dig 6
    bury 10
    bury 10

bounded_rand_uint64_for_header@6:
    dig 9
    dig 2
    <
    bz bounded_rand_uint64_after_if_else@19
    dig 8
    dig 8
    callsub __pcg64_unbounded_random
    cover 2
    bury 10
    bury 10
    itob
    dig 1
    dup
    uncover 2
    concat // on error: max array length exceeded
    swap
    intc_1 // 0
    extract_uint16
    intc_0 // 1
    +
    itob
    extract 6 2
    replace2 0
    bury 1
    dig 9
    intc_0 // 1
    +
    bury 10
    b bounded_rand_uint64_for_header@6

bounded_rand_uint64_after_if_else@19:
    pushbytes 0x151f7c75
    dig 1
    concat
    log
    intc_0 // 1
    return

bounded_rand_uint64_else_body@9:
    dig 2
    bz bounded_rand_uint64_else_body@11
    dig 2
    dup
    intc_0 // 1
    >
    assert
    dup
    intc_0 // 1
    -
    dig 5
    dup
    uncover 2
    <
    assert
    -
    bury 12

bounded_rand_uint64_after_if_else@12:
    dig 11
    dup
    ~
    intc_0 // 1
    addw
    bury 1
    swap
    %
    bury 7
    intc_1 // 0
    dig 5
    bury 9
    dig 6
    bury 10
    bury 10

bounded_rand_uint64_for_header@13:
    dig 9
    dig 2
    <
    bz bounded_rand_uint64_after_if_else@19

bounded_rand_uint64_while_top@15:
    dig 8
    dig 8
    callsub __pcg64_unbounded_random
    dup
    cover 3
    bury 14
    bury 10
    bury 10
    dig 7
    >=
    bz bounded_rand_uint64_while_top@15
    dig 10
    dig 12
    %
    dig 4
    +
    itob
    dig 1
    dup
    uncover 2
    concat // on error: max array length exceeded
    swap
    intc_1 // 0
    extract_uint16
    intc_0 // 1
    +
    itob
    extract 6 2
    replace2 0
    bury 1
    dig 9
    intc_0 // 1
    +
    bury 10
    b bounded_rand_uint64_for_header@13

bounded_rand_uint64_else_body@11:
    dig 3
    dup
    pushint 18446744073709551615 // 18446744073709551615
    <
    assert
    itob
    pushbytes 0x010000000000000000
    swap
    b-
    btoi
    bury 12
    b bounded_rand_uint64_after_if_else@12
