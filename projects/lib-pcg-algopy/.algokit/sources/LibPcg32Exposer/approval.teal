#pragma version 10

smart_contracts.lib_pcg32_exposer.contract.LibPcg32Exposer.approval_program:
    // smart_contracts/lib_pcg32_exposer/contract.py:6
    // class LibPcg32Exposer(arc4.ARC4Contract):
    txn NumAppArgs
    bz main_bare_routing@7
    method "bounded_rand_uint32(uint64,uint32,uint32,uint16)uint32[]"
    method "bounded_rand_uint16(uint64,uint16,uint16,uint16)uint16[]"
    method "bounded_rand_uint8(uint64,uint8,uint8,uint16)uint8[]"
    txna ApplicationArgs 0
    match main_bounded_rand_uint32_route@2 main_bounded_rand_uint16_route@3 main_bounded_rand_uint8_route@4
    err // reject transaction

main_bounded_rand_uint32_route@2:
    // smart_contracts/lib_pcg32_exposer/contract.py:7
    // @arc4.abimethod
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // smart_contracts/lib_pcg32_exposer/contract.py:6
    // class LibPcg32Exposer(arc4.ARC4Contract):
    txna ApplicationArgs 1
    txna ApplicationArgs 2
    txna ApplicationArgs 3
    txna ApplicationArgs 4
    // smart_contracts/lib_pcg32_exposer/contract.py:7
    // @arc4.abimethod
    callsub bounded_rand_uint32
    byte 0x151f7c75
    swap
    concat
    log
    int 1
    return

main_bounded_rand_uint16_route@3:
    // smart_contracts/lib_pcg32_exposer/contract.py:23
    // @arc4.abimethod
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // smart_contracts/lib_pcg32_exposer/contract.py:6
    // class LibPcg32Exposer(arc4.ARC4Contract):
    txna ApplicationArgs 1
    txna ApplicationArgs 2
    txna ApplicationArgs 3
    txna ApplicationArgs 4
    // smart_contracts/lib_pcg32_exposer/contract.py:23
    // @arc4.abimethod
    callsub bounded_rand_uint16
    byte 0x151f7c75
    swap
    concat
    log
    int 1
    return

main_bounded_rand_uint8_route@4:
    // smart_contracts/lib_pcg32_exposer/contract.py:39
    // @arc4.abimethod
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // smart_contracts/lib_pcg32_exposer/contract.py:6
    // class LibPcg32Exposer(arc4.ARC4Contract):
    txna ApplicationArgs 1
    txna ApplicationArgs 2
    txna ApplicationArgs 3
    txna ApplicationArgs 4
    // smart_contracts/lib_pcg32_exposer/contract.py:39
    // @arc4.abimethod
    callsub bounded_rand_uint8
    byte 0x151f7c75
    swap
    concat
    log
    int 1
    return

main_bare_routing@7:
    // smart_contracts/lib_pcg32_exposer/contract.py:6
    // class LibPcg32Exposer(arc4.ARC4Contract):
    int 0
    int 4
    txn OnCompletion
    match main_create@8 main_update@9
    err // reject transaction

main_create@8:
    // smart_contracts/lib_pcg32_exposer/contract.py:6
    // class LibPcg32Exposer(arc4.ARC4Contract):
    txn ApplicationID
    !
    assert // is creating
    int 1
    return

main_update@9:
    // smart_contracts/lib_pcg32_exposer/contract.py:55
    // @arc4.baremethod(allow_actions=["UpdateApplication"])
    txn ApplicationID
    assert // is not creating
    // smart_contracts/lib_pcg32_exposer/contract.py:55-56
    // @arc4.baremethod(allow_actions=["UpdateApplication"])
    // def update(self) -> None:
    callsub update
    int 1
    return


// smart_contracts.lib_pcg32_exposer.contract.LibPcg32Exposer.bounded_rand_uint32(seed: bytes, lower_bound: bytes, upper_bound: bytes, length: bytes) -> bytes:
bounded_rand_uint32:
    // smart_contracts/lib_pcg32_exposer/contract.py:7-14
    // @arc4.abimethod
    // def bounded_rand_uint32(
    //     self,
    //     seed: arc4.UInt64,
    //     lower_bound: arc4.UInt32,
    //     upper_bound: arc4.UInt32,
    //     length: arc4.UInt16,
    // ) -> arc4.DynamicArray[arc4.UInt32]:
    proto 4 1
    // smart_contracts/lib_pcg32_exposer/contract.py:15
    // state = pcg32_init(seed.native)
    frame_dig -4
    btoi
    callsub pcg32_init
    // smart_contracts/lib_pcg32_exposer/contract.py:19
    // state, UInt64(32), lower_bound.native, upper_bound.native, length.native
    frame_dig -3
    btoi
    frame_dig -2
    btoi
    frame_dig -1
    btoi
    // smart_contracts/lib_pcg32_exposer/contract.py:18-20
    // pcg32_random(
    //     state, UInt64(32), lower_bound.native, upper_bound.native, length.native
    // )[1]
    uncover 3
    // smart_contracts/lib_pcg32_exposer/contract.py:19
    // state, UInt64(32), lower_bound.native, upper_bound.native, length.native
    int 32
    // smart_contracts/lib_pcg32_exposer/contract.py:18-20
    // pcg32_random(
    //     state, UInt64(32), lower_bound.native, upper_bound.native, length.native
    // )[1]
    cover 4
    cover 4
    callsub pcg32_random
    bury 1
    // smart_contracts/lib_pcg32_exposer/contract.py:17-21
    // return arc4.DynamicArray[arc4.UInt32].from_bytes(
    //     pcg32_random(
    //         state, UInt64(32), lower_bound.native, upper_bound.native, length.native
    //     )[1]
    // )
    retsub


// lib_pcg.xsh_rr_64_32.pcg32_init(initial_state: uint64) -> uint64:
pcg32_init:
    // lib_pcg/xsh_rr_64_32.py:12-13
    // @subroutine
    // def pcg32_init(initial_state: PCG32_STATE) -> PCG32_STATE:
    proto 1 1
    // lib_pcg/xsh_rr_64_32.py:14
    // return __pcg32_init(initial_state, UInt64(PCG_DEFAULT_INCREMENT))
    frame_dig -1
    int 1442695040888963407
    callsub __pcg32_init
    retsub


// lib_pcg.xsh_rr_64_32.__pcg32_init(initial_state: uint64, incr: uint64) -> uint64:
__pcg32_init:
    // lib_pcg/xsh_rr_64_32.py:67-68
    // @subroutine
    // def __pcg32_init(initial_state: PCG32_STATE, incr: UInt64) -> PCG32_STATE:
    proto 2 1
    // lib_pcg/xsh_rr_64_32.py:69
    // state = __pcg32_step(UInt64(0), incr)
    int 0
    frame_dig -1
    callsub __pcg32_step
    // lib_pcg/xsh_rr_64_32.py:70
    // _high_addw, state = op.addw(state, initial_state)
    frame_dig -2
    addw
    bury 1
    // lib_pcg/xsh_rr_64_32.py:72
    // return __pcg32_step(state, incr)
    frame_dig -1
    callsub __pcg32_step
    retsub


// lib_pcg.xsh_rr_64_32.__pcg32_step(state: uint64, incr: uint64) -> uint64:
__pcg32_step:
    // lib_pcg/xsh_rr_64_32.py:75-76
    // @subroutine
    // def __pcg32_step(state: PCG32_STATE, incr: UInt64) -> PCG32_STATE:
    proto 2 1
    // lib_pcg/xsh_rr_64_32.py:77
    // _high_mul, low_mul = op.mulw(state, PCG_DEFAULT_MULTIPLIER)
    frame_dig -2
    int 6364136223846793005
    mulw
    bury 1
    // lib_pcg/xsh_rr_64_32.py:78
    // _high_add, low_add = op.addw(low_mul, incr)
    frame_dig -1
    addw
    bury 1
    // lib_pcg/xsh_rr_64_32.py:80
    // return low_add
    retsub


// lib_pcg.xsh_rr_64_32.pcg32_random(state: uint64, bit_size: uint64, lower_bound: uint64, upper_bound: uint64, length: uint64) -> uint64, bytes:
pcg32_random:
    // lib_pcg/xsh_rr_64_32.py:17-24
    // @subroutine
    // def pcg32_random(
    //     state: PCG32_STATE,
    //     bit_size: UInt64,
    //     lower_bound: UInt64,
    //     upper_bound: UInt64,
    //     length: UInt64,
    // ) -> tuple[PCG32_STATE, Bytes]:
    proto 5 2
    byte ""
    dupn 5
    // lib_pcg/xsh_rr_64_32.py:27
    // assert length < 2**16
    frame_dig -1
    int 65536
    <
    assert
    // lib_pcg/xsh_rr_64_32.py:28
    // result += arc4.UInt16(length).bytes
    frame_dig -1
    itob
    extract 6 2
    // lib_pcg/xsh_rr_64_32.py:30
    // assert bit_size == 8 or bit_size == 16 or bit_size == 32
    frame_dig -4
    int 8
    ==
    bnz pcg32_random_bool_true@3
    frame_dig -4
    int 16
    ==
    bnz pcg32_random_bool_true@3
    frame_dig -4
    int 32
    ==
    bz pcg32_random_bool_false@4

pcg32_random_bool_true@3:
    int 1
    b pcg32_random_bool_merge@5

pcg32_random_bool_false@4:
    int 0

pcg32_random_bool_merge@5:
    // lib_pcg/xsh_rr_64_32.py:30
    // assert bit_size == 8 or bit_size == 16 or bit_size == 32
    assert
    // lib_pcg/xsh_rr_64_32.py:31
    // byte_size = bit_size >> 3
    frame_dig -4
    int 3
    shr
    dup
    frame_bury 1
    // lib_pcg/xsh_rr_64_32.py:32
    // truncate_start_cached = 8 - byte_size
    int 8
    swap
    -
    frame_bury 5
    // lib_pcg/xsh_rr_64_32.py:34
    // if lower_bound == 0 and upper_bound == 0:
    frame_dig -3
    bnz pcg32_random_else_body@13
    frame_dig -2
    bnz pcg32_random_else_body@13
    // lib_pcg/xsh_rr_64_32.py:35
    // for i in urange(length):  # noqa: B007
    int 0
    frame_bury 3

pcg32_random_for_header@8:
    // lib_pcg/xsh_rr_64_32.py:35
    // for i in urange(length):  # noqa: B007
    frame_dig 3
    frame_dig -1
    <
    bz pcg32_random_after_if_else@27
    // lib_pcg/xsh_rr_64_32.py:36
    // state, n = __pcg32_random(state)
    frame_dig -5
    callsub __pcg32_random
    swap
    frame_bury -5
    // lib_pcg/xsh_rr_64_32.py:38
    // result += op.extract(op.itob(n), truncate_start_cached, byte_size)
    itob
    frame_dig 5
    frame_dig 1
    extract3
    frame_dig 6
    swap
    concat
    frame_bury 6
    // lib_pcg/xsh_rr_64_32.py:35
    // for i in urange(length):  # noqa: B007
    frame_dig 3
    int 1
    +
    frame_bury 3
    b pcg32_random_for_header@8

pcg32_random_else_body@13:
    // lib_pcg/xsh_rr_64_32.py:40
    // if upper_bound != 0:
    frame_dig -2
    bz pcg32_random_else_body@15
    // lib_pcg/xsh_rr_64_32.py:41
    // assert upper_bound > 1
    frame_dig -2
    int 1
    >
    assert
    // lib_pcg/xsh_rr_64_32.py:42
    // assert upper_bound < (1 << bit_size)
    int 1
    frame_dig -4
    shl
    frame_dig -2
    >
    assert
    // lib_pcg/xsh_rr_64_32.py:43
    // assert lower_bound < (upper_bound - 1)
    frame_dig -2
    int 1
    -
    frame_dig -3
    >
    assert
    // lib_pcg/xsh_rr_64_32.py:45
    // absolute_bound = upper_bound - lower_bound
    frame_dig -2
    frame_dig -3
    -
    frame_bury 0
    b pcg32_random_after_if_else@16

pcg32_random_else_body@15:
    // lib_pcg/xsh_rr_64_32.py:47
    // assert lower_bound < ((1 << bit_size) - 1)
    int 1
    frame_dig -4
    shl
    dup
    int 1
    -
    frame_dig -3
    >
    assert
    // lib_pcg/xsh_rr_64_32.py:49
    // absolute_bound = (1 << bit_size) - lower_bound
    frame_dig -3
    -
    frame_bury 0

pcg32_random_after_if_else@16:
    // lib_pcg/xsh_rr_64_32.py:51
    // threshold = __mask_to_32bits(__twos(absolute_bound)) % absolute_bound
    frame_dig 0
    dup
    callsub __twos
    callsub __mask_to_32bits
    swap
    %
    frame_bury 4
    // lib_pcg/xsh_rr_64_32.py:53
    // for i in urange(length):  # noqa: B007
    int 0
    frame_bury 3

pcg32_random_for_header@17:
    // lib_pcg/xsh_rr_64_32.py:53
    // for i in urange(length):  # noqa: B007
    frame_dig 3
    frame_dig -1
    <
    bz pcg32_random_after_for@26

pcg32_random_while_top@19:
    // lib_pcg/xsh_rr_64_32.py:55
    // state, candidate = __pcg32_random(state)
    frame_dig -5
    callsub __pcg32_random
    dup
    cover 2
    frame_bury 2
    frame_bury -5
    // lib_pcg/xsh_rr_64_32.py:56
    // if candidate >= threshold:
    frame_dig 4
    >=
    bz pcg32_random_while_top@19
    // lib_pcg/xsh_rr_64_32.py:59
    // op.itob((candidate % absolute_bound) + lower_bound),
    frame_dig 2
    frame_dig 0
    %
    frame_dig -3
    +
    itob
    // lib_pcg/xsh_rr_64_32.py:58-62
    // result += op.extract(
    //     op.itob((candidate % absolute_bound) + lower_bound),
    //     truncate_start_cached,
    //     byte_size,
    // )
    frame_dig 5
    frame_dig 1
    extract3
    frame_dig 6
    swap
    concat
    frame_bury 6
    // lib_pcg/xsh_rr_64_32.py:53
    // for i in urange(length):  # noqa: B007
    frame_dig 3
    int 1
    +
    frame_bury 3
    b pcg32_random_for_header@17

pcg32_random_after_for@26:

pcg32_random_after_if_else@27:
    // lib_pcg/xsh_rr_64_32.py:64
    // return state, result
    frame_dig -5
    frame_dig 6
    frame_bury 1
    frame_bury 0
    retsub


// lib_pcg.xsh_rr_64_32.__pcg32_random(state: uint64) -> uint64, uint64:
__pcg32_random:
    // lib_pcg/xsh_rr_64_32.py:83-84
    // @subroutine
    // def __pcg32_random(state: PCG32_STATE) -> tuple[PCG32_STATE, UInt64]:
    proto 1 2
    // lib_pcg/xsh_rr_64_32.py:85
    // return __pcg32_step(state, UInt64(PCG_DEFAULT_INCREMENT)), __pcg32_output(state)
    frame_dig -1
    int 1442695040888963407
    callsub __pcg32_step
    frame_dig -1
    callsub __pcg32_output
    retsub


// lib_pcg.xsh_rr_64_32.__pcg32_output(value: uint64) -> uint64:
__pcg32_output:
    // lib_pcg/xsh_rr_64_32.py:88-89
    // @subroutine
    // def __pcg32_output(value: UInt64) -> UInt64:
    proto 1 1
    // lib_pcg/xsh_rr_64_32.py:91
    // __mask_to_32bits(((value >> 18) ^ value) >> 27), value >> 59
    frame_dig -1
    int 18
    shr
    frame_dig -1
    ^
    int 27
    shr
    callsub __mask_to_32bits
    frame_dig -1
    int 59
    shr
    // lib_pcg/xsh_rr_64_32.py:90-92
    // return __pcg32_rotation(
    //     __mask_to_32bits(((value >> 18) ^ value) >> 27), value >> 59
    // )
    callsub __pcg32_rotation
    retsub


// lib_pcg.xsh_rr_64_32.__mask_to_32bits(value: uint64) -> uint64:
__mask_to_32bits:
    // lib_pcg/xsh_rr_64_32.py:107-108
    // @subroutine
    // def __mask_to_32bits(value: UInt64) -> UInt64:
    proto 1 1
    // lib_pcg/xsh_rr_64_32.py:109
    // return value & ((2**32) - 1)
    frame_dig -1
    int 4294967295
    &
    retsub


// lib_pcg.xsh_rr_64_32.__pcg32_rotation(value: uint64, rot: uint64) -> uint64:
__pcg32_rotation:
    // lib_pcg/xsh_rr_64_32.py:95-96
    // @subroutine
    // def __pcg32_rotation(value: UInt64, rot: UInt64) -> UInt64:
    proto 2 1
    // lib_pcg/xsh_rr_64_32.py:97
    // return (value >> rot) | __mask_to_32bits(value << (__twos(rot) & 31))
    frame_dig -2
    frame_dig -1
    shr
    frame_dig -1
    callsub __twos
    int 31
    &
    frame_dig -2
    swap
    shl
    callsub __mask_to_32bits
    |
    retsub


// lib_pcg.xsh_rr_64_32.__twos(value: uint64) -> uint64:
__twos:
    // lib_pcg/xsh_rr_64_32.py:100-101
    // @subroutine
    // def __twos(value: UInt64) -> UInt64:
    proto 1 1
    // lib_pcg/xsh_rr_64_32.py:102
    // addw_high, addw_low = op.addw(~value, 1)
    frame_dig -1
    ~
    int 1
    addw
    bury 1
    // lib_pcg/xsh_rr_64_32.py:104
    // return addw_low
    retsub


// smart_contracts.lib_pcg32_exposer.contract.LibPcg32Exposer.bounded_rand_uint16(seed: bytes, lower_bound: bytes, upper_bound: bytes, length: bytes) -> bytes:
bounded_rand_uint16:
    // smart_contracts/lib_pcg32_exposer/contract.py:23-30
    // @arc4.abimethod
    // def bounded_rand_uint16(
    //     self,
    //     seed: arc4.UInt64,
    //     lower_bound: arc4.UInt16,
    //     upper_bound: arc4.UInt16,
    //     length: arc4.UInt16,
    // ) -> arc4.DynamicArray[arc4.UInt16]:
    proto 4 1
    // smart_contracts/lib_pcg32_exposer/contract.py:31
    // state = pcg32_init(seed.native)
    frame_dig -4
    btoi
    callsub pcg32_init
    // smart_contracts/lib_pcg32_exposer/contract.py:35
    // state, UInt64(16), lower_bound.native, upper_bound.native, length.native
    frame_dig -3
    btoi
    frame_dig -2
    btoi
    frame_dig -1
    btoi
    // smart_contracts/lib_pcg32_exposer/contract.py:34-36
    // pcg32_random(
    //     state, UInt64(16), lower_bound.native, upper_bound.native, length.native
    // )[1]
    uncover 3
    // smart_contracts/lib_pcg32_exposer/contract.py:35
    // state, UInt64(16), lower_bound.native, upper_bound.native, length.native
    int 16
    // smart_contracts/lib_pcg32_exposer/contract.py:34-36
    // pcg32_random(
    //     state, UInt64(16), lower_bound.native, upper_bound.native, length.native
    // )[1]
    cover 4
    cover 4
    callsub pcg32_random
    bury 1
    // smart_contracts/lib_pcg32_exposer/contract.py:33-37
    // return arc4.DynamicArray[arc4.UInt16].from_bytes(
    //     pcg32_random(
    //         state, UInt64(16), lower_bound.native, upper_bound.native, length.native
    //     )[1]
    // )
    retsub


// smart_contracts.lib_pcg32_exposer.contract.LibPcg32Exposer.bounded_rand_uint8(seed: bytes, lower_bound: bytes, upper_bound: bytes, length: bytes) -> bytes:
bounded_rand_uint8:
    // smart_contracts/lib_pcg32_exposer/contract.py:39-46
    // @arc4.abimethod
    // def bounded_rand_uint8(
    //     self,
    //     seed: arc4.UInt64,
    //     lower_bound: arc4.UInt8,
    //     upper_bound: arc4.UInt8,
    //     length: arc4.UInt16,
    // ) -> arc4.DynamicArray[arc4.UInt8]:
    proto 4 1
    // smart_contracts/lib_pcg32_exposer/contract.py:47
    // state = pcg32_init(seed.native)
    frame_dig -4
    btoi
    callsub pcg32_init
    // smart_contracts/lib_pcg32_exposer/contract.py:51
    // state, UInt64(8), lower_bound.native, upper_bound.native, length.native
    frame_dig -3
    btoi
    frame_dig -2
    btoi
    frame_dig -1
    btoi
    // smart_contracts/lib_pcg32_exposer/contract.py:50-52
    // pcg32_random(
    //     state, UInt64(8), lower_bound.native, upper_bound.native, length.native
    // )[1]
    uncover 3
    // smart_contracts/lib_pcg32_exposer/contract.py:51
    // state, UInt64(8), lower_bound.native, upper_bound.native, length.native
    int 8
    // smart_contracts/lib_pcg32_exposer/contract.py:50-52
    // pcg32_random(
    //     state, UInt64(8), lower_bound.native, upper_bound.native, length.native
    // )[1]
    cover 4
    cover 4
    callsub pcg32_random
    bury 1
    // smart_contracts/lib_pcg32_exposer/contract.py:49-53
    // return arc4.DynamicArray[arc4.UInt8].from_bytes(
    //     pcg32_random(
    //         state, UInt64(8), lower_bound.native, upper_bound.native, length.native
    //     )[1]
    // )
    retsub


// smart_contracts.lib_pcg32_exposer.contract.LibPcg32Exposer.update() -> void:
update:
    // smart_contracts/lib_pcg32_exposer/contract.py:55-56
    // @arc4.baremethod(allow_actions=["UpdateApplication"])
    // def update(self) -> None:
    proto 0 0
    // smart_contracts/lib_pcg32_exposer/contract.py:57
    // assert Txn.sender == Global.creator_address
    txn Sender
    global CreatorAddress
    ==
    assert
    retsub