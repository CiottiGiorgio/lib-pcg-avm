# flake8: noqa
# fmt: off
# mypy: ignore-errors
# This file was automatically generated by algokit-client-generator.
# DO NOT MODIFY IT BY HAND.
# requires: algokit-utils@^3.0.0

# common
import dataclasses
import typing
# core algosdk
import algosdk
from algosdk.transaction import OnComplete
from algosdk.atomic_transaction_composer import TransactionSigner
from algosdk.source_map import SourceMap
from algosdk.transaction import Transaction
from algosdk.v2client.models import SimulateTraceConfig
# utils
import algokit_utils
from algokit_utils import AlgorandClient as _AlgoKitAlgorandClient

_APP_SPEC_JSON = r"""{"arcs": [4, 56], "bareActions": {"call": [], "create": []}, "methods": [{"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "byte[8]", "name": "seed"}, {"type": "uint32", "name": "lower_bound"}, {"type": "uint32", "name": "upper_bound"}, {"type": "uint16", "name": "length"}], "name": "bounded_rand_uint32", "returns": {"type": "uint32[]"}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "byte[8]", "name": "seed"}, {"type": "uint16", "name": "lower_bound"}, {"type": "uint16", "name": "upper_bound"}, {"type": "uint16", "name": "length"}], "name": "bounded_rand_uint16", "returns": {"type": "uint16[]"}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "byte[8]", "name": "seed"}, {"type": "uint8", "name": "lower_bound"}, {"type": "uint8", "name": "upper_bound"}, {"type": "uint16", "name": "length"}], "name": "bounded_rand_uint8", "returns": {"type": "uint8[]"}}, {"actions": {"call": [], "create": ["NoOp"]}, "args": [], "name": "createApplication", "returns": {"type": "void"}}, {"actions": {"call": ["UpdateApplication"], "create": []}, "args": [], "name": "updateApplication", "returns": {"type": "void"}}], "name": "LibPcg32ExposerTs", "state": {"keys": {"box": {}, "global": {}, "local": {}}, "maps": {"box": {}, "global": {}, "local": {}}, "schema": {"global": {"bytes": 0, "ints": 0}, "local": {"bytes": 0, "ints": 0}}}, "structs": {}, "byteCode": {"approval": "CiAIAQIIAAQQz4Keu+/v3oIUICYDAAIACgQVH3x1MRgUgQYLMRkIjQwBnAAAAAAAAAG7AAABiQAAAAAAAAAAAAAAKjYaBEkVIxJEFzYaA0kVIQQSRBc2GgJJFSEEEkQXNhoBSRUkEkSIAA9JFSEEChZXBgJMUFCwIkOKBAEoSYv/iARKjACL/Iv9i/6LAIgD7YwBiwE1/zT/VwAIF4wAiwE1/yQ0/zT/TwJZSTT/TFkhBAsjCFhXAgCMAEYBiSo2GgRJFSMSRBc2GgNJFSMSRBc2GgJJFSMSRBc2GgFJFSQSRIgADkkVIwoWVwYCTFBQsCJDigQBKEmL/4gDeIwAi/yL/Yv+iwCIAxyMAYsBNf80/1cACBeMAIsBNf8kNP80/08CWUk0/0xZIwsjCFhXAgCMAEYBiSo2GgRJFSMSRBc2GgNJFSISRBc2GgJJFSISRBc2GgFJFSQSRIgADEkVFlcGAkxQULAiQ4oEAShJi/+IAqqMAIv8i/2L/osAiACPjAGLATX/NP9XAAgXjACLATX/JDT/NP9PAllJNP9MWSILIwhYVwIAjABGAYmIAAIiQ4oAADIJMQASRImIAAIiQ4oAADIJMQASRIkxG0H/3YAEuER7NjYaAI4B/9AAgATtBvcKgASNfM55gATQo14eNhoAjgP+SP7E/zwAADEbQf+6gARG92UzNhoAjgH/rQCKBAEoi/yL/Yv+JIv/iAA8jAAoKCmLADX/NP9XAAgXFogC0YsANf8kNP80/08CWUk0/0xZIgsjCFhXAgBJFRZXBgJMUIgCukhQjACJigUBKEcIKIwAi/sjIQWUDESL/iQSSUAABov+IQUSEUlAAAaL/iEHEhFEi/6BA5GMASSLAQmMAov9JRJJQQAFi/wlEhBBADcljASLBIv7DEEAKYv/iAD8jAWLBVcACBeM/4sAiwVXCAgXFosCiwFYUIwAiwQiCIwEQv/PQgCWi/wlE0EAH4v8Ig1Ei/wii/6QDESL/Yv8IgkMRIv8i/0JjANCABOL/SKL/pAiCQxEIov+kIv9CYwDiwOIAHWIAIeLAxiMBiWMB4sHi/sMQQBFIkEAOIv/iAB7jAiLCFcACBeM/4sIVwgIF4sGD0EAGosAiwhXCAgXiwMYi/0IFosCiwFYUIwAQgADQv/EiwciCIwHQv+zKCgpi/8WiAGLiwBJFRZXBgJMUIgBi0hQjABGCImKAQEoSYv/HCIejACMAYsAjABGAYmKAQGL/4H/////DxqJigEBIQaL/4gAPhaL/4gAAxZQiYoBAShJi/+BEpGL/xuBG5GI/82MAIv/gTuRjAGLAIsBkYsAiwGI/6OBHxqQiP+xGYwARgGJigIBKEcDi/+Brf7V5NSF/ahYHYwAjAGLAIv+HowCjAOLAowARgOJigEBi/+IAKmJigQBKIv8i/2L/iEFi/+I/iSMACgoKYsANf80/1cACBcWiAC5iwA1/yQ0/zT/TwJZSTT/TFkiCyMIWFcCAEkVIwoWVwYCTFCIAKBIUIwAiYoBAYv/iABRiYoEASiL/Iv9i/4hB4v/iP3MjAAoKCmLADX/NP9XAAgXFogAYYsANf8kNP80/08CWUk0/0xZIgsjCFhXAgBJFSEEChZXBgJMUIgAR0hQjACJigEBi/8VJBJEIQaL/xeIAAGJigIBKEcCi/4liP8KjACLAIv/HowBjAKL/osBiP74jABGAomKBAOL/Iv/UIv9i/6JigQDi/yL/lCM/Iv/SRWL/hcIFlcGAoz+i/1MUIz9i/yL/Yv+iQ==", "clear": "Cg=="}, "compilerInfo": {"compiler": "algod", "compilerVersion": {"commitHash": "6b940281", "major": 4, "minor": 0, "patch": 2}}, "desc": "", "source": {"approval": "", "clear": "I3ByYWdtYSB2ZXJzaW9uIDEw"}, "sourceInfo": {"approval": {"pcOffsetMethod": "none", "sourceInfo": [{"pc": [0], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:4", "teal": 1}, {"pc": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:4", "teal": 2}, {"pc": [19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:4", "teal": 3}, {"pc": [30, 31], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:4", "teal": 15}, {"pc": [32], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:4", "teal": 16}, {"pc": [33, 34], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:4", "teal": 17}, {"pc": [35], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:4", "teal": 18}, {"pc": [36, 37], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:4", "teal": 19}, {"pc": [38], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:4", "teal": 20}, {"pc": [39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:4", "teal": 21}, {"pc": [65], "errorMessage": "The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?", "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:4", "teal": 25}, {"pc": [66], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:6", "teal": 30}, {"pc": [67, 68, 69], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:6", "teal": 33}, {"pc": [70], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:6", "teal": 34}, {"pc": [71], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:6", "teal": 35}, {"pc": [72], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:6", "teal": 36}, {"pc": [73], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:6", "teal": 37}, {"pc": [74], "errorMessage": "argument 0 (length) for bounded_rand_uint32 must be a uint16", "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:6", "teal": 40}, {"pc": [75], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:6", "teal": 41}, {"pc": [76, 77, 78], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:6", "teal": 44}, {"pc": [79], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:6", "teal": 45}, {"pc": [80], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:6", "teal": 46}, {"pc": [81, 82], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:6", "teal": 47}, {"pc": [83], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:6", "teal": 48}, {"pc": [84], "errorMessage": "argument 1 (upper_bound) for bounded_rand_uint32 must be a uint32", "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:6", "teal": 51}, {"pc": [85], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:6", "teal": 52}, {"pc": [86, 87, 88], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:6", "teal": 55}, {"pc": [89], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:6", "teal": 56}, {"pc": [90], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:6", "teal": 57}, {"pc": [91, 92], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:6", "teal": 58}, {"pc": [93], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:6", "teal": 59}, {"pc": [94], "errorMessage": "argument 2 (lower_bound) for bounded_rand_uint32 must be a uint32", "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:6", "teal": 62}, {"pc": [95], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:6", "teal": 63}, {"pc": [96, 97, 98], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:6", "teal": 66}, {"pc": [99], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:6", "teal": 67}, {"pc": [100], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:6", "teal": 68}, {"pc": [101], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:6", "teal": 69}, {"pc": [102], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:6", "teal": 70}, {"pc": [103], "errorMessage": "argument 3 (seed) for bounded_rand_uint32 must be a byte[8]", "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:6", "teal": 73}, {"pc": [104, 105, 106], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:6", "teal": 76}, {"pc": [107], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:6", "teal": 77}, {"pc": [108], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:6", "teal": 78}, {"pc": [109, 110], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:6", "teal": 79}, {"pc": [111], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:6", "teal": 80}, {"pc": [112], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:6", "teal": 81}, {"pc": [113, 114, 115], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:6", "teal": 82}, {"pc": [116], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:6", "teal": 83}, {"pc": [117], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:6", "teal": 84}, {"pc": [118], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:6", "teal": 85}, {"pc": [119], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:6", "teal": 86}, {"pc": [120], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:6", "teal": 87}, {"pc": [121], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:6", "teal": 88}, {"pc": [122, 123, 124], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:6", "teal": 92}, {"pc": [125], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:6", "teal": 95}, {"pc": [126], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:6", "teal": 96}, {"pc": [127, 128], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:7", "teal": 100}, {"pc": [129, 130, 131], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:7", "teal": 101}, {"pc": [132, 133], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:7", "teal": 102}, {"pc": [134, 135], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:10", "teal": 106}, {"pc": [136, 137], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:10", "teal": 107}, {"pc": [138, 139], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:10", "teal": 108}, {"pc": [140, 141], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:10", "teal": 109}, {"pc": [142, 143, 144], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:10", "teal": 110}, {"pc": [145, 146], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:10", "teal": 111}, {"pc": [147, 148], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:11", "teal": 115}, {"pc": [149, 150], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:11", "teal": 116}, {"pc": [151, 152], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:11", "teal": 117}, {"pc": [153, 154, 155], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:11", "teal": 118}, {"pc": [156], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:11", "teal": 119}, {"pc": [157, 158], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:11", "teal": 120}, {"pc": [159, 160], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:13", "teal": 124}, {"pc": [161, 162], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:13", "teal": 125}, {"pc": [163], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:13", "teal": 126}, {"pc": [164, 165], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:13", "teal": 127}, {"pc": [166, 167], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:13", "teal": 128}, {"pc": [168, 169], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:13", "teal": 129}, {"pc": [170], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:13", "teal": 130}, {"pc": [171], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:13", "teal": 131}, {"pc": [172, 173], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:13", "teal": 132}, {"pc": [174], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:13", "teal": 133}, {"pc": [175], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:13", "teal": 134}, {"pc": [176, 177], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:13", "teal": 135}, {"pc": [178], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:13", "teal": 136}, {"pc": [179], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:13", "teal": 137}, {"pc": [180], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:13", "teal": 138}, {"pc": [181], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:13", "teal": 139}, {"pc": [182, 183, 184], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:13", "teal": 140}, {"pc": [185, 186], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:6", "teal": 143}, {"pc": [187, 188], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:6", "teal": 146}, {"pc": [189], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:6", "teal": 147}, {"pc": [190], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:17", "teal": 152}, {"pc": [191, 192, 193], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:17", "teal": 155}, {"pc": [194], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:17", "teal": 156}, {"pc": [195], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:17", "teal": 157}, {"pc": [196], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:17", "teal": 158}, {"pc": [197], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:17", "teal": 159}, {"pc": [198], "errorMessage": "argument 0 (length) for bounded_rand_uint16 must be a uint16", "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:17", "teal": 162}, {"pc": [199], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:17", "teal": 163}, {"pc": [200, 201, 202], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:17", "teal": 166}, {"pc": [203], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:17", "teal": 167}, {"pc": [204], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:17", "teal": 168}, {"pc": [205], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:17", "teal": 169}, {"pc": [206], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:17", "teal": 170}, {"pc": [207], "errorMessage": "argument 1 (upper_bound) for bounded_rand_uint16 must be a uint16", "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:17", "teal": 173}, {"pc": [208], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:17", "teal": 174}, {"pc": [209, 210, 211], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:17", "teal": 177}, {"pc": [212], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:17", "teal": 178}, {"pc": [213], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:17", "teal": 179}, {"pc": [214], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:17", "teal": 180}, {"pc": [215], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:17", "teal": 181}, {"pc": [216], "errorMessage": "argument 2 (lower_bound) for bounded_rand_uint16 must be a uint16", "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:17", "teal": 184}, {"pc": [217], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:17", "teal": 185}, {"pc": [218, 219, 220], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:17", "teal": 188}, {"pc": [221], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:17", "teal": 189}, {"pc": [222], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:17", "teal": 190}, {"pc": [223], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:17", "teal": 191}, {"pc": [224], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:17", "teal": 192}, {"pc": [225], "errorMessage": "argument 3 (seed) for bounded_rand_uint16 must be a byte[8]", "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:17", "teal": 195}, {"pc": [226, 227, 228], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:17", "teal": 198}, {"pc": [229], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:17", "teal": 199}, {"pc": [230], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:17", "teal": 200}, {"pc": [231], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:17", "teal": 201}, {"pc": [232], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:17", "teal": 202}, {"pc": [233], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:17", "teal": 203}, {"pc": [234, 235, 236], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:17", "teal": 204}, {"pc": [237], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:17", "teal": 205}, {"pc": [238], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:17", "teal": 206}, {"pc": [239], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:17", "teal": 207}, {"pc": [240], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:17", "teal": 208}, {"pc": [241], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:17", "teal": 209}, {"pc": [242], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:17", "teal": 210}, {"pc": [243, 244, 245], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:17", "teal": 214}, {"pc": [246], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:17", "teal": 217}, {"pc": [247], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:17", "teal": 218}, {"pc": [248, 249], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:18", "teal": 222}, {"pc": [250, 251, 252], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:18", "teal": 223}, {"pc": [253, 254], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:18", "teal": 224}, {"pc": [255, 256], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:21", "teal": 228}, {"pc": [257, 258], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:21", "teal": 229}, {"pc": [259, 260], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:21", "teal": 230}, {"pc": [261, 262], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:21", "teal": 231}, {"pc": [263, 264, 265], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:21", "teal": 232}, {"pc": [266, 267], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:21", "teal": 233}, {"pc": [268, 269], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:22", "teal": 237}, {"pc": [270, 271], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:22", "teal": 238}, {"pc": [272, 273], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:22", "teal": 239}, {"pc": [274, 275, 276], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:22", "teal": 240}, {"pc": [277], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:22", "teal": 241}, {"pc": [278, 279], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:22", "teal": 242}, {"pc": [280, 281], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:24", "teal": 246}, {"pc": [282, 283], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:24", "teal": 247}, {"pc": [284], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:24", "teal": 248}, {"pc": [285, 286], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:24", "teal": 249}, {"pc": [287, 288], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:24", "teal": 250}, {"pc": [289, 290], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:24", "teal": 251}, {"pc": [291], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:24", "teal": 252}, {"pc": [292], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:24", "teal": 253}, {"pc": [293, 294], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:24", "teal": 254}, {"pc": [295], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:24", "teal": 255}, {"pc": [296], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:24", "teal": 256}, {"pc": [297], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:24", "teal": 257}, {"pc": [298], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:24", "teal": 258}, {"pc": [299], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:24", "teal": 259}, {"pc": [300], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:24", "teal": 260}, {"pc": [301], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:24", "teal": 261}, {"pc": [302, 303, 304], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:24", "teal": 262}, {"pc": [305, 306], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:17", "teal": 265}, {"pc": [307, 308], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:17", "teal": 268}, {"pc": [309], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:17", "teal": 269}, {"pc": [310], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:28", "teal": 274}, {"pc": [311, 312, 313], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:28", "teal": 277}, {"pc": [314], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:28", "teal": 278}, {"pc": [315], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:28", "teal": 279}, {"pc": [316], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:28", "teal": 280}, {"pc": [317], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:28", "teal": 281}, {"pc": [318], "errorMessage": "argument 0 (length) for bounded_rand_uint8 must be a uint16", "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:28", "teal": 284}, {"pc": [319], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:28", "teal": 285}, {"pc": [320, 321, 322], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:28", "teal": 288}, {"pc": [323], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:28", "teal": 289}, {"pc": [324], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:28", "teal": 290}, {"pc": [325], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:28", "teal": 291}, {"pc": [326], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:28", "teal": 292}, {"pc": [327], "errorMessage": "argument 1 (upper_bound) for bounded_rand_uint8 must be a uint8", "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:28", "teal": 295}, {"pc": [328], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:28", "teal": 296}, {"pc": [329, 330, 331], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:28", "teal": 299}, {"pc": [332], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:28", "teal": 300}, {"pc": [333], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:28", "teal": 301}, {"pc": [334], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:28", "teal": 302}, {"pc": [335], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:28", "teal": 303}, {"pc": [336], "errorMessage": "argument 2 (lower_bound) for bounded_rand_uint8 must be a uint8", "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:28", "teal": 306}, {"pc": [337], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:28", "teal": 307}, {"pc": [338, 339, 340], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:28", "teal": 310}, {"pc": [341], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:28", "teal": 311}, {"pc": [342], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:28", "teal": 312}, {"pc": [343], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:28", "teal": 313}, {"pc": [344], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:28", "teal": 314}, {"pc": [345], "errorMessage": "argument 3 (seed) for bounded_rand_uint8 must be a byte[8]", "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:28", "teal": 317}, {"pc": [346, 347, 348], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:28", "teal": 320}, {"pc": [349], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:28", "teal": 321}, {"pc": [350], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:28", "teal": 322}, {"pc": [351], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:28", "teal": 323}, {"pc": [352, 353, 354], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:28", "teal": 324}, {"pc": [355], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:28", "teal": 325}, {"pc": [356], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:28", "teal": 326}, {"pc": [357], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:28", "teal": 327}, {"pc": [358], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:28", "teal": 328}, {"pc": [359], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:28", "teal": 329}, {"pc": [360], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:28", "teal": 330}, {"pc": [361, 362, 363], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:28", "teal": 334}, {"pc": [364], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:28", "teal": 337}, {"pc": [365], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:28", "teal": 338}, {"pc": [366, 367], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:29", "teal": 342}, {"pc": [368, 369, 370], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:29", "teal": 343}, {"pc": [371, 372], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:29", "teal": 344}, {"pc": [373, 374], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:32", "teal": 348}, {"pc": [375, 376], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:32", "teal": 349}, {"pc": [377, 378], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:32", "teal": 350}, {"pc": [379, 380], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:32", "teal": 351}, {"pc": [381, 382, 383], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:32", "teal": 352}, {"pc": [384, 385], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:32", "teal": 353}, {"pc": [386, 387], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:33", "teal": 357}, {"pc": [388, 389], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:33", "teal": 358}, {"pc": [390, 391], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:33", "teal": 359}, {"pc": [392, 393, 394], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:33", "teal": 360}, {"pc": [395], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:33", "teal": 361}, {"pc": [396, 397], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:33", "teal": 362}, {"pc": [398, 399], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:35", "teal": 366}, {"pc": [400, 401], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:35", "teal": 367}, {"pc": [402], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:35", "teal": 368}, {"pc": [403, 404], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:35", "teal": 369}, {"pc": [405, 406], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:35", "teal": 370}, {"pc": [407, 408], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:35", "teal": 371}, {"pc": [409], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:35", "teal": 372}, {"pc": [410], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:35", "teal": 373}, {"pc": [411, 412], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:35", "teal": 374}, {"pc": [413], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:35", "teal": 375}, {"pc": [414], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:35", "teal": 376}, {"pc": [415], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:35", "teal": 377}, {"pc": [416], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:35", "teal": 378}, {"pc": [417], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:35", "teal": 379}, {"pc": [418], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:35", "teal": 380}, {"pc": [419], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:35", "teal": 381}, {"pc": [420, 421, 422], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:35", "teal": 382}, {"pc": [423, 424], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:28", "teal": 385}, {"pc": [425, 426], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:28", "teal": 388}, {"pc": [427], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:28", "teal": 389}, {"pc": [428, 429, 430], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:38", "teal": 394}, {"pc": [431], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:38", "teal": 395}, {"pc": [432], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:38", "teal": 396}, {"pc": [433, 434, 435], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:38", "teal": 400}, {"pc": [436, 437], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:40", "teal": 404}, {"pc": [438, 439], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:40", "teal": 405}, {"pc": [440], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:40", "teal": 406}, {"pc": [441], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:40", "teal": 407}, {"pc": [442], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:38", "teal": 408}, {"pc": [443, 444, 445], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:43", "teal": 413}, {"pc": [446], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:43", "teal": 414}, {"pc": [447], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:43", "teal": 415}, {"pc": [448, 449, 450], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:43", "teal": 419}, {"pc": [451, 452], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:45", "teal": 423}, {"pc": [453, 454], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:45", "teal": 424}, {"pc": [455], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:45", "teal": 425}, {"pc": [456], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:45", "teal": 426}, {"pc": [457], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:43", "teal": 427}, {"pc": [458, 459], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:4", "teal": 430}, {"pc": [460, 461, 462], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:4", "teal": 431}, {"pc": [463, 464, 465, 466, 467, 468], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:4", "teal": 432}, {"pc": [469, 470, 471], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:4", "teal": 433}, {"pc": [472, 473, 474, 475], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:4", "teal": 434}, {"pc": [476], "errorMessage": "this contract does not implement the given ABI method for create NoOp", "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:4", "teal": 437}, {"pc": [477, 478, 479, 480, 481, 482], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:4", "teal": 440}, {"pc": [483, 484, 485, 486, 487, 488], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:4", "teal": 441}, {"pc": [489, 490, 491, 492, 493, 494], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:4", "teal": 442}, {"pc": [495, 496, 497], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:4", "teal": 443}, {"pc": [498, 499, 500, 501, 502, 503, 504, 505], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:4", "teal": 444}, {"pc": [506], "errorMessage": "this contract does not implement the given ABI method for call NoOp", "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:4", "teal": 447}, {"pc": [507], "errorMessage": "this contract does not implement any ABI methods for UpdateApplication create", "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:4", "teal": 451}, {"pc": [508, 509], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:4", "teal": 454}, {"pc": [510, 511, 512], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:4", "teal": 455}, {"pc": [513, 514, 515, 516, 517, 518], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:4", "teal": 456}, {"pc": [519, 520, 521], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:4", "teal": 457}, {"pc": [522, 523, 524, 525], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:4", "teal": 458}, {"pc": [526], "errorMessage": "this contract does not implement the given ABI method for call UpdateApplication", "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:4", "teal": 461}, {"pc": [527, 528, 529], "source": "lib_pcg\\pcg32.algo.ts:130", "teal": 465}, {"pc": [530], "source": "lib_pcg\\pcg32.algo.ts:130", "teal": 468}, {"pc": [531, 532], "source": "lib_pcg\\pcg32.algo.ts:136", "teal": 472}, {"pc": [533, 534], "source": "lib_pcg\\pcg32.algo.ts:136", "teal": 473}, {"pc": [535, 536], "source": "lib_pcg\\pcg32.algo.ts:136", "teal": 474}, {"pc": [537], "source": "lib_pcg\\pcg32.algo.ts:136", "teal": 475}, {"pc": [538, 539], "source": "lib_pcg\\pcg32.algo.ts:136", "teal": 476}, {"pc": [540, 541, 542], "source": "lib_pcg\\pcg32.algo.ts:136", "teal": 477}, {"pc": [543, 544], "source": "lib_pcg\\pcg32.algo.ts:136", "teal": 478}, {"pc": [545], "source": "lib_pcg\\pcg32.algo.ts:137", "teal": 482}, {"pc": [546], "source": "lib_pcg\\pcg32.algo.ts:137", "teal": 483}, {"pc": [547], "source": "lib_pcg\\pcg32.algo.ts:137", "teal": 484}, {"pc": [548, 549], "source": "lib_pcg\\pcg32.algo.ts:137", "teal": 485}, {"pc": [550, 551], "source": "lib_pcg\\pcg32.algo.ts:137", "teal": 486}, {"pc": [552, 553], "source": "lib_pcg\\pcg32.algo.ts:137", "teal": 487}, {"pc": [554, 555, 556], "source": "lib_pcg\\pcg32.algo.ts:137", "teal": 488}, {"pc": [557], "source": "lib_pcg\\pcg32.algo.ts:137", "teal": 489}, {"pc": [558], "source": "lib_pcg\\pcg32.algo.ts:137", "teal": 490}, {"pc": [559, 560, 561], "source": "lib_pcg\\pcg32.algo.ts:137", "teal": 491}, {"pc": [562, 563], "source": "lib_pcg\\pcg32.algo.ts:137", "teal": 492}, {"pc": [564, 565], "source": "lib_pcg\\pcg32.algo.ts:137", "teal": 493}, {"pc": [566], "source": "lib_pcg\\pcg32.algo.ts:137", "teal": 494}, {"pc": [567, 568], "source": "lib_pcg\\pcg32.algo.ts:137", "teal": 495}, {"pc": [569, 570], "source": "lib_pcg\\pcg32.algo.ts:137", "teal": 496}, {"pc": [571, 572], "source": "lib_pcg\\pcg32.algo.ts:137", "teal": 497}, {"pc": [573], "source": "lib_pcg\\pcg32.algo.ts:137", "teal": 498}, {"pc": [574], "source": "lib_pcg\\pcg32.algo.ts:137", "teal": 499}, {"pc": [575, 576], "source": "lib_pcg\\pcg32.algo.ts:137", "teal": 500}, {"pc": [577], "source": "lib_pcg\\pcg32.algo.ts:137", "teal": 501}, {"pc": [578], "source": "lib_pcg\\pcg32.algo.ts:137", "teal": 502}, {"pc": [579], "source": "lib_pcg\\pcg32.algo.ts:137", "teal": 503}, {"pc": [580], "source": "lib_pcg\\pcg32.algo.ts:137", "teal": 504}, {"pc": [581], "source": "lib_pcg\\pcg32.algo.ts:137", "teal": 505}, {"pc": [582], "source": "lib_pcg\\pcg32.algo.ts:137", "teal": 506}, {"pc": [583], "source": "lib_pcg\\pcg32.algo.ts:137", "teal": 507}, {"pc": [584, 585, 586], "source": "lib_pcg\\pcg32.algo.ts:137", "teal": 508}, {"pc": [587], "source": "lib_pcg\\pcg32.algo.ts:137", "teal": 509}, {"pc": [588], "source": "lib_pcg\\pcg32.algo.ts:137", "teal": 510}, {"pc": [589], "source": "lib_pcg\\pcg32.algo.ts:137", "teal": 511}, {"pc": [590, 591, 592], "source": "lib_pcg\\pcg32.algo.ts:137", "teal": 512}, {"pc": [593], "source": "lib_pcg\\pcg32.algo.ts:137", "teal": 513}, {"pc": [594], "source": "lib_pcg\\pcg32.algo.ts:137", "teal": 514}, {"pc": [595, 596, 597], "source": "lib_pcg\\pcg32.algo.ts:137", "teal": 515}, {"pc": [598], "source": "lib_pcg\\pcg32.algo.ts:137", "teal": 516}, {"pc": [599], "source": "lib_pcg\\pcg32.algo.ts:137", "teal": 517}, {"pc": [600, 601], "source": "lib_pcg\\pcg32.algo.ts:130", "teal": 520}, {"pc": [602], "source": "lib_pcg\\pcg32.algo.ts:130", "teal": 521}, {"pc": [603, 604, 605], "source": "lib_pcg\\pcg32.algo.ts:32", "teal": 525}, {"pc": [606], "source": "lib_pcg\\pcg32.algo.ts:32", "teal": 528}, {"pc": [607, 608], "source": "lib_pcg\\pcg32.algo.ts:32", "teal": 529}, {"pc": [609], "source": "lib_pcg\\pcg32.algo.ts:39", "teal": 533}, {"pc": [610, 611], "source": "lib_pcg\\pcg32.algo.ts:39", "teal": 534}, {"pc": [612, 613], "source": "lib_pcg\\pcg32.algo.ts:41", "teal": 538}, {"pc": [614], "source": "lib_pcg\\pcg32.algo.ts:41", "teal": 539}, {"pc": [615, 616], "source": "lib_pcg\\pcg32.algo.ts:41", "teal": 540}, {"pc": [617], "source": "lib_pcg\\pcg32.algo.ts:41", "teal": 541}, {"pc": [618], "source": "lib_pcg\\pcg32.algo.ts:41", "teal": 542}, {"pc": [619], "source": "lib_pcg\\pcg32.algo.ts:41", "teal": 543}, {"pc": [620, 621], "source": "lib_pcg\\pcg32.algo.ts:45", "teal": 547}, {"pc": [622], "source": "lib_pcg\\pcg32.algo.ts:45", "teal": 548}, {"pc": [623], "source": "lib_pcg\\pcg32.algo.ts:45", "teal": 549}, {"pc": [624], "source": "lib_pcg\\pcg32.algo.ts:45", "teal": 550}, {"pc": [625, 626, 627], "source": "lib_pcg\\pcg32.algo.ts:45", "teal": 551}, {"pc": [628, 629], "source": "lib_pcg\\pcg32.algo.ts:45", "teal": 552}, {"pc": [630, 631], "source": "lib_pcg\\pcg32.algo.ts:45", "teal": 553}, {"pc": [632], "source": "lib_pcg\\pcg32.algo.ts:45", "teal": 554}, {"pc": [633], "source": "lib_pcg\\pcg32.algo.ts:45", "teal": 555}, {"pc": [634], "source": "lib_pcg\\pcg32.algo.ts:45", "teal": 558}, {"pc": [635, 636, 637], "source": "lib_pcg\\pcg32.algo.ts:45", "teal": 559}, {"pc": [638, 639], "source": "lib_pcg\\pcg32.algo.ts:45", "teal": 560}, {"pc": [640, 641], "source": "lib_pcg\\pcg32.algo.ts:45", "teal": 561}, {"pc": [642], "source": "lib_pcg\\pcg32.algo.ts:45", "teal": 562}, {"pc": [643], "source": "lib_pcg\\pcg32.algo.ts:45", "teal": 563}, {"pc": [644], "source": "lib_pcg\\pcg32.algo.ts:45", "teal": 566}, {"pc": [645, 646], "source": "lib_pcg\\pcg32.algo.ts:46", "teal": 570}, {"pc": [647, 648], "source": "lib_pcg\\pcg32.algo.ts:46", "teal": 571}, {"pc": [649], "source": "lib_pcg\\pcg32.algo.ts:46", "teal": 572}, {"pc": [650, 651], "source": "lib_pcg\\pcg32.algo.ts:46", "teal": 573}, {"pc": [652], "source": "lib_pcg\\pcg32.algo.ts:47", "teal": 577}, {"pc": [653, 654], "source": "lib_pcg\\pcg32.algo.ts:47", "teal": 578}, {"pc": [655], "source": "lib_pcg\\pcg32.algo.ts:47", "teal": 579}, {"pc": [656, 657], "source": "lib_pcg\\pcg32.algo.ts:47", "teal": 580}, {"pc": [658, 659], "source": "lib_pcg\\pcg32.algo.ts:51", "teal": 585}, {"pc": [660], "source": "lib_pcg\\pcg32.algo.ts:51", "teal": 586}, {"pc": [661], "source": "lib_pcg\\pcg32.algo.ts:51", "teal": 587}, {"pc": [662], "source": "lib_pcg\\pcg32.algo.ts:51", "teal": 588}, {"pc": [663, 664, 665], "source": "lib_pcg\\pcg32.algo.ts:51", "teal": 589}, {"pc": [666, 667], "source": "lib_pcg\\pcg32.algo.ts:51", "teal": 590}, {"pc": [668], "source": "lib_pcg\\pcg32.algo.ts:51", "teal": 591}, {"pc": [669], "source": "lib_pcg\\pcg32.algo.ts:51", "teal": 592}, {"pc": [670], "source": "lib_pcg\\pcg32.algo.ts:51", "teal": 593}, {"pc": [671, 672, 673], "source": "lib_pcg\\pcg32.algo.ts:51", "teal": 596}, {"pc": [674], "source": "lib_pcg\\pcg32.algo.ts:52", "teal": 601}, {"pc": [675, 676], "source": "lib_pcg\\pcg32.algo.ts:52", "teal": 602}, {"pc": [677, 678], "source": "lib_pcg\\pcg32.algo.ts:52", "teal": 607}, {"pc": [679, 680], "source": "lib_pcg\\pcg32.algo.ts:52", "teal": 608}, {"pc": [681], "source": "lib_pcg\\pcg32.algo.ts:52", "teal": 609}, {"pc": [682, 683, 684], "source": "lib_pcg\\pcg32.algo.ts:52", "teal": 610}, {"pc": [685, 686], "source": "lib_pcg\\pcg32.algo.ts:53", "teal": 614}, {"pc": [687, 688, 689], "source": "lib_pcg\\pcg32.algo.ts:53", "teal": 615}, {"pc": [690, 691], "source": "lib_pcg\\pcg32.algo.ts:53", "teal": 616}, {"pc": [692, 693], "source": "lib_pcg\\pcg32.algo.ts:54", "teal": 620}, {"pc": [694, 695, 696], "source": "lib_pcg\\pcg32.algo.ts:54", "teal": 621}, {"pc": [697], "source": "lib_pcg\\pcg32.algo.ts:54", "teal": 622}, {"pc": [698, 699], "source": "lib_pcg\\pcg32.algo.ts:54", "teal": 623}, {"pc": [700, 701], "source": "lib_pcg\\pcg32.algo.ts:56", "teal": 627}, {"pc": [702, 703], "source": "lib_pcg\\pcg32.algo.ts:56", "teal": 628}, {"pc": [704, 705, 706], "source": "lib_pcg\\pcg32.algo.ts:56", "teal": 629}, {"pc": [707], "source": "lib_pcg\\pcg32.algo.ts:56", "teal": 630}, {"pc": [708], "source": "lib_pcg\\pcg32.algo.ts:56", "teal": 631}, {"pc": [709, 710], "source": "lib_pcg\\pcg32.algo.ts:56", "teal": 632}, {"pc": [711, 712], "source": "lib_pcg\\pcg32.algo.ts:56", "teal": 633}, {"pc": [713], "source": "lib_pcg\\pcg32.algo.ts:56", "teal": 634}, {"pc": [714], "source": "lib_pcg\\pcg32.algo.ts:56", "teal": 635}, {"pc": [715, 716], "source": "lib_pcg\\pcg32.algo.ts:56", "teal": 636}, {"pc": [717, 718], "source": "lib_pcg\\pcg32.algo.ts:52", "teal": 641}, {"pc": [719], "source": "lib_pcg\\pcg32.algo.ts:52", "teal": 642}, {"pc": [720], "source": "lib_pcg\\pcg32.algo.ts:52", "teal": 643}, {"pc": [721, 722], "source": "lib_pcg\\pcg32.algo.ts:52", "teal": 644}, {"pc": [723, 724, 725], "source": "lib_pcg\\pcg32.algo.ts:52", "teal": 645}, {"pc": [726, 727, 728], "source": "lib_pcg\\pcg32.algo.ts:51", "teal": 648}, {"pc": [729, 730], "source": "lib_pcg\\pcg32.algo.ts:59", "teal": 654}, {"pc": [731], "source": "lib_pcg\\pcg32.algo.ts:59", "teal": 655}, {"pc": [732], "source": "lib_pcg\\pcg32.algo.ts:59", "teal": 656}, {"pc": [733, 734, 735], "source": "lib_pcg\\pcg32.algo.ts:59", "teal": 657}, {"pc": [736, 737], "source": "lib_pcg\\pcg32.algo.ts:60", "teal": 662}, {"pc": [738], "source": "lib_pcg\\pcg32.algo.ts:60", "teal": 663}, {"pc": [739], "source": "lib_pcg\\pcg32.algo.ts:60", "teal": 664}, {"pc": [740], "source": "lib_pcg\\pcg32.algo.ts:60", "teal": 665}, {"pc": [741, 742], "source": "lib_pcg\\pcg32.algo.ts:61", "teal": 669}, {"pc": [743], "source": "lib_pcg\\pcg32.algo.ts:61", "teal": 670}, {"pc": [744, 745], "source": "lib_pcg\\pcg32.algo.ts:61", "teal": 671}, {"pc": [746], "source": "lib_pcg\\pcg32.algo.ts:61", "teal": 672}, {"pc": [747], "source": "lib_pcg\\pcg32.algo.ts:61", "teal": 673}, {"pc": [748], "source": "lib_pcg\\pcg32.algo.ts:61", "teal": 674}, {"pc": [749, 750], "source": "lib_pcg\\pcg32.algo.ts:62", "teal": 678}, {"pc": [751, 752], "source": "lib_pcg\\pcg32.algo.ts:62", "teal": 679}, {"pc": [753], "source": "lib_pcg\\pcg32.algo.ts:62", "teal": 680}, {"pc": [754], "source": "lib_pcg\\pcg32.algo.ts:62", "teal": 681}, {"pc": [755], "source": "lib_pcg\\pcg32.algo.ts:62", "teal": 682}, {"pc": [756], "source": "lib_pcg\\pcg32.algo.ts:62", "teal": 683}, {"pc": [757, 758], "source": "lib_pcg\\pcg32.algo.ts:64", "teal": 687}, {"pc": [759, 760], "source": "lib_pcg\\pcg32.algo.ts:64", "teal": 688}, {"pc": [761], "source": "lib_pcg\\pcg32.algo.ts:64", "teal": 689}, {"pc": [762, 763], "source": "lib_pcg\\pcg32.algo.ts:64", "teal": 690}, {"pc": [764, 765, 766], "source": "lib_pcg\\pcg32.algo.ts:59", "teal": 691}, {"pc": [767, 768], "source": "lib_pcg\\pcg32.algo.ts:66", "teal": 696}, {"pc": [769], "source": "lib_pcg\\pcg32.algo.ts:66", "teal": 697}, {"pc": [770, 771], "source": "lib_pcg\\pcg32.algo.ts:66", "teal": 698}, {"pc": [772], "source": "lib_pcg\\pcg32.algo.ts:66", "teal": 699}, {"pc": [773], "source": "lib_pcg\\pcg32.algo.ts:66", "teal": 700}, {"pc": [774], "source": "lib_pcg\\pcg32.algo.ts:66", "teal": 701}, {"pc": [775], "source": "lib_pcg\\pcg32.algo.ts:66", "teal": 702}, {"pc": [776], "source": "lib_pcg\\pcg32.algo.ts:66", "teal": 703}, {"pc": [777], "source": "lib_pcg\\pcg32.algo.ts:68", "teal": 707}, {"pc": [778, 779], "source": "lib_pcg\\pcg32.algo.ts:68", "teal": 708}, {"pc": [780], "source": "lib_pcg\\pcg32.algo.ts:68", "teal": 709}, {"pc": [781, 782], "source": "lib_pcg\\pcg32.algo.ts:68", "teal": 710}, {"pc": [783], "source": "lib_pcg\\pcg32.algo.ts:68", "teal": 711}, {"pc": [784, 785], "source": "lib_pcg\\pcg32.algo.ts:68", "teal": 712}, {"pc": [786, 787], "source": "lib_pcg\\pcg32.algo.ts:71", "teal": 717}, {"pc": [788, 789, 790], "source": "lib_pcg\\pcg32.algo.ts:71", "teal": 718}, {"pc": [791, 792, 793], "source": "lib_pcg\\pcg32.algo.ts:71", "teal": 719}, {"pc": [794, 795], "source": "lib_pcg\\pcg32.algo.ts:71", "teal": 720}, {"pc": [796], "source": "lib_pcg\\pcg32.algo.ts:71", "teal": 721}, {"pc": [797, 798], "source": "lib_pcg\\pcg32.algo.ts:71", "teal": 722}, {"pc": [799], "source": "lib_pcg\\pcg32.algo.ts:73", "teal": 726}, {"pc": [800, 801], "source": "lib_pcg\\pcg32.algo.ts:73", "teal": 727}, {"pc": [802, 803], "source": "lib_pcg\\pcg32.algo.ts:73", "teal": 732}, {"pc": [804, 805], "source": "lib_pcg\\pcg32.algo.ts:73", "teal": 733}, {"pc": [806], "source": "lib_pcg\\pcg32.algo.ts:73", "teal": 734}, {"pc": [807, 808, 809], "source": "lib_pcg\\pcg32.algo.ts:73", "teal": 735}, {"pc": [810], "source": "lib_pcg\\pcg32.algo.ts:75", "teal": 742}, {"pc": [811, 812, 813], "source": "lib_pcg\\pcg32.algo.ts:75", "teal": 743}, {"pc": [814, 815], "source": "lib_pcg\\pcg32.algo.ts:76", "teal": 747}, {"pc": [816, 817, 818], "source": "lib_pcg\\pcg32.algo.ts:76", "teal": 748}, {"pc": [819, 820], "source": "lib_pcg\\pcg32.algo.ts:76", "teal": 749}, {"pc": [821, 822], "source": "lib_pcg\\pcg32.algo.ts:77", "teal": 753}, {"pc": [823, 824, 825], "source": "lib_pcg\\pcg32.algo.ts:77", "teal": 754}, {"pc": [826], "source": "lib_pcg\\pcg32.algo.ts:77", "teal": 755}, {"pc": [827, 828], "source": "lib_pcg\\pcg32.algo.ts:77", "teal": 756}, {"pc": [829, 830], "source": "lib_pcg\\pcg32.algo.ts:78", "teal": 761}, {"pc": [831, 832, 833], "source": "lib_pcg\\pcg32.algo.ts:78", "teal": 762}, {"pc": [834], "source": "lib_pcg\\pcg32.algo.ts:78", "teal": 763}, {"pc": [835, 836], "source": "lib_pcg\\pcg32.algo.ts:78", "teal": 764}, {"pc": [837], "source": "lib_pcg\\pcg32.algo.ts:78", "teal": 765}, {"pc": [838, 839, 840], "source": "lib_pcg\\pcg32.algo.ts:78", "teal": 766}, {"pc": [841, 842], "source": "lib_pcg\\pcg32.algo.ts:79", "teal": 771}, {"pc": [843, 844], "source": "lib_pcg\\pcg32.algo.ts:79", "teal": 772}, {"pc": [845, 846, 847], "source": "lib_pcg\\pcg32.algo.ts:79", "teal": 773}, {"pc": [848], "source": "lib_pcg\\pcg32.algo.ts:79", "teal": 774}, {"pc": [849, 850], "source": "lib_pcg\\pcg32.algo.ts:79", "teal": 775}, {"pc": [851], "source": "lib_pcg\\pcg32.algo.ts:79", "teal": 776}, {"pc": [852, 853], "source": "lib_pcg\\pcg32.algo.ts:79", "teal": 777}, {"pc": [854], "source": "lib_pcg\\pcg32.algo.ts:79", "teal": 778}, {"pc": [855], "source": "lib_pcg\\pcg32.algo.ts:79", "teal": 779}, {"pc": [856, 857], "source": "lib_pcg\\pcg32.algo.ts:79", "teal": 780}, {"pc": [858, 859], "source": "lib_pcg\\pcg32.algo.ts:79", "teal": 781}, {"pc": [860], "source": "lib_pcg\\pcg32.algo.ts:79", "teal": 782}, {"pc": [861], "source": "lib_pcg\\pcg32.algo.ts:79", "teal": 783}, {"pc": [862, 863], "source": "lib_pcg\\pcg32.algo.ts:79", "teal": 784}, {"pc": [864, 865, 866], "source": "lib_pcg\\pcg32.algo.ts:80", "teal": 785}, {"pc": [867, 868, 869], "source": "lib_pcg\\pcg32.algo.ts:75", "teal": 788}, {"pc": [870, 871], "source": "lib_pcg\\pcg32.algo.ts:73", "teal": 795}, {"pc": [872], "source": "lib_pcg\\pcg32.algo.ts:73", "teal": 796}, {"pc": [873], "source": "lib_pcg\\pcg32.algo.ts:73", "teal": 797}, {"pc": [874, 875], "source": "lib_pcg\\pcg32.algo.ts:73", "teal": 798}, {"pc": [876, 877, 878], "source": "lib_pcg\\pcg32.algo.ts:73", "teal": 799}, {"pc": [879], "source": "lib_pcg\\pcg32.algo.ts:86", "teal": 806}, {"pc": [880], "source": "lib_pcg\\pcg32.algo.ts:86", "teal": 807}, {"pc": [881], "source": "lib_pcg\\pcg32.algo.ts:86", "teal": 808}, {"pc": [882, 883], "source": "lib_pcg\\pcg32.algo.ts:86", "teal": 809}, {"pc": [884], "source": "lib_pcg\\pcg32.algo.ts:86", "teal": 810}, {"pc": [885, 886, 887], "source": "lib_pcg\\pcg32.algo.ts:86", "teal": 811}, {"pc": [888, 889], "source": "lib_pcg\\pcg32.algo.ts:86", "teal": 812}, {"pc": [890], "source": "lib_pcg\\pcg32.algo.ts:86", "teal": 813}, {"pc": [891], "source": "lib_pcg\\pcg32.algo.ts:86", "teal": 814}, {"pc": [892], "source": "lib_pcg\\pcg32.algo.ts:86", "teal": 815}, {"pc": [893, 894, 895], "source": "lib_pcg\\pcg32.algo.ts:86", "teal": 816}, {"pc": [896], "source": "lib_pcg\\pcg32.algo.ts:86", "teal": 817}, {"pc": [897], "source": "lib_pcg\\pcg32.algo.ts:86", "teal": 818}, {"pc": [898, 899, 900], "source": "lib_pcg\\pcg32.algo.ts:86", "teal": 819}, {"pc": [901], "source": "lib_pcg\\pcg32.algo.ts:86", "teal": 820}, {"pc": [902], "source": "lib_pcg\\pcg32.algo.ts:86", "teal": 821}, {"pc": [903, 904], "source": "lib_pcg\\pcg32.algo.ts:32", "teal": 824}, {"pc": [905, 906], "source": "lib_pcg\\pcg32.algo.ts:32", "teal": 827}, {"pc": [907], "source": "lib_pcg\\pcg32.algo.ts:32", "teal": 828}, {"pc": [908, 909, 910], "source": "lib_pcg\\pcg32.algo.ts:5", "teal": 832}, {"pc": [911], "source": "lib_pcg\\pcg32.algo.ts:5", "teal": 835}, {"pc": [912], "source": "lib_pcg\\pcg32.algo.ts:5", "teal": 836}, {"pc": [913, 914], "source": "lib_pcg\\pcg32.algo.ts:6", "teal": 840}, {"pc": [915], "source": "lib_pcg\\pcg32.algo.ts:6", "teal": 841}, {"pc": [916], "source": "lib_pcg\\pcg32.algo.ts:6", "teal": 842}, {"pc": [917], "source": "lib_pcg\\pcg32.algo.ts:6", "teal": 843}, {"pc": [918, 919], "source": "lib_pcg\\pcg32.algo.ts:6", "teal": 844}, {"pc": [920, 921], "source": "lib_pcg\\pcg32.algo.ts:6", "teal": 845}, {"pc": [922, 923], "source": "lib_pcg\\pcg32.algo.ts:7", "teal": 849}, {"pc": [924, 925], "source": "lib_pcg\\pcg32.algo.ts:5", "teal": 852}, {"pc": [926, 927], "source": "lib_pcg\\pcg32.algo.ts:5", "teal": 855}, {"pc": [928], "source": "lib_pcg\\pcg32.algo.ts:5", "teal": 856}, {"pc": [929, 930, 931], "source": "lib_pcg\\pcg32.algo.ts:10", "teal": 860}, {"pc": [932, 933], "source": "lib_pcg\\pcg32.algo.ts:12", "teal": 864}, {"pc": [934, 935, 936, 937, 938, 939], "source": "lib_pcg\\pcg32.algo.ts:12", "teal": 865}, {"pc": [940], "source": "lib_pcg\\pcg32.algo.ts:12", "teal": 866}, {"pc": [941], "source": "lib_pcg\\pcg32.algo.ts:10", "teal": 867}, {"pc": [942, 943, 944], "source": "lib_pcg\\pcg32.algo.ts:28", "teal": 871}, {"pc": [945, 946], "source": "lib_pcg\\consts.algo.ts:3", "teal": 877}, {"pc": [947, 948], "source": "lib_pcg\\pcg32.algo.ts:29", "teal": 878}, {"pc": [949, 950, 951], "source": "lib_pcg\\pcg32.algo.ts:29", "teal": 879}, {"pc": [952], "source": "lib_pcg\\pcg32.algo.ts:29", "teal": 880}, {"pc": [953, 954], "source": "lib_pcg\\pcg32.algo.ts:29", "teal": 884}, {"pc": [955, 956, 957], "source": "lib_pcg\\pcg32.algo.ts:29", "teal": 885}, {"pc": [958], "source": "lib_pcg\\pcg32.algo.ts:29", "teal": 886}, {"pc": [959], "source": "lib_pcg\\pcg32.algo.ts:29", "teal": 887}, {"pc": [960], "source": "lib_pcg\\pcg32.algo.ts:28", "teal": 888}, {"pc": [961, 962, 963], "source": "lib_pcg\\pcg32.algo.ts:22", "teal": 892}, {"pc": [964], "source": "lib_pcg\\pcg32.algo.ts:22", "teal": 895}, {"pc": [965], "source": "lib_pcg\\pcg32.algo.ts:22", "teal": 896}, {"pc": [966, 967], "source": "lib_pcg\\pcg32.algo.ts:23", "teal": 900}, {"pc": [968, 969], "source": "lib_pcg\\pcg32.algo.ts:23", "teal": 901}, {"pc": [970], "source": "lib_pcg\\pcg32.algo.ts:23", "teal": 902}, {"pc": [971, 972], "source": "lib_pcg\\pcg32.algo.ts:23", "teal": 903}, {"pc": [973], "source": "lib_pcg\\pcg32.algo.ts:23", "teal": 904}, {"pc": [974, 975], "source": "lib_pcg\\pcg32.algo.ts:23", "teal": 905}, {"pc": [976], "source": "lib_pcg\\pcg32.algo.ts:23", "teal": 906}, {"pc": [977, 978, 979], "source": "lib_pcg\\pcg32.algo.ts:23", "teal": 907}, {"pc": [980, 981], "source": "lib_pcg\\pcg32.algo.ts:23", "teal": 908}, {"pc": [982, 983], "source": "lib_pcg\\pcg32.algo.ts:24", "teal": 912}, {"pc": [984, 985], "source": "lib_pcg\\pcg32.algo.ts:24", "teal": 913}, {"pc": [986], "source": "lib_pcg\\pcg32.algo.ts:24", "teal": 914}, {"pc": [987, 988], "source": "lib_pcg\\pcg32.algo.ts:24", "teal": 915}, {"pc": [989, 990], "source": "lib_pcg\\pcg32.algo.ts:25", "teal": 919}, {"pc": [991, 992], "source": "lib_pcg\\pcg32.algo.ts:25", "teal": 920}, {"pc": [993], "source": "lib_pcg\\pcg32.algo.ts:25", "teal": 921}, {"pc": [994, 995], "source": "lib_pcg\\pcg32.algo.ts:25", "teal": 922}, {"pc": [996, 997], "source": "lib_pcg\\pcg32.algo.ts:25", "teal": 923}, {"pc": [998, 999, 1000], "source": "lib_pcg\\pcg32.algo.ts:25", "teal": 924}, {"pc": [1001, 1002], "source": "lib_pcg\\pcg32.algo.ts:25", "teal": 925}, {"pc": [1003], "source": "lib_pcg\\pcg32.algo.ts:25", "teal": 926}, {"pc": [1004], "source": "lib_pcg\\pcg32.algo.ts:25", "teal": 927}, {"pc": [1005, 1006, 1007], "source": "lib_pcg\\pcg32.algo.ts:25", "teal": 928}, {"pc": [1008], "source": "lib_pcg\\pcg32.algo.ts:25", "teal": 929}, {"pc": [1009, 1010], "source": "lib_pcg\\pcg32.algo.ts:22", "teal": 932}, {"pc": [1011, 1012], "source": "lib_pcg\\pcg32.algo.ts:22", "teal": 935}, {"pc": [1013], "source": "lib_pcg\\pcg32.algo.ts:22", "teal": 936}, {"pc": [1014, 1015, 1016], "source": "lib_pcg\\pcg32.algo.ts:15", "teal": 940}, {"pc": [1017], "source": "lib_pcg\\pcg32.algo.ts:15", "teal": 943}, {"pc": [1018, 1019], "source": "lib_pcg\\pcg32.algo.ts:15", "teal": 944}, {"pc": [1020, 1021], "source": "lib_pcg\\pcg32.algo.ts:16", "teal": 948}, {"pc": [1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031], "source": "lib_pcg\\consts.algo.ts:1", "teal": 952}, {"pc": [1032], "source": "lib_pcg\\pcg32.algo.ts:16", "teal": 953}, {"pc": [1033, 1034], "source": "lib_pcg\\pcg32.algo.ts:16", "teal": 954}, {"pc": [1035, 1036], "source": "lib_pcg\\pcg32.algo.ts:16", "teal": 955}, {"pc": [1037, 1038], "source": "lib_pcg\\pcg32.algo.ts:17", "teal": 959}, {"pc": [1039, 1040], "source": "lib_pcg\\pcg32.algo.ts:17", "teal": 960}, {"pc": [1041], "source": "lib_pcg\\pcg32.algo.ts:17", "teal": 961}, {"pc": [1042, 1043], "source": "lib_pcg\\pcg32.algo.ts:17", "teal": 962}, {"pc": [1044, 1045], "source": "lib_pcg\\pcg32.algo.ts:17", "teal": 963}, {"pc": [1046, 1047], "source": "lib_pcg\\pcg32.algo.ts:19", "teal": 967}, {"pc": [1048, 1049], "source": "lib_pcg\\pcg32.algo.ts:15", "teal": 970}, {"pc": [1050, 1051], "source": "lib_pcg\\pcg32.algo.ts:15", "teal": 973}, {"pc": [1052], "source": "lib_pcg\\pcg32.algo.ts:15", "teal": 974}, {"pc": [1053, 1054, 1055], "source": "lib_pcg\\pcg32.algo.ts:106", "teal": 978}, {"pc": [1056, 1057], "source": "lib_pcg\\pcg32.algo.ts:107", "teal": 982}, {"pc": [1058, 1059, 1060], "source": "lib_pcg\\pcg32.algo.ts:107", "teal": 983}, {"pc": [1061], "source": "lib_pcg\\pcg32.algo.ts:106", "teal": 984}, {"pc": [1062, 1063, 1064], "source": "lib_pcg\\pcg32.algo.ts:120", "teal": 988}, {"pc": [1065], "source": "lib_pcg\\pcg32.algo.ts:120", "teal": 991}, {"pc": [1066, 1067], "source": "lib_pcg\\pcg32.algo.ts:126", "teal": 995}, {"pc": [1068, 1069], "source": "lib_pcg\\pcg32.algo.ts:126", "teal": 996}, {"pc": [1070, 1071], "source": "lib_pcg\\pcg32.algo.ts:126", "teal": 997}, {"pc": [1072, 1073], "source": "lib_pcg\\pcg32.algo.ts:126", "teal": 998}, {"pc": [1074, 1075], "source": "lib_pcg\\pcg32.algo.ts:126", "teal": 999}, {"pc": [1076, 1077, 1078], "source": "lib_pcg\\pcg32.algo.ts:126", "teal": 1000}, {"pc": [1079, 1080], "source": "lib_pcg\\pcg32.algo.ts:126", "teal": 1001}, {"pc": [1081], "source": "lib_pcg\\pcg32.algo.ts:127", "teal": 1005}, {"pc": [1082], "source": "lib_pcg\\pcg32.algo.ts:127", "teal": 1006}, {"pc": [1083], "source": "lib_pcg\\pcg32.algo.ts:127", "teal": 1007}, {"pc": [1084, 1085], "source": "lib_pcg\\pcg32.algo.ts:127", "teal": 1008}, {"pc": [1086, 1087], "source": "lib_pcg\\pcg32.algo.ts:127", "teal": 1009}, {"pc": [1088, 1089], "source": "lib_pcg\\pcg32.algo.ts:127", "teal": 1010}, {"pc": [1090, 1091, 1092], "source": "lib_pcg\\pcg32.algo.ts:127", "teal": 1011}, {"pc": [1093], "source": "lib_pcg\\pcg32.algo.ts:127", "teal": 1012}, {"pc": [1094], "source": "lib_pcg\\pcg32.algo.ts:127", "teal": 1013}, {"pc": [1095, 1096, 1097], "source": "lib_pcg\\pcg32.algo.ts:127", "teal": 1014}, {"pc": [1098, 1099], "source": "lib_pcg\\pcg32.algo.ts:127", "teal": 1015}, {"pc": [1100, 1101], "source": "lib_pcg\\pcg32.algo.ts:127", "teal": 1016}, {"pc": [1102], "source": "lib_pcg\\pcg32.algo.ts:127", "teal": 1017}, {"pc": [1103, 1104], "source": "lib_pcg\\pcg32.algo.ts:127", "teal": 1018}, {"pc": [1105, 1106], "source": "lib_pcg\\pcg32.algo.ts:127", "teal": 1019}, {"pc": [1107, 1108], "source": "lib_pcg\\pcg32.algo.ts:127", "teal": 1020}, {"pc": [1109], "source": "lib_pcg\\pcg32.algo.ts:127", "teal": 1021}, {"pc": [1110], "source": "lib_pcg\\pcg32.algo.ts:127", "teal": 1022}, {"pc": [1111, 1112], "source": "lib_pcg\\pcg32.algo.ts:127", "teal": 1023}, {"pc": [1113], "source": "lib_pcg\\pcg32.algo.ts:127", "teal": 1024}, {"pc": [1114], "source": "lib_pcg\\pcg32.algo.ts:127", "teal": 1025}, {"pc": [1115], "source": "lib_pcg\\pcg32.algo.ts:127", "teal": 1026}, {"pc": [1116], "source": "lib_pcg\\pcg32.algo.ts:127", "teal": 1027}, {"pc": [1117], "source": "lib_pcg\\pcg32.algo.ts:127", "teal": 1028}, {"pc": [1118], "source": "lib_pcg\\pcg32.algo.ts:127", "teal": 1029}, {"pc": [1119], "source": "lib_pcg\\pcg32.algo.ts:127", "teal": 1030}, {"pc": [1120, 1121, 1122], "source": "lib_pcg\\pcg32.algo.ts:127", "teal": 1031}, {"pc": [1123], "source": "lib_pcg\\pcg32.algo.ts:127", "teal": 1032}, {"pc": [1124], "source": "lib_pcg\\pcg32.algo.ts:127", "teal": 1033}, {"pc": [1125], "source": "lib_pcg\\pcg32.algo.ts:127", "teal": 1034}, {"pc": [1126], "source": "lib_pcg\\pcg32.algo.ts:127", "teal": 1035}, {"pc": [1127], "source": "lib_pcg\\pcg32.algo.ts:127", "teal": 1036}, {"pc": [1128, 1129, 1130], "source": "lib_pcg\\pcg32.algo.ts:127", "teal": 1037}, {"pc": [1131], "source": "lib_pcg\\pcg32.algo.ts:127", "teal": 1038}, {"pc": [1132], "source": "lib_pcg\\pcg32.algo.ts:127", "teal": 1039}, {"pc": [1133, 1134, 1135], "source": "lib_pcg\\pcg32.algo.ts:127", "teal": 1040}, {"pc": [1136], "source": "lib_pcg\\pcg32.algo.ts:127", "teal": 1041}, {"pc": [1137], "source": "lib_pcg\\pcg32.algo.ts:127", "teal": 1042}, {"pc": [1138, 1139], "source": "lib_pcg\\pcg32.algo.ts:120", "teal": 1045}, {"pc": [1140], "source": "lib_pcg\\pcg32.algo.ts:120", "teal": 1046}, {"pc": [1141, 1142, 1143], "source": "lib_pcg\\pcg32.algo.ts:102", "teal": 1050}, {"pc": [1144, 1145], "source": "lib_pcg\\pcg32.algo.ts:103", "teal": 1054}, {"pc": [1146, 1147, 1148], "source": "lib_pcg\\pcg32.algo.ts:103", "teal": 1055}, {"pc": [1149], "source": "lib_pcg\\pcg32.algo.ts:102", "teal": 1056}, {"pc": [1150, 1151, 1152], "source": "lib_pcg\\pcg32.algo.ts:110", "teal": 1060}, {"pc": [1153], "source": "lib_pcg\\pcg32.algo.ts:110", "teal": 1063}, {"pc": [1154, 1155], "source": "lib_pcg\\pcg32.algo.ts:116", "teal": 1067}, {"pc": [1156, 1157], "source": "lib_pcg\\pcg32.algo.ts:116", "teal": 1068}, {"pc": [1158, 1159], "source": "lib_pcg\\pcg32.algo.ts:116", "teal": 1069}, {"pc": [1160, 1161], "source": "lib_pcg\\pcg32.algo.ts:116", "teal": 1070}, {"pc": [1162, 1163], "source": "lib_pcg\\pcg32.algo.ts:116", "teal": 1071}, {"pc": [1164, 1165, 1166], "source": "lib_pcg\\pcg32.algo.ts:116", "teal": 1072}, {"pc": [1167, 1168], "source": "lib_pcg\\pcg32.algo.ts:116", "teal": 1073}, {"pc": [1169], "source": "lib_pcg\\pcg32.algo.ts:117", "teal": 1077}, {"pc": [1170], "source": "lib_pcg\\pcg32.algo.ts:117", "teal": 1078}, {"pc": [1171], "source": "lib_pcg\\pcg32.algo.ts:117", "teal": 1079}, {"pc": [1172, 1173], "source": "lib_pcg\\pcg32.algo.ts:117", "teal": 1080}, {"pc": [1174, 1175], "source": "lib_pcg\\pcg32.algo.ts:117", "teal": 1081}, {"pc": [1176, 1177], "source": "lib_pcg\\pcg32.algo.ts:117", "teal": 1082}, {"pc": [1178, 1179, 1180], "source": "lib_pcg\\pcg32.algo.ts:117", "teal": 1083}, {"pc": [1181], "source": "lib_pcg\\pcg32.algo.ts:117", "teal": 1084}, {"pc": [1182], "source": "lib_pcg\\pcg32.algo.ts:117", "teal": 1085}, {"pc": [1183, 1184, 1185], "source": "lib_pcg\\pcg32.algo.ts:117", "teal": 1086}, {"pc": [1186, 1187], "source": "lib_pcg\\pcg32.algo.ts:117", "teal": 1087}, {"pc": [1188, 1189], "source": "lib_pcg\\pcg32.algo.ts:117", "teal": 1088}, {"pc": [1190], "source": "lib_pcg\\pcg32.algo.ts:117", "teal": 1089}, {"pc": [1191, 1192], "source": "lib_pcg\\pcg32.algo.ts:117", "teal": 1090}, {"pc": [1193, 1194], "source": "lib_pcg\\pcg32.algo.ts:117", "teal": 1091}, {"pc": [1195, 1196], "source": "lib_pcg\\pcg32.algo.ts:117", "teal": 1092}, {"pc": [1197], "source": "lib_pcg\\pcg32.algo.ts:117", "teal": 1093}, {"pc": [1198], "source": "lib_pcg\\pcg32.algo.ts:117", "teal": 1094}, {"pc": [1199, 1200], "source": "lib_pcg\\pcg32.algo.ts:117", "teal": 1095}, {"pc": [1201], "source": "lib_pcg\\pcg32.algo.ts:117", "teal": 1096}, {"pc": [1202], "source": "lib_pcg\\pcg32.algo.ts:117", "teal": 1097}, {"pc": [1203], "source": "lib_pcg\\pcg32.algo.ts:117", "teal": 1098}, {"pc": [1204], "source": "lib_pcg\\pcg32.algo.ts:117", "teal": 1099}, {"pc": [1205], "source": "lib_pcg\\pcg32.algo.ts:117", "teal": 1100}, {"pc": [1206], "source": "lib_pcg\\pcg32.algo.ts:117", "teal": 1101}, {"pc": [1207], "source": "lib_pcg\\pcg32.algo.ts:117", "teal": 1102}, {"pc": [1208, 1209, 1210], "source": "lib_pcg\\pcg32.algo.ts:117", "teal": 1103}, {"pc": [1211], "source": "lib_pcg\\pcg32.algo.ts:117", "teal": 1104}, {"pc": [1212], "source": "lib_pcg\\pcg32.algo.ts:117", "teal": 1105}, {"pc": [1213, 1214], "source": "lib_pcg\\pcg32.algo.ts:117", "teal": 1106}, {"pc": [1215], "source": "lib_pcg\\pcg32.algo.ts:117", "teal": 1107}, {"pc": [1216], "source": "lib_pcg\\pcg32.algo.ts:117", "teal": 1108}, {"pc": [1217, 1218, 1219], "source": "lib_pcg\\pcg32.algo.ts:117", "teal": 1109}, {"pc": [1220], "source": "lib_pcg\\pcg32.algo.ts:117", "teal": 1110}, {"pc": [1221], "source": "lib_pcg\\pcg32.algo.ts:117", "teal": 1111}, {"pc": [1222, 1223, 1224], "source": "lib_pcg\\pcg32.algo.ts:117", "teal": 1112}, {"pc": [1225], "source": "lib_pcg\\pcg32.algo.ts:117", "teal": 1113}, {"pc": [1226], "source": "lib_pcg\\pcg32.algo.ts:117", "teal": 1114}, {"pc": [1227, 1228], "source": "lib_pcg\\pcg32.algo.ts:110", "teal": 1117}, {"pc": [1229], "source": "lib_pcg\\pcg32.algo.ts:110", "teal": 1118}, {"pc": [1230, 1231, 1232], "source": "lib_pcg\\pcg32.algo.ts:96", "teal": 1122}, {"pc": [1233, 1234], "source": "lib_pcg\\pcg32.algo.ts:97", "teal": 1126}, {"pc": [1235], "source": "lib_pcg\\pcg32.algo.ts:97", "teal": 1127}, {"pc": [1236], "source": "lib_pcg\\pcg32.algo.ts:97", "teal": 1128}, {"pc": [1237], "source": "lib_pcg\\pcg32.algo.ts:97", "teal": 1129}, {"pc": [1238], "source": "lib_pcg\\pcg32.algo.ts:97", "teal": 1130}, {"pc": [1239, 1240], "source": "lib_pcg\\consts.algo.ts:3", "teal": 1136}, {"pc": [1241, 1242], "source": "lib_pcg\\pcg32.algo.ts:99", "teal": 1140}, {"pc": [1243], "source": "lib_pcg\\pcg32.algo.ts:99", "teal": 1141}, {"pc": [1244, 1245, 1246], "source": "lib_pcg\\pcg32.algo.ts:99", "teal": 1142}, {"pc": [1247], "source": "lib_pcg\\pcg32.algo.ts:96", "teal": 1143}, {"pc": [1248, 1249, 1250], "source": "lib_pcg\\pcg32.algo.ts:89", "teal": 1147}, {"pc": [1251], "source": "lib_pcg\\pcg32.algo.ts:89", "teal": 1150}, {"pc": [1252, 1253], "source": "lib_pcg\\pcg32.algo.ts:89", "teal": 1151}, {"pc": [1254, 1255], "source": "lib_pcg\\pcg32.algo.ts:90", "teal": 1155}, {"pc": [1256], "source": "lib_pcg\\pcg32.algo.ts:90", "teal": 1156}, {"pc": [1257, 1258, 1259], "source": "lib_pcg\\pcg32.algo.ts:90", "teal": 1157}, {"pc": [1260, 1261], "source": "lib_pcg\\pcg32.algo.ts:90", "teal": 1158}, {"pc": [1262, 1263], "source": "lib_pcg\\pcg32.algo.ts:91", "teal": 1162}, {"pc": [1264, 1265], "source": "lib_pcg\\pcg32.algo.ts:91", "teal": 1163}, {"pc": [1266], "source": "lib_pcg\\pcg32.algo.ts:91", "teal": 1164}, {"pc": [1267, 1268], "source": "lib_pcg\\pcg32.algo.ts:91", "teal": 1165}, {"pc": [1269, 1270], "source": "lib_pcg\\pcg32.algo.ts:91", "teal": 1166}, {"pc": [1271, 1272], "source": "lib_pcg\\pcg32.algo.ts:93", "teal": 1170}, {"pc": [1273, 1274], "source": "lib_pcg\\pcg32.algo.ts:93", "teal": 1171}, {"pc": [1275, 1276, 1277], "source": "lib_pcg\\pcg32.algo.ts:93", "teal": 1172}, {"pc": [1278, 1279], "source": "lib_pcg\\pcg32.algo.ts:89", "teal": 1175}, {"pc": [1280, 1281], "source": "lib_pcg\\pcg32.algo.ts:89", "teal": 1178}, {"pc": [1282], "source": "lib_pcg\\pcg32.algo.ts:89", "teal": 1179}, {"pc": [1283, 1284, 1285], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:4", "teal": 1182}, {"pc": [1286, 1287], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:4", "teal": 1183}, {"pc": [1288, 1289], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:4", "teal": 1184}, {"pc": [1290], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:4", "teal": 1185}, {"pc": [1291, 1292], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:4", "teal": 1186}, {"pc": [1293, 1294], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:4", "teal": 1187}, {"pc": [1295], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:4", "teal": 1188}, {"pc": [1296, 1297, 1298], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:4", "teal": 1191}, {"pc": [1299, 1300], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:4", "teal": 1192}, {"pc": [1301, 1302], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:4", "teal": 1193}, {"pc": [1303], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:4", "teal": 1194}, {"pc": [1304, 1305], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:4", "teal": 1195}, {"pc": [1306, 1307], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:4", "teal": 1196}, {"pc": [1308], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:4", "teal": 1197}, {"pc": [1309], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:4", "teal": 1198}, {"pc": [1310, 1311], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:4", "teal": 1199}, {"pc": [1312], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:4", "teal": 1200}, {"pc": [1313], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:4", "teal": 1201}, {"pc": [1314], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:4", "teal": 1202}, {"pc": [1315, 1316, 1317], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:4", "teal": 1203}, {"pc": [1318, 1319], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:4", "teal": 1204}, {"pc": [1320, 1321], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:4", "teal": 1205}, {"pc": [1322], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:4", "teal": 1206}, {"pc": [1323], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:4", "teal": 1207}, {"pc": [1324, 1325], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:4", "teal": 1208}, {"pc": [1326, 1327], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:4", "teal": 1209}, {"pc": [1328, 1329], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:4", "teal": 1210}, {"pc": [1330, 1331], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:4", "teal": 1211}, {"pc": [1332], "source": "contracts\\lib-pcg32-exposer-ts.algo.ts:4", "teal": 1212}]}, "clear": {"pcOffsetMethod": "none", "sourceInfo": []}}}"""
APP_SPEC = algokit_utils.Arc56Contract.from_json(_APP_SPEC_JSON)

def _parse_abi_args(args: object | None = None) -> list[object] | None:
    """Helper to parse ABI args into the format expected by underlying client"""
    if args is None:
        return None

    def convert_dataclass(value: object) -> object:
        if dataclasses.is_dataclass(value):
            return tuple(convert_dataclass(getattr(value, field.name)) for field in dataclasses.fields(value))
        elif isinstance(value, (list, tuple)):
            return type(value)(convert_dataclass(item) for item in value)
        return value

    match args:
        case tuple():
            method_args = list(args)
        case _ if dataclasses.is_dataclass(args):
            method_args = [getattr(args, field.name) for field in dataclasses.fields(args)]
        case _:
            raise ValueError("Invalid 'args' type. Expected 'tuple' or 'TypedDict' for respective typed arguments.")

    return [
        convert_dataclass(arg) if not isinstance(arg, algokit_utils.AppMethodCallTransactionArgument) else arg
        for arg in method_args
    ] if method_args else None

def _init_dataclass(cls: type, data: dict) -> object:
    """
    Recursively instantiate a dataclass of type `cls` from `data`.

    For each field on the dataclass, if the field type is also a dataclass
    and the corresponding data is a dict, instantiate that field recursively.
    """
    field_values = {}
    for field in dataclasses.fields(cls):
        field_value = data.get(field.name)
        # Check if the field expects another dataclass and the value is a dict.
        if dataclasses.is_dataclass(field.type) and isinstance(field_value, dict):
            field_values[field.name] = _init_dataclass(typing.cast(type, field.type), field_value)
        else:
            field_values[field.name] = field_value
    return cls(**field_values)

@dataclasses.dataclass(frozen=True, kw_only=True)
class BoundedRandUint32Args:
    """Dataclass for bounded_rand_uint32 arguments"""
    seed: bytes | str | tuple[int, int, int, int, int, int, int, int]
    lower_bound: int
    upper_bound: int
    length: int

    @property
    def abi_method_signature(self) -> str:
        return "bounded_rand_uint32(byte[8],uint32,uint32,uint16)uint32[]"

@dataclasses.dataclass(frozen=True, kw_only=True)
class BoundedRandUint16Args:
    """Dataclass for bounded_rand_uint16 arguments"""
    seed: bytes | str | tuple[int, int, int, int, int, int, int, int]
    lower_bound: int
    upper_bound: int
    length: int

    @property
    def abi_method_signature(self) -> str:
        return "bounded_rand_uint16(byte[8],uint16,uint16,uint16)uint16[]"

@dataclasses.dataclass(frozen=True, kw_only=True)
class BoundedRandUint8Args:
    """Dataclass for bounded_rand_uint8 arguments"""
    seed: bytes | str | tuple[int, int, int, int, int, int, int, int]
    lower_bound: int
    upper_bound: int
    length: int

    @property
    def abi_method_signature(self) -> str:
        return "bounded_rand_uint8(byte[8],uint8,uint8,uint16)uint8[]"


class _LibPcg32ExposerTsUpdate:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    def update_application(
        self,
        params: algokit_utils.CommonAppCallParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppUpdateMethodCallParams:
    
        params = params or algokit_utils.CommonAppCallParams()
        compilation_params = compilation_params or algokit_utils.AppClientCompilationParams()
        return self.app_client.params.update(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "updateApplication()void",
        }))


class LibPcg32ExposerTsParams:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    @property
    def update(self) -> "_LibPcg32ExposerTsUpdate":
        return _LibPcg32ExposerTsUpdate(self.app_client)

    def bounded_rand_uint32(
        self,
        args: tuple[bytes | str | tuple[int, int, int, int, int, int, int, int], int, int, int] | BoundedRandUint32Args,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "bounded_rand_uint32(byte[8],uint32,uint32,uint16)uint32[]",
            "args": method_args,
        }))

    def bounded_rand_uint16(
        self,
        args: tuple[bytes | str | tuple[int, int, int, int, int, int, int, int], int, int, int] | BoundedRandUint16Args,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "bounded_rand_uint16(byte[8],uint16,uint16,uint16)uint16[]",
            "args": method_args,
        }))

    def bounded_rand_uint8(
        self,
        args: tuple[bytes | str | tuple[int, int, int, int, int, int, int, int], int, int, int] | BoundedRandUint8Args,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "bounded_rand_uint8(byte[8],uint8,uint8,uint16)uint8[]",
            "args": method_args,
        }))

    def create_application(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "createApplication()void",
        }))

    def clear_state(
        self,
        params: algokit_utils.AppClientBareCallParams | None = None,
        
    ) -> algokit_utils.AppCallParams:
        return self.app_client.params.bare.clear_state(
            params,
            
        )


class _LibPcg32ExposerTsUpdateTransaction:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    def update_application(
        self,
        params: algokit_utils.CommonAppCallParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.BuiltTransactions:
    
        params = params or algokit_utils.CommonAppCallParams()
        compilation_params = compilation_params or algokit_utils.AppClientCompilationParams()
        return self.app_client.create_transaction.update(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "updateApplication()void",
        }))


class LibPcg32ExposerTsCreateTransactionParams:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    @property
    def update(self) -> "_LibPcg32ExposerTsUpdateTransaction":
        return _LibPcg32ExposerTsUpdateTransaction(self.app_client)

    def bounded_rand_uint32(
        self,
        args: tuple[bytes | str | tuple[int, int, int, int, int, int, int, int], int, int, int] | BoundedRandUint32Args,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "bounded_rand_uint32(byte[8],uint32,uint32,uint16)uint32[]",
            "args": method_args,
        }))

    def bounded_rand_uint16(
        self,
        args: tuple[bytes | str | tuple[int, int, int, int, int, int, int, int], int, int, int] | BoundedRandUint16Args,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "bounded_rand_uint16(byte[8],uint16,uint16,uint16)uint16[]",
            "args": method_args,
        }))

    def bounded_rand_uint8(
        self,
        args: tuple[bytes | str | tuple[int, int, int, int, int, int, int, int], int, int, int] | BoundedRandUint8Args,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "bounded_rand_uint8(byte[8],uint8,uint8,uint16)uint8[]",
            "args": method_args,
        }))

    def create_application(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "createApplication()void",
        }))

    def clear_state(
        self,
        params: algokit_utils.AppClientBareCallParams | None = None,
        
    ) -> Transaction:
        return self.app_client.create_transaction.bare.clear_state(
            params,
            
        )


class _LibPcg32ExposerTsUpdateSend:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    def update_application(
        self,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
    
        params = params or algokit_utils.CommonAppCallParams()
        compilation_params = compilation_params or algokit_utils.AppClientCompilationParams()
        response = self.app_client.send.update(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "updateApplication()void",
        }), send_params=send_params, compilation_params=compilation_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppUpdateTransactionResult[None], parsed_response)


class LibPcg32ExposerTsSend:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    @property
    def update(self) -> "_LibPcg32ExposerTsUpdateSend":
        return _LibPcg32ExposerTsUpdateSend(self.app_client)

    def bounded_rand_uint32(
        self,
        args: tuple[bytes | str | tuple[int, int, int, int, int, int, int, int], int, int, int] | BoundedRandUint32Args,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[list[int]]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "bounded_rand_uint32(byte[8],uint32,uint32,uint16)uint32[]",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[list[int]], parsed_response)

    def bounded_rand_uint16(
        self,
        args: tuple[bytes | str | tuple[int, int, int, int, int, int, int, int], int, int, int] | BoundedRandUint16Args,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[list[int]]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "bounded_rand_uint16(byte[8],uint16,uint16,uint16)uint16[]",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[list[int]], parsed_response)

    def bounded_rand_uint8(
        self,
        args: tuple[bytes | str | tuple[int, int, int, int, int, int, int, int], int, int, int] | BoundedRandUint8Args,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[list[int]]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "bounded_rand_uint8(byte[8],uint8,uint8,uint16)uint8[]",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[list[int]], parsed_response)

    def create_application(
        self,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
    
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "createApplication()void",
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def clear_state(
        self,
        params: algokit_utils.AppClientBareCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[algokit_utils.ABIReturn]:
        return self.app_client.send.bare.clear_state(
            params,
            send_params=send_params,
        )


class LibPcg32ExposerTsState:
    """Methods to access state for the current LibPcg32ExposerTs app"""

    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

class LibPcg32ExposerTsClient:
    """Client for interacting with LibPcg32ExposerTs smart contract"""

    @typing.overload
    def __init__(self, app_client: algokit_utils.AppClient) -> None: ...
    
    @typing.overload
    def __init__(
        self,
        *,
        algorand: _AlgoKitAlgorandClient,
        app_id: int,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> None: ...

    def __init__(
        self,
        app_client: algokit_utils.AppClient | None = None,
        *,
        algorand: _AlgoKitAlgorandClient | None = None,
        app_id: int | None = None,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> None:
        if app_client:
            self.app_client = app_client
        elif algorand and app_id:
            self.app_client = algokit_utils.AppClient(
                algokit_utils.AppClientParams(
                    algorand=algorand,
                    app_spec=APP_SPEC,
                    app_id=app_id,
                    app_name=app_name,
                    default_sender=default_sender,
                    default_signer=default_signer,
                    approval_source_map=approval_source_map,
                    clear_source_map=clear_source_map,
                )
            )
        else:
            raise ValueError("Either app_client or algorand and app_id must be provided")
    
        self.params = LibPcg32ExposerTsParams(self.app_client)
        self.create_transaction = LibPcg32ExposerTsCreateTransactionParams(self.app_client)
        self.send = LibPcg32ExposerTsSend(self.app_client)
        self.state = LibPcg32ExposerTsState(self.app_client)

    @staticmethod
    def from_creator_and_name(
        creator_address: str,
        app_name: str,
        algorand: _AlgoKitAlgorandClient,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
        ignore_cache: bool | None = None,
        app_lookup_cache: algokit_utils.ApplicationLookup | None = None,
    ) -> "LibPcg32ExposerTsClient":
        return LibPcg32ExposerTsClient(
            algokit_utils.AppClient.from_creator_and_name(
                creator_address=creator_address,
                app_name=app_name,
                app_spec=APP_SPEC,
                algorand=algorand,
                default_sender=default_sender,
                default_signer=default_signer,
                approval_source_map=approval_source_map,
                clear_source_map=clear_source_map,
                ignore_cache=ignore_cache,
                app_lookup_cache=app_lookup_cache,
            )
        )
    
    @staticmethod
    def from_network(
        algorand: _AlgoKitAlgorandClient,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> "LibPcg32ExposerTsClient":
        return LibPcg32ExposerTsClient(
            algokit_utils.AppClient.from_network(
                app_spec=APP_SPEC,
                algorand=algorand,
                app_name=app_name,
                default_sender=default_sender,
                default_signer=default_signer,
                approval_source_map=approval_source_map,
                clear_source_map=clear_source_map,
            )
        )

    @property
    def app_id(self) -> int:
        return self.app_client.app_id
    
    @property
    def app_address(self) -> str:
        return self.app_client.app_address
    
    @property
    def app_name(self) -> str:
        return self.app_client.app_name
    
    @property
    def app_spec(self) -> algokit_utils.Arc56Contract:
        return self.app_client.app_spec
    
    @property
    def algorand(self) -> _AlgoKitAlgorandClient:
        return self.app_client.algorand

    def clone(
        self,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> "LibPcg32ExposerTsClient":
        return LibPcg32ExposerTsClient(
            self.app_client.clone(
                app_name=app_name,
                default_sender=default_sender,
                default_signer=default_signer,
                approval_source_map=approval_source_map,
                clear_source_map=clear_source_map,
            )
        )

    def new_group(self) -> "LibPcg32ExposerTsComposer":
        return LibPcg32ExposerTsComposer(self)

    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["bounded_rand_uint32(byte[8],uint32,uint32,uint16)uint32[]"],
        return_value: algokit_utils.ABIReturn | None
    ) -> list[int] | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["bounded_rand_uint16(byte[8],uint16,uint16,uint16)uint16[]"],
        return_value: algokit_utils.ABIReturn | None
    ) -> list[int] | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["bounded_rand_uint8(byte[8],uint8,uint8,uint16)uint8[]"],
        return_value: algokit_utils.ABIReturn | None
    ) -> list[int] | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["createApplication()void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["updateApplication()void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: str,
        return_value: algokit_utils.ABIReturn | None
    ) -> algokit_utils.ABIValue | algokit_utils.ABIStruct | None: ...

    def decode_return_value(
        self,
        method: str,
        return_value: algokit_utils.ABIReturn | None
    ) -> algokit_utils.ABIValue | algokit_utils.ABIStruct | None | list[int]:
        """Decode ABI return value for the given method."""
        if return_value is None:
            return None
    
        arc56_method = self.app_spec.get_arc56_method(method)
        decoded = return_value.get_arc56_value(arc56_method, self.app_spec.structs)
    
        # If method returns a struct, convert the dict to appropriate dataclass
        if (arc56_method and
            arc56_method.returns and
            arc56_method.returns.struct and
            isinstance(decoded, dict)):
            struct_class = globals().get(arc56_method.returns.struct)
            if struct_class:
                return struct_class(**typing.cast(dict, decoded))
        return decoded


@dataclasses.dataclass(frozen=True)
class LibPcg32ExposerTsMethodCallCreateParams(
    algokit_utils.AppClientCreateSchema, algokit_utils.BaseAppClientMethodCallParams[
        typing.Any,
        str | None,
    ]
):
    """Parameters for creating LibPcg32ExposerTs contract using ABI"""
    on_complete: typing.Literal[OnComplete.NoOpOC] | None = None
    method: str | None = None

    def to_algokit_utils_params(self) -> algokit_utils.AppClientMethodCallCreateParams:
        method_args = _parse_abi_args(self.args)
        return algokit_utils.AppClientMethodCallCreateParams(
            **{
                **self.__dict__,
                "method": self.method or getattr(self.args, "abi_method_signature", None),
                "args": method_args,
            }
        )

@dataclasses.dataclass(frozen=True)
class LibPcg32ExposerTsMethodCallUpdateParams(
    algokit_utils.BaseAppClientMethodCallParams[
        typing.Any,
        str | None,
    ]
):
    """Parameters for calling LibPcg32ExposerTs contract using ABI"""
    on_complete: typing.Literal[OnComplete.UpdateApplicationOC] | None = None
    method: str | None = None

    def to_algokit_utils_params(self) -> algokit_utils.AppClientMethodCallParams:
        method_args = _parse_abi_args(self.args)
        return algokit_utils.AppClientMethodCallParams(
            **{
                **self.__dict__,
                "method": self.method or getattr(self.args, "abi_method_signature", None),
                "args": method_args,
            }
        )

class LibPcg32ExposerTsFactory(algokit_utils.TypedAppFactoryProtocol[LibPcg32ExposerTsMethodCallCreateParams, LibPcg32ExposerTsMethodCallUpdateParams, None]):
    """Factory for deploying and managing LibPcg32ExposerTsClient smart contracts"""

    def __init__(
        self,
        algorand: _AlgoKitAlgorandClient,
        *,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        version: str | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None,
    ):
        self.app_factory = algokit_utils.AppFactory(
            params=algokit_utils.AppFactoryParams(
                algorand=algorand,
                app_spec=APP_SPEC,
                app_name=app_name,
                default_sender=default_sender,
                default_signer=default_signer,
                version=version,
                compilation_params=compilation_params,
            )
        )
        self.params = LibPcg32ExposerTsFactoryParams(self.app_factory)
        self.create_transaction = LibPcg32ExposerTsFactoryCreateTransaction(self.app_factory)
        self.send = LibPcg32ExposerTsFactorySend(self.app_factory)

    @property
    def app_name(self) -> str:
        return self.app_factory.app_name
    
    @property
    def app_spec(self) -> algokit_utils.Arc56Contract:
        return self.app_factory.app_spec
    
    @property
    def algorand(self) -> _AlgoKitAlgorandClient:
        return self.app_factory.algorand

    def deploy(
        self,
        *,
        on_update: algokit_utils.OnUpdate | None = None,
        on_schema_break: algokit_utils.OnSchemaBreak | None = None,
        create_params: LibPcg32ExposerTsMethodCallCreateParams | None = None,
        update_params: LibPcg32ExposerTsMethodCallUpdateParams | None = None,
        delete_params: None = None,
        existing_deployments: algokit_utils.ApplicationLookup | None = None,
        ignore_cache: bool = False,
        app_name: str | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None,
        send_params: algokit_utils.SendParams | None = None,
    ) -> tuple[LibPcg32ExposerTsClient, algokit_utils.AppFactoryDeployResult]:
        """Deploy the application"""
        deploy_response = self.app_factory.deploy(
            on_update=on_update,
            on_schema_break=on_schema_break,
            create_params=create_params.to_algokit_utils_params() if create_params else None,
            update_params=update_params.to_algokit_utils_params() if update_params else None,
            delete_params=delete_params,
            existing_deployments=existing_deployments,
            ignore_cache=ignore_cache,
            app_name=app_name,
            compilation_params=compilation_params,
            send_params=send_params,
        )

        return LibPcg32ExposerTsClient(deploy_response[0]), deploy_response[1]

    def get_app_client_by_creator_and_name(
        self,
        creator_address: str,
        app_name: str,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        ignore_cache: bool | None = None,
        app_lookup_cache: algokit_utils.ApplicationLookup | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> LibPcg32ExposerTsClient:
        """Get an app client by creator address and name"""
        return LibPcg32ExposerTsClient(
            self.app_factory.get_app_client_by_creator_and_name(
                creator_address,
                app_name,
                default_sender,
                default_signer,
                ignore_cache,
                app_lookup_cache,
                approval_source_map,
                clear_source_map,
            )
        )

    def get_app_client_by_id(
        self,
        app_id: int,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> LibPcg32ExposerTsClient:
        """Get an app client by app ID"""
        return LibPcg32ExposerTsClient(
            self.app_factory.get_app_client_by_id(
                app_id,
                app_name,
                default_sender,
                default_signer,
                approval_source_map,
                clear_source_map,
            )
        )


class LibPcg32ExposerTsFactoryParams:
    """Parameters for creating transactions for LibPcg32ExposerTs contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory
        self.create = LibPcg32ExposerTsFactoryCreateParams(app_factory)
        self.update = LibPcg32ExposerTsFactoryUpdateParams(app_factory)
        self.delete = LibPcg32ExposerTsFactoryDeleteParams(app_factory)

class LibPcg32ExposerTsFactoryCreateParams:
    """Parameters for 'create' operations of LibPcg32ExposerTs contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateParams:
        """Creates an instance using a bare call"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.bare.create(
            algokit_utils.AppFactoryCreateParams(**dataclasses.asdict(params)),
            compilation_params=compilation_params)

    def bounded_rand_uint32(
        self,
        args: tuple[bytes | str | tuple[int, int, int, int, int, int, int, int], int, int, int] | BoundedRandUint32Args,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the bounded_rand_uint32(byte[8],uint32,uint32,uint16)uint32[] ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "bounded_rand_uint32(byte[8],uint32,uint32,uint16)uint32[]",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def bounded_rand_uint16(
        self,
        args: tuple[bytes | str | tuple[int, int, int, int, int, int, int, int], int, int, int] | BoundedRandUint16Args,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the bounded_rand_uint16(byte[8],uint16,uint16,uint16)uint16[] ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "bounded_rand_uint16(byte[8],uint16,uint16,uint16)uint16[]",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def bounded_rand_uint8(
        self,
        args: tuple[bytes | str | tuple[int, int, int, int, int, int, int, int], int, int, int] | BoundedRandUint8Args,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the bounded_rand_uint8(byte[8],uint8,uint8,uint16)uint8[] ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "bounded_rand_uint8(byte[8],uint8,uint8,uint16)uint8[]",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def create_application(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the createApplication()void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "createApplication()void",
                "args": None,
                }
            ),
            compilation_params=compilation_params
        )

    def update_application(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the updateApplication()void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "updateApplication()void",
                "args": None,
                }
            ),
            compilation_params=compilation_params
        )

class LibPcg32ExposerTsFactoryUpdateParams:
    """Parameters for 'update' operations of LibPcg32ExposerTs contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        
    ) -> algokit_utils.AppUpdateParams:
        """Updates an instance using a bare call"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.bare.deploy_update(
            algokit_utils.AppClientBareCallParams(**dataclasses.asdict(params)),
            )

class LibPcg32ExposerTsFactoryDeleteParams:
    """Parameters for 'delete' operations of LibPcg32ExposerTs contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        
    ) -> algokit_utils.AppDeleteParams:
        """Deletes an instance using a bare call"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.bare.deploy_delete(
            algokit_utils.AppClientBareCallParams(**dataclasses.asdict(params)),
            )


class LibPcg32ExposerTsFactoryCreateTransaction:
    """Create transactions for LibPcg32ExposerTs contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory
        self.create = LibPcg32ExposerTsFactoryCreateTransactionCreate(app_factory)


class LibPcg32ExposerTsFactoryCreateTransactionCreate:
    """Create new instances of LibPcg32ExposerTs contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
    ) -> Transaction:
        """Creates a new instance using a bare call"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.create_transaction.bare.create(
            algokit_utils.AppFactoryCreateParams(**dataclasses.asdict(params)),
        )


class LibPcg32ExposerTsFactorySend:
    """Send calls to LibPcg32ExposerTs contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory
        self.create = LibPcg32ExposerTsFactorySendCreate(app_factory)


class LibPcg32ExposerTsFactorySendCreate:
    """Send create calls to LibPcg32ExposerTs contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        send_params: algokit_utils.SendParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None,
    ) -> tuple[LibPcg32ExposerTsClient, algokit_utils.SendAppCreateTransactionResult]:
        """Creates a new instance using a bare call"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        result = self.app_factory.send.bare.create(
            algokit_utils.AppFactoryCreateParams(**dataclasses.asdict(params)),
            send_params=send_params,
            compilation_params=compilation_params
        )
        return LibPcg32ExposerTsClient(result[0]), result[1]

    def create_application(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        send_params: algokit_utils.SendParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> tuple[LibPcg32ExposerTsClient, algokit_utils.AppFactoryCreateMethodCallResult[None]]:
            """Creates and sends a transaction using the createApplication()void ABI method"""
            params = params or algokit_utils.CommonAppCallCreateParams()
            client, result = self.app_factory.send.create(
                algokit_utils.AppFactoryCreateMethodCallParams(
                    **{
                    **dataclasses.asdict(params),
                    "method": "createApplication()void",
                    "args": None,
                    }
                ),
                send_params=send_params,
                compilation_params=compilation_params
            )
            return_value = None if result.abi_return is None else typing.cast(None, result.abi_return)
    
            return LibPcg32ExposerTsClient(client), algokit_utils.AppFactoryCreateMethodCallResult[None](
                **{
                    **result.__dict__,
                    "app_id": result.app_id,
                    "abi_return": return_value,
                    "transaction": result.transaction,
                    "confirmation": result.confirmation,
                    "group_id": result.group_id,
                    "tx_ids": result.tx_ids,
                    "transactions": result.transactions,
                    "confirmations": result.confirmations,
                    "app_address": result.app_address,
                }
            )


class _LibPcg32ExposerTsUpdateComposer:
    def __init__(self, composer: "LibPcg32ExposerTsComposer"):
        self.composer = composer
    def update_application(
        self,
        params: algokit_utils.CommonAppCallParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> "LibPcg32ExposerTsComposer":
        self.composer._composer.add_app_update_method_call(
            self.composer.client.params.update.update_application(
                
                params=params,
                compilation_params=compilation_params
            )
        )
        self.composer._result_mappers.append(
            lambda v: self.composer.client.decode_return_value(
                "updateApplication()void", v
            )
        )
        return self.composer


class LibPcg32ExposerTsComposer:
    """Composer for creating transaction groups for LibPcg32ExposerTs contract calls"""

    def __init__(self, client: "LibPcg32ExposerTsClient"):
        self.client = client
        self._composer = client.algorand.new_group()
        self._result_mappers: list[typing.Callable[[algokit_utils.ABIReturn | None], object] | None] = []

    @property
    def update(self) -> "_LibPcg32ExposerTsUpdateComposer":
        return _LibPcg32ExposerTsUpdateComposer(self)

    def bounded_rand_uint32(
        self,
        args: tuple[bytes | str | tuple[int, int, int, int, int, int, int, int], int, int, int] | BoundedRandUint32Args,
        params: algokit_utils.CommonAppCallParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> "LibPcg32ExposerTsComposer":
        self._composer.add_app_call_method_call(
            self.client.params.bounded_rand_uint32(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "bounded_rand_uint32(byte[8],uint32,uint32,uint16)uint32[]", v
            )
        )
        return self

    def bounded_rand_uint16(
        self,
        args: tuple[bytes | str | tuple[int, int, int, int, int, int, int, int], int, int, int] | BoundedRandUint16Args,
        params: algokit_utils.CommonAppCallParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> "LibPcg32ExposerTsComposer":
        self._composer.add_app_call_method_call(
            self.client.params.bounded_rand_uint16(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "bounded_rand_uint16(byte[8],uint16,uint16,uint16)uint16[]", v
            )
        )
        return self

    def bounded_rand_uint8(
        self,
        args: tuple[bytes | str | tuple[int, int, int, int, int, int, int, int], int, int, int] | BoundedRandUint8Args,
        params: algokit_utils.CommonAppCallParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> "LibPcg32ExposerTsComposer":
        self._composer.add_app_call_method_call(
            self.client.params.bounded_rand_uint8(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "bounded_rand_uint8(byte[8],uint8,uint8,uint16)uint8[]", v
            )
        )
        return self

    def create_application(
        self,
        params: algokit_utils.CommonAppCallParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> "LibPcg32ExposerTsComposer":
        self._composer.add_app_call_method_call(
            self.client.params.create_application(
                
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "createApplication()void", v
            )
        )
        return self

    def clear_state(
        self,
        *,
        args: list[bytes] | None = None,
        params: algokit_utils.CommonAppCallParams | None = None,
    ) -> "LibPcg32ExposerTsComposer":
        params=params or algokit_utils.CommonAppCallParams()
        self._composer.add_app_call(
            self.client.params.clear_state(
                algokit_utils.AppClientBareCallParams(
                    **{
                        **dataclasses.asdict(params),
                        "args": args
                    }
                )
            )
        )
        return self
    
    def add_transaction(
        self, txn: Transaction, signer: TransactionSigner | None = None
    ) -> "LibPcg32ExposerTsComposer":
        self._composer.add_transaction(txn, signer)
        return self
    
    def composer(self) -> algokit_utils.TransactionComposer:
        return self._composer
    
    def simulate(
        self,
        allow_more_logs: bool | None = None,
        allow_empty_signatures: bool | None = None,
        allow_unnamed_resources: bool | None = None,
        extra_opcode_budget: int | None = None,
        exec_trace_config: SimulateTraceConfig | None = None,
        simulation_round: int | None = None,
        skip_signatures: bool | None = None,
    ) -> algokit_utils.SendAtomicTransactionComposerResults:
        return self._composer.simulate(
            allow_more_logs=allow_more_logs,
            allow_empty_signatures=allow_empty_signatures,
            allow_unnamed_resources=allow_unnamed_resources,
            extra_opcode_budget=extra_opcode_budget,
            exec_trace_config=exec_trace_config,
            simulation_round=simulation_round,
            skip_signatures=skip_signatures,
        )
    
    def send(
        self,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAtomicTransactionComposerResults:
        return self._composer.send(send_params)
