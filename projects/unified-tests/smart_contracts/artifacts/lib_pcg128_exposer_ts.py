# flake8: noqa
# fmt: off
# mypy: ignore-errors
# This file was automatically generated by algokit-client-generator.
# DO NOT MODIFY IT BY HAND.
# requires: algokit-utils@^3.0.0

# common
import dataclasses
import typing
# core algosdk
import algosdk
from algosdk.transaction import OnComplete
from algosdk.atomic_transaction_composer import TransactionSigner
from algosdk.source_map import SourceMap
from algosdk.transaction import Transaction
from algosdk.v2client.models import SimulateTraceConfig
# utils
import algokit_utils
from algokit_utils import AlgorandClient as _AlgoKitAlgorandClient

_APP_SPEC_JSON = r"""{"arcs": [4, 56], "bareActions": {"call": [], "create": []}, "methods": [{"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "byte[32]", "name": "seed"}, {"type": "uint128", "name": "lower_bound"}, {"type": "uint128", "name": "upper_bound"}, {"type": "uint16", "name": "length"}], "name": "bounded_rand_uint128", "returns": {"type": "uint128[]"}}, {"actions": {"call": [], "create": ["NoOp"]}, "args": [], "name": "createApplication", "returns": {"type": "void"}}, {"actions": {"call": ["UpdateApplication"], "create": []}, "args": [], "name": "updateApplication", "returns": {"type": "void"}}], "name": "LibPcg128ExposerTs", "state": {"keys": {"box": {}, "global": {}, "local": {}}, "maps": {"box": {}, "global": {}, "local": {}}, "schema": {"global": {"bytes": 0, "ints": 0}, "local": {"bytes": 0, "ints": 0}}}, "structs": {}, "byteCode": {"approval": "CiAKAAEQIM+Cnrvv796CFNGCnrvv796CFNOCnrvv796CFNWCnrvv796CFAKAASYGABAAAAAAAAAAAAAAAAAAAAAAIAAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAEQ/////////////////////xD/////////////////////MRgUgQYLMRkIjQwArgAAAAAAAAC9AAAAmwAAAAAAAAAAAAAAgAQVH3x1NhoESRUhCBJEFzYaA0kVJBJENhoCSRUkEkQ2GgFJFSUSRIgADkkVJAoWVwYCTFBQsCNDigQBKEmL/4gDHowAi/yL/Yv+iwCIAH+MAYsBNf80/1cAIIwAiwE1/yU0/zT/TwJZSTT/TFkkCyEICFhXAgCMAEYBiYgAAiNDigAAMgkxABJEiYgAAiNDigAAMgkxABJEiTEbQf/dgAS4RHs2NhoAjgH/0ACABMNeCV02GgCOAf9GAAAxG0H/yoAERvdlMzYaAI4B/70AigQBKEcHKIwAi/+MA4v+KahJQQAFi/0pqBBBAC8ijASLBIv8DEEAIYsDiAD9jAWLBVcAIIwDiwCLBVcgEFCMAIsEIwiMBEL/10IAkIv9KalBAByL/SulRIv9KqREi/6L/SuhpESL/Yv+oYwBQgAMi/4nBKREKov+oYwBiwGIAH2LAaqMAiKMBosGi/wMQQBMI0EAP4sDiACRjAeLB1cAIIwDiwdXIBCLAqdBACOLAIsHVyAQiwGqi/6gSZMhCQ5EJwWsSRVJJAlMUlCMAEIAA0L/vYsGIwiMBkL/rCgogAIAIosDiAIDiwBJFSQKFlcGAkxQiAIBSFCMAEYHiYoBAYv/roAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGgJwSsiYoBAShHAyEEi/9XAAgXiAEwjAAhBYsAIhJBAAQjQgABIpCL/1cICBeIARaMASEGiwEiEkEABCNCAAEikIv/VxAIF4gA/IwCIQeLAiISQQAEI0IAASKQi/9XGAgXiADijAOLABaLARZQiwIWUIsDFlCL/1cACBeIAHEWgBAAAAABAAAAAAAAAAAAAAAAo4v/VwgIF4gAVBaAEAAAAAAAAAABAAAAAAAAAACjq4v/VxAIF4gANhaAEAAAAAAAAAAAAAAAAQAAAACjq4v/VxgIF4gAGBarSZMhCQ5EJwWsSRVJJAlMUlCMAEYDiYoBAShJi/+BEpGL/xuBG5GIADeMAIv/gTuRjAGLAIsBkYsAiwGIAA2BHxqQiAAbGYwARgGJigEBKEmL/xwjHowAjAGLAIwARgGJigEBi/+B/////w8aiYoCAShHA4v/ga3+1eTUhf2oWB2MAIwBiwCL/h6MAowDiwKMAEYDiYoBASVJEkQhBIv/IluIACUWIQWL/4EIW4gAGhZQIQaL/yRbiAAPFlAhB4v/gRhbiAADFlCJigIBKEcCi/4iiP+YjACLAIv/HowBjAKL/osBiP+GjABGAomKBAOL/Iv/UIv9i/6JigQDi/yL/lCM/Iv/SRWL/hcIFlcGAoz+i/1MUIz9i/yL/Yv+iQ==", "clear": "Cg=="}, "compilerInfo": {"compiler": "algod", "compilerVersion": {"commitHash": "6b940281", "major": 4, "minor": 0, "patch": 2}}, "desc": "", "source": {"approval": "", "clear": "I3ByYWdtYSB2ZXJzaW9uIDEw"}, "sourceInfo": {"approval": {"pcOffsetMethod": "none", "sourceInfo": [{"pc": [0], "source": "contracts\\lib-pcg128-exposer-ts.algo.ts:4", "teal": 1}, {"pc": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45], "source": "contracts\\lib-pcg128-exposer-ts.algo.ts:4", "teal": 2}, {"pc": [46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149], "source": "contracts\\lib-pcg128-exposer-ts.algo.ts:4", "teal": 3}, {"pc": [150, 151], "source": "contracts\\lib-pcg128-exposer-ts.algo.ts:4", "teal": 15}, {"pc": [152], "source": "contracts\\lib-pcg128-exposer-ts.algo.ts:4", "teal": 16}, {"pc": [153, 154], "source": "contracts\\lib-pcg128-exposer-ts.algo.ts:4", "teal": 17}, {"pc": [155], "source": "contracts\\lib-pcg128-exposer-ts.algo.ts:4", "teal": 18}, {"pc": [156, 157], "source": "contracts\\lib-pcg128-exposer-ts.algo.ts:4", "teal": 19}, {"pc": [158], "source": "contracts\\lib-pcg128-exposer-ts.algo.ts:4", "teal": 20}, {"pc": [159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184], "source": "contracts\\lib-pcg128-exposer-ts.algo.ts:4", "teal": 21}, {"pc": [185], "errorMessage": "The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?", "source": "contracts\\lib-pcg128-exposer-ts.algo.ts:4", "teal": 25}, {"pc": [186, 187, 188, 189, 190, 191], "source": "contracts\\lib-pcg128-exposer-ts.algo.ts:6", "teal": 30}, {"pc": [192, 193, 194], "source": "contracts\\lib-pcg128-exposer-ts.algo.ts:6", "teal": 33}, {"pc": [195], "source": "contracts\\lib-pcg128-exposer-ts.algo.ts:6", "teal": 34}, {"pc": [196], "source": "contracts\\lib-pcg128-exposer-ts.algo.ts:6", "teal": 35}, {"pc": [197, 198], "source": "contracts\\lib-pcg128-exposer-ts.algo.ts:6", "teal": 36}, {"pc": [199], "source": "contracts\\lib-pcg128-exposer-ts.algo.ts:6", "teal": 37}, {"pc": [200], "errorMessage": "argument 0 (length) for bounded_rand_uint128 must be a uint16", "source": "contracts\\lib-pcg128-exposer-ts.algo.ts:6", "teal": 40}, {"pc": [201], "source": "contracts\\lib-pcg128-exposer-ts.algo.ts:6", "teal": 41}, {"pc": [202, 203, 204], "source": "contracts\\lib-pcg128-exposer-ts.algo.ts:6", "teal": 44}, {"pc": [205], "source": "contracts\\lib-pcg128-exposer-ts.algo.ts:6", "teal": 45}, {"pc": [206], "source": "contracts\\lib-pcg128-exposer-ts.algo.ts:6", "teal": 46}, {"pc": [207], "source": "contracts\\lib-pcg128-exposer-ts.algo.ts:6", "teal": 47}, {"pc": [208], "source": "contracts\\lib-pcg128-exposer-ts.algo.ts:6", "teal": 48}, {"pc": [209], "errorMessage": "argument 1 (upper_bound) for bounded_rand_uint128 must be a uint128", "source": "contracts\\lib-pcg128-exposer-ts.algo.ts:6", "teal": 51}, {"pc": [210, 211, 212], "source": "contracts\\lib-pcg128-exposer-ts.algo.ts:6", "teal": 54}, {"pc": [213], "source": "contracts\\lib-pcg128-exposer-ts.algo.ts:6", "teal": 55}, {"pc": [214], "source": "contracts\\lib-pcg128-exposer-ts.algo.ts:6", "teal": 56}, {"pc": [215], "source": "contracts\\lib-pcg128-exposer-ts.algo.ts:6", "teal": 57}, {"pc": [216], "source": "contracts\\lib-pcg128-exposer-ts.algo.ts:6", "teal": 58}, {"pc": [217], "errorMessage": "argument 2 (lower_bound) for bounded_rand_uint128 must be a uint128", "source": "contracts\\lib-pcg128-exposer-ts.algo.ts:6", "teal": 61}, {"pc": [218, 219, 220], "source": "contracts\\lib-pcg128-exposer-ts.algo.ts:6", "teal": 64}, {"pc": [221], "source": "contracts\\lib-pcg128-exposer-ts.algo.ts:6", "teal": 65}, {"pc": [222], "source": "contracts\\lib-pcg128-exposer-ts.algo.ts:6", "teal": 66}, {"pc": [223], "source": "contracts\\lib-pcg128-exposer-ts.algo.ts:6", "teal": 67}, {"pc": [224], "source": "contracts\\lib-pcg128-exposer-ts.algo.ts:6", "teal": 68}, {"pc": [225], "errorMessage": "argument 3 (seed) for bounded_rand_uint128 must be a byte[32]", "source": "contracts\\lib-pcg128-exposer-ts.algo.ts:6", "teal": 71}, {"pc": [226, 227, 228], "source": "contracts\\lib-pcg128-exposer-ts.algo.ts:6", "teal": 74}, {"pc": [229], "source": "contracts\\lib-pcg128-exposer-ts.algo.ts:6", "teal": 75}, {"pc": [230], "source": "contracts\\lib-pcg128-exposer-ts.algo.ts:6", "teal": 76}, {"pc": [231], "source": "contracts\\lib-pcg128-exposer-ts.algo.ts:6", "teal": 77}, {"pc": [232], "source": "contracts\\lib-pcg128-exposer-ts.algo.ts:6", "teal": 78}, {"pc": [233], "source": "contracts\\lib-pcg128-exposer-ts.algo.ts:6", "teal": 79}, {"pc": [234, 235, 236], "source": "contracts\\lib-pcg128-exposer-ts.algo.ts:6", "teal": 80}, {"pc": [237], "source": "contracts\\lib-pcg128-exposer-ts.algo.ts:6", "teal": 81}, {"pc": [238], "source": "contracts\\lib-pcg128-exposer-ts.algo.ts:6", "teal": 82}, {"pc": [239], "source": "contracts\\lib-pcg128-exposer-ts.algo.ts:6", "teal": 83}, {"pc": [240], "source": "contracts\\lib-pcg128-exposer-ts.algo.ts:6", "teal": 84}, {"pc": [241], "source": "contracts\\lib-pcg128-exposer-ts.algo.ts:6", "teal": 85}, {"pc": [242], "source": "contracts\\lib-pcg128-exposer-ts.algo.ts:6", "teal": 86}, {"pc": [243, 244, 245], "source": "contracts\\lib-pcg128-exposer-ts.algo.ts:6", "teal": 90}, {"pc": [246], "source": "contracts\\lib-pcg128-exposer-ts.algo.ts:6", "teal": 93}, {"pc": [247], "source": "contracts\\lib-pcg128-exposer-ts.algo.ts:6", "teal": 94}, {"pc": [248, 249], "source": "contracts\\lib-pcg128-exposer-ts.algo.ts:7", "teal": 98}, {"pc": [250, 251, 252], "source": "contracts\\lib-pcg128-exposer-ts.algo.ts:7", "teal": 99}, {"pc": [253, 254], "source": "contracts\\lib-pcg128-exposer-ts.algo.ts:7", "teal": 100}, {"pc": [255, 256], "source": "contracts\\lib-pcg128-exposer-ts.algo.ts:9", "teal": 104}, {"pc": [257, 258], "source": "contracts\\lib-pcg128-exposer-ts.algo.ts:9", "teal": 105}, {"pc": [259, 260], "source": "contracts\\lib-pcg128-exposer-ts.algo.ts:9", "teal": 106}, {"pc": [261, 262], "source": "contracts\\lib-pcg128-exposer-ts.algo.ts:9", "teal": 107}, {"pc": [263, 264, 265], "source": "contracts\\lib-pcg128-exposer-ts.algo.ts:9", "teal": 108}, {"pc": [266, 267], "source": "contracts\\lib-pcg128-exposer-ts.algo.ts:9", "teal": 109}, {"pc": [268, 269], "source": "contracts\\lib-pcg128-exposer-ts.algo.ts:10", "teal": 113}, {"pc": [270, 271], "source": "contracts\\lib-pcg128-exposer-ts.algo.ts:10", "teal": 114}, {"pc": [272, 273], "source": "contracts\\lib-pcg128-exposer-ts.algo.ts:10", "teal": 115}, {"pc": [274, 275, 276], "source": "contracts\\lib-pcg128-exposer-ts.algo.ts:10", "teal": 116}, {"pc": [277, 278], "source": "contracts\\lib-pcg128-exposer-ts.algo.ts:10", "teal": 117}, {"pc": [279, 280], "source": "contracts\\lib-pcg128-exposer-ts.algo.ts:12", "teal": 121}, {"pc": [281, 282], "source": "contracts\\lib-pcg128-exposer-ts.algo.ts:12", "teal": 122}, {"pc": [283], "source": "contracts\\lib-pcg128-exposer-ts.algo.ts:12", "teal": 123}, {"pc": [284, 285], "source": "contracts\\lib-pcg128-exposer-ts.algo.ts:12", "teal": 124}, {"pc": [286, 287], "source": "contracts\\lib-pcg128-exposer-ts.algo.ts:12", "teal": 125}, {"pc": [288, 289], "source": "contracts\\lib-pcg128-exposer-ts.algo.ts:12", "teal": 126}, {"pc": [290], "source": "contracts\\lib-pcg128-exposer-ts.algo.ts:12", "teal": 127}, {"pc": [291], "source": "contracts\\lib-pcg128-exposer-ts.algo.ts:12", "teal": 128}, {"pc": [292, 293], "source": "contracts\\lib-pcg128-exposer-ts.algo.ts:12", "teal": 129}, {"pc": [294], "source": "contracts\\lib-pcg128-exposer-ts.algo.ts:12", "teal": 130}, {"pc": [295], "source": "contracts\\lib-pcg128-exposer-ts.algo.ts:12", "teal": 131}, {"pc": [296], "source": "contracts\\lib-pcg128-exposer-ts.algo.ts:12", "teal": 132}, {"pc": [297], "source": "contracts\\lib-pcg128-exposer-ts.algo.ts:12", "teal": 133}, {"pc": [298, 299], "source": "contracts\\lib-pcg128-exposer-ts.algo.ts:12", "teal": 134}, {"pc": [300], "source": "contracts\\lib-pcg128-exposer-ts.algo.ts:12", "teal": 135}, {"pc": [301], "source": "contracts\\lib-pcg128-exposer-ts.algo.ts:12", "teal": 136}, {"pc": [302, 303, 304], "source": "contracts\\lib-pcg128-exposer-ts.algo.ts:12", "teal": 137}, {"pc": [305, 306], "source": "contracts\\lib-pcg128-exposer-ts.algo.ts:6", "teal": 140}, {"pc": [307, 308], "source": "contracts\\lib-pcg128-exposer-ts.algo.ts:6", "teal": 143}, {"pc": [309], "source": "contracts\\lib-pcg128-exposer-ts.algo.ts:6", "teal": 144}, {"pc": [310, 311, 312], "source": "contracts\\lib-pcg128-exposer-ts.algo.ts:15", "teal": 149}, {"pc": [313], "source": "contracts\\lib-pcg128-exposer-ts.algo.ts:15", "teal": 150}, {"pc": [314], "source": "contracts\\lib-pcg128-exposer-ts.algo.ts:15", "teal": 151}, {"pc": [315, 316, 317], "source": "contracts\\lib-pcg128-exposer-ts.algo.ts:15", "teal": 155}, {"pc": [318, 319], "source": "contracts\\lib-pcg128-exposer-ts.algo.ts:17", "teal": 159}, {"pc": [320, 321], "source": "contracts\\lib-pcg128-exposer-ts.algo.ts:17", "teal": 160}, {"pc": [322], "source": "contracts\\lib-pcg128-exposer-ts.algo.ts:17", "teal": 161}, {"pc": [323], "source": "contracts\\lib-pcg128-exposer-ts.algo.ts:17", "teal": 162}, {"pc": [324], "source": "contracts\\lib-pcg128-exposer-ts.algo.ts:15", "teal": 163}, {"pc": [325, 326, 327], "source": "contracts\\lib-pcg128-exposer-ts.algo.ts:20", "teal": 168}, {"pc": [328], "source": "contracts\\lib-pcg128-exposer-ts.algo.ts:20", "teal": 169}, {"pc": [329], "source": "contracts\\lib-pcg128-exposer-ts.algo.ts:20", "teal": 170}, {"pc": [330, 331, 332], "source": "contracts\\lib-pcg128-exposer-ts.algo.ts:20", "teal": 174}, {"pc": [333, 334], "source": "contracts\\lib-pcg128-exposer-ts.algo.ts:22", "teal": 178}, {"pc": [335, 336], "source": "contracts\\lib-pcg128-exposer-ts.algo.ts:22", "teal": 179}, {"pc": [337], "source": "contracts\\lib-pcg128-exposer-ts.algo.ts:22", "teal": 180}, {"pc": [338], "source": "contracts\\lib-pcg128-exposer-ts.algo.ts:22", "teal": 181}, {"pc": [339], "source": "contracts\\lib-pcg128-exposer-ts.algo.ts:20", "teal": 182}, {"pc": [340, 341], "source": "contracts\\lib-pcg128-exposer-ts.algo.ts:4", "teal": 185}, {"pc": [342, 343, 344], "source": "contracts\\lib-pcg128-exposer-ts.algo.ts:4", "teal": 186}, {"pc": [345, 346, 347, 348, 349, 350], "source": "contracts\\lib-pcg128-exposer-ts.algo.ts:4", "teal": 187}, {"pc": [351, 352, 353], "source": "contracts\\lib-pcg128-exposer-ts.algo.ts:4", "teal": 188}, {"pc": [354, 355, 356, 357], "source": "contracts\\lib-pcg128-exposer-ts.algo.ts:4", "teal": 189}, {"pc": [358], "errorMessage": "this contract does not implement the given ABI method for create NoOp", "source": "contracts\\lib-pcg128-exposer-ts.algo.ts:4", "teal": 192}, {"pc": [359, 360, 361, 362, 363, 364], "source": "contracts\\lib-pcg128-exposer-ts.algo.ts:4", "teal": 195}, {"pc": [365, 366, 367], "source": "contracts\\lib-pcg128-exposer-ts.algo.ts:4", "teal": 196}, {"pc": [368, 369, 370, 371], "source": "contracts\\lib-pcg128-exposer-ts.algo.ts:4", "teal": 197}, {"pc": [372], "errorMessage": "this contract does not implement the given ABI method for call NoOp", "source": "contracts\\lib-pcg128-exposer-ts.algo.ts:4", "teal": 200}, {"pc": [373], "errorMessage": "this contract does not implement any ABI methods for UpdateApplication create", "source": "contracts\\lib-pcg128-exposer-ts.algo.ts:4", "teal": 204}, {"pc": [374, 375], "source": "contracts\\lib-pcg128-exposer-ts.algo.ts:4", "teal": 207}, {"pc": [376, 377, 378], "source": "contracts\\lib-pcg128-exposer-ts.algo.ts:4", "teal": 208}, {"pc": [379, 380, 381, 382, 383, 384], "source": "contracts\\lib-pcg128-exposer-ts.algo.ts:4", "teal": 209}, {"pc": [385, 386, 387], "source": "contracts\\lib-pcg128-exposer-ts.algo.ts:4", "teal": 210}, {"pc": [388, 389, 390, 391], "source": "contracts\\lib-pcg128-exposer-ts.algo.ts:4", "teal": 211}, {"pc": [392], "errorMessage": "this contract does not implement the given ABI method for call UpdateApplication", "source": "contracts\\lib-pcg128-exposer-ts.algo.ts:4", "teal": 214}, {"pc": [393, 394, 395], "source": "lib_pcg\\pcg128.algo.ts:38", "teal": 218}, {"pc": [396], "source": "lib_pcg\\pcg128.algo.ts:38", "teal": 221}, {"pc": [397, 398], "source": "lib_pcg\\pcg128.algo.ts:38", "teal": 222}, {"pc": [399], "source": "lib_pcg\\pcg128.algo.ts:44", "teal": 226}, {"pc": [400, 401], "source": "lib_pcg\\pcg128.algo.ts:44", "teal": 227}, {"pc": [402, 403], "source": "lib_pcg\\pcg128.algo.ts:48", "teal": 231}, {"pc": [404, 405], "source": "lib_pcg\\pcg128.algo.ts:48", "teal": 232}, {"pc": [406, 407], "source": "lib_pcg\\pcg128.algo.ts:50", "teal": 237}, {"pc": [408], "source": "lib_pcg\\pcg128.algo.ts:50", "teal": 238}, {"pc": [409], "source": "lib_pcg\\pcg128.algo.ts:50", "teal": 239}, {"pc": [410], "source": "lib_pcg\\pcg128.algo.ts:50", "teal": 240}, {"pc": [411, 412, 413], "source": "lib_pcg\\pcg128.algo.ts:50", "teal": 241}, {"pc": [414, 415], "source": "lib_pcg\\pcg128.algo.ts:50", "teal": 242}, {"pc": [416], "source": "lib_pcg\\pcg128.algo.ts:50", "teal": 243}, {"pc": [417], "source": "lib_pcg\\pcg128.algo.ts:50", "teal": 244}, {"pc": [418], "source": "lib_pcg\\pcg128.algo.ts:50", "teal": 245}, {"pc": [419, 420, 421], "source": "lib_pcg\\pcg128.algo.ts:50", "teal": 248}, {"pc": [422], "source": "lib_pcg\\pcg128.algo.ts:51", "teal": 253}, {"pc": [423, 424], "source": "lib_pcg\\pcg128.algo.ts:51", "teal": 254}, {"pc": [425, 426], "source": "lib_pcg\\pcg128.algo.ts:51", "teal": 259}, {"pc": [427, 428], "source": "lib_pcg\\pcg128.algo.ts:51", "teal": 260}, {"pc": [429], "source": "lib_pcg\\pcg128.algo.ts:51", "teal": 261}, {"pc": [430, 431, 432], "source": "lib_pcg\\pcg128.algo.ts:51", "teal": 262}, {"pc": [433, 434], "source": "lib_pcg\\pcg128.algo.ts:52", "teal": 266}, {"pc": [435, 436, 437], "source": "lib_pcg\\pcg128.algo.ts:52", "teal": 267}, {"pc": [438, 439], "source": "lib_pcg\\pcg128.algo.ts:52", "teal": 268}, {"pc": [440, 441], "source": "lib_pcg\\pcg128.algo.ts:53", "teal": 272}, {"pc": [442, 443, 444], "source": "lib_pcg\\pcg128.algo.ts:53", "teal": 273}, {"pc": [445, 446], "source": "lib_pcg\\pcg128.algo.ts:53", "teal": 274}, {"pc": [447, 448], "source": "lib_pcg\\pcg128.algo.ts:54", "teal": 278}, {"pc": [449, 450], "source": "lib_pcg\\pcg128.algo.ts:54", "teal": 279}, {"pc": [451, 452, 453], "source": "lib_pcg\\pcg128.algo.ts:54", "teal": 280}, {"pc": [454], "source": "lib_pcg\\pcg128.algo.ts:54", "teal": 281}, {"pc": [455, 456], "source": "lib_pcg\\pcg128.algo.ts:54", "teal": 282}, {"pc": [457, 458], "source": "lib_pcg\\pcg128.algo.ts:51", "teal": 287}, {"pc": [459], "source": "lib_pcg\\pcg128.algo.ts:51", "teal": 288}, {"pc": [460], "source": "lib_pcg\\pcg128.algo.ts:51", "teal": 289}, {"pc": [461, 462], "source": "lib_pcg\\pcg128.algo.ts:51", "teal": 290}, {"pc": [463, 464, 465], "source": "lib_pcg\\pcg128.algo.ts:51", "teal": 291}, {"pc": [466, 467, 468], "source": "lib_pcg\\pcg128.algo.ts:50", "teal": 294}, {"pc": [469, 470], "source": "lib_pcg\\pcg128.algo.ts:57", "teal": 300}, {"pc": [471], "source": "lib_pcg\\pcg128.algo.ts:57", "teal": 301}, {"pc": [472], "source": "lib_pcg\\pcg128.algo.ts:57", "teal": 302}, {"pc": [473, 474, 475], "source": "lib_pcg\\pcg128.algo.ts:57", "teal": 303}, {"pc": [476, 477], "source": "lib_pcg\\pcg128.algo.ts:58", "teal": 308}, {"pc": [478], "source": "lib_pcg\\pcg128.algo.ts:58", "teal": 309}, {"pc": [479], "source": "lib_pcg\\pcg128.algo.ts:58", "teal": 310}, {"pc": [480], "source": "lib_pcg\\pcg128.algo.ts:58", "teal": 311}, {"pc": [481, 482], "source": "lib_pcg\\pcg128.algo.ts:60", "teal": 315}, {"pc": [483], "source": "lib_pcg\\pcg128.algo.ts:60", "teal": 316}, {"pc": [484], "source": "lib_pcg\\pcg128.algo.ts:60", "teal": 317}, {"pc": [485], "source": "lib_pcg\\pcg128.algo.ts:60", "teal": 318}, {"pc": [486, 487], "source": "lib_pcg\\pcg128.algo.ts:61", "teal": 322}, {"pc": [488, 489], "source": "lib_pcg\\pcg128.algo.ts:61", "teal": 323}, {"pc": [490], "source": "lib_pcg\\pcg128.algo.ts:61", "teal": 324}, {"pc": [491], "source": "lib_pcg\\pcg128.algo.ts:61", "teal": 325}, {"pc": [492], "source": "lib_pcg\\pcg128.algo.ts:61", "teal": 326}, {"pc": [493], "source": "lib_pcg\\pcg128.algo.ts:61", "teal": 327}, {"pc": [494, 495], "source": "lib_pcg\\pcg128.algo.ts:63", "teal": 331}, {"pc": [496, 497], "source": "lib_pcg\\pcg128.algo.ts:63", "teal": 332}, {"pc": [498], "source": "lib_pcg\\pcg128.algo.ts:63", "teal": 333}, {"pc": [499, 500], "source": "lib_pcg\\pcg128.algo.ts:63", "teal": 334}, {"pc": [501, 502, 503], "source": "lib_pcg\\pcg128.algo.ts:57", "teal": 335}, {"pc": [504, 505], "source": "lib_pcg\\pcg128.algo.ts:66", "teal": 340}, {"pc": [506, 507], "source": "lib_pcg\\pcg128.algo.ts:66", "teal": 341}, {"pc": [508], "source": "lib_pcg\\pcg128.algo.ts:66", "teal": 342}, {"pc": [509], "source": "lib_pcg\\pcg128.algo.ts:66", "teal": 343}, {"pc": [510], "source": "lib_pcg\\pcg128.algo.ts:71", "teal": 347}, {"pc": [511, 512], "source": "lib_pcg\\pcg128.algo.ts:71", "teal": 348}, {"pc": [513], "source": "lib_pcg\\pcg128.algo.ts:71", "teal": 349}, {"pc": [514, 515], "source": "lib_pcg\\pcg128.algo.ts:71", "teal": 350}, {"pc": [516, 517], "source": "lib_pcg\\pcg128.algo.ts:74", "teal": 355}, {"pc": [518, 519, 520], "source": "lib_pcg\\pcg128.algo.ts:74", "teal": 356}, {"pc": [521, 522], "source": "lib_pcg\\pcg128.algo.ts:74", "teal": 357}, {"pc": [523], "source": "lib_pcg\\pcg128.algo.ts:74", "teal": 358}, {"pc": [524, 525], "source": "lib_pcg\\pcg128.algo.ts:74", "teal": 359}, {"pc": [526], "source": "lib_pcg\\pcg128.algo.ts:76", "teal": 363}, {"pc": [527, 528], "source": "lib_pcg\\pcg128.algo.ts:76", "teal": 364}, {"pc": [529, 530], "source": "lib_pcg\\pcg128.algo.ts:76", "teal": 369}, {"pc": [531, 532], "source": "lib_pcg\\pcg128.algo.ts:76", "teal": 370}, {"pc": [533], "source": "lib_pcg\\pcg128.algo.ts:76", "teal": 371}, {"pc": [534, 535, 536], "source": "lib_pcg\\pcg128.algo.ts:76", "teal": 372}, {"pc": [537], "source": "lib_pcg\\pcg128.algo.ts:78", "teal": 379}, {"pc": [538, 539, 540], "source": "lib_pcg\\pcg128.algo.ts:78", "teal": 380}, {"pc": [541, 542], "source": "lib_pcg\\pcg128.algo.ts:79", "teal": 384}, {"pc": [543, 544, 545], "source": "lib_pcg\\pcg128.algo.ts:79", "teal": 385}, {"pc": [546, 547], "source": "lib_pcg\\pcg128.algo.ts:79", "teal": 386}, {"pc": [548, 549], "source": "lib_pcg\\pcg128.algo.ts:80", "teal": 390}, {"pc": [550, 551, 552], "source": "lib_pcg\\pcg128.algo.ts:80", "teal": 391}, {"pc": [553, 554], "source": "lib_pcg\\pcg128.algo.ts:80", "teal": 392}, {"pc": [555, 556], "source": "lib_pcg\\pcg128.algo.ts:81", "teal": 397}, {"pc": [557, 558, 559], "source": "lib_pcg\\pcg128.algo.ts:81", "teal": 398}, {"pc": [560, 561], "source": "lib_pcg\\pcg128.algo.ts:81", "teal": 399}, {"pc": [562], "source": "lib_pcg\\pcg128.algo.ts:81", "teal": 400}, {"pc": [563, 564, 565], "source": "lib_pcg\\pcg128.algo.ts:81", "teal": 401}, {"pc": [566, 567], "source": "lib_pcg\\pcg128.algo.ts:82", "teal": 406}, {"pc": [568, 569], "source": "lib_pcg\\pcg128.algo.ts:82", "teal": 407}, {"pc": [570, 571, 572], "source": "lib_pcg\\pcg128.algo.ts:82", "teal": 408}, {"pc": [573, 574], "source": "lib_pcg\\pcg128.algo.ts:82", "teal": 409}, {"pc": [575], "source": "lib_pcg\\pcg128.algo.ts:82", "teal": 410}, {"pc": [576, 577], "source": "lib_pcg\\pcg128.algo.ts:82", "teal": 411}, {"pc": [578], "source": "lib_pcg\\pcg128.algo.ts:82", "teal": 412}, {"pc": [579], "source": "lib_pcg\\pcg128.algo.ts:82", "teal": 413}, {"pc": [580], "source": "lib_pcg\\pcg128.algo.ts:82", "teal": 414}, {"pc": [581, 582], "source": "lib_pcg\\pcg128.algo.ts:82", "teal": 415}, {"pc": [583], "source": "lib_pcg\\pcg128.algo.ts:82", "teal": 416}, {"pc": [584], "errorMessage": "(stepResult[1] % absoluteBound) + lowerBound overflowed 128 bits", "source": "lib_pcg\\pcg128.algo.ts:82", "teal": 419}, {"pc": [585, 586], "source": "lib_pcg\\pcg128.algo.ts:82", "teal": 420}, {"pc": [587], "source": "lib_pcg\\pcg128.algo.ts:82", "teal": 421}, {"pc": [588], "source": "lib_pcg\\pcg128.algo.ts:82", "teal": 422}, {"pc": [589], "source": "lib_pcg\\pcg128.algo.ts:82", "teal": 423}, {"pc": [590], "source": "lib_pcg\\pcg128.algo.ts:82", "teal": 424}, {"pc": [591], "source": "lib_pcg\\pcg128.algo.ts:82", "teal": 425}, {"pc": [592], "source": "lib_pcg\\pcg128.algo.ts:82", "teal": 426}, {"pc": [593], "source": "lib_pcg\\pcg128.algo.ts:82", "teal": 427}, {"pc": [594], "source": "lib_pcg\\pcg128.algo.ts:82", "teal": 428}, {"pc": [595], "source": "lib_pcg\\pcg128.algo.ts:82", "teal": 429}, {"pc": [596, 597], "source": "lib_pcg\\pcg128.algo.ts:82", "teal": 430}, {"pc": [598, 599, 600], "source": "lib_pcg\\pcg128.algo.ts:83", "teal": 431}, {"pc": [601, 602, 603], "source": "lib_pcg\\pcg128.algo.ts:78", "teal": 434}, {"pc": [604, 605], "source": "lib_pcg\\pcg128.algo.ts:76", "teal": 441}, {"pc": [606], "source": "lib_pcg\\pcg128.algo.ts:76", "teal": 442}, {"pc": [607], "source": "lib_pcg\\pcg128.algo.ts:76", "teal": 443}, {"pc": [608, 609], "source": "lib_pcg\\pcg128.algo.ts:76", "teal": 444}, {"pc": [610, 611, 612], "source": "lib_pcg\\pcg128.algo.ts:76", "teal": 445}, {"pc": [613], "source": "lib_pcg\\pcg128.algo.ts:89", "teal": 452}, {"pc": [614], "source": "lib_pcg\\pcg128.algo.ts:89", "teal": 453}, {"pc": [615, 616, 617, 618], "source": "lib_pcg\\pcg128.algo.ts:89", "teal": 454}, {"pc": [619, 620], "source": "lib_pcg\\pcg128.algo.ts:89", "teal": 455}, {"pc": [621, 622, 623], "source": "lib_pcg\\pcg128.algo.ts:89", "teal": 456}, {"pc": [624, 625], "source": "lib_pcg\\pcg128.algo.ts:89", "teal": 457}, {"pc": [626], "source": "lib_pcg\\pcg128.algo.ts:89", "teal": 458}, {"pc": [627], "source": "lib_pcg\\pcg128.algo.ts:89", "teal": 459}, {"pc": [628], "source": "lib_pcg\\pcg128.algo.ts:89", "teal": 460}, {"pc": [629], "source": "lib_pcg\\pcg128.algo.ts:89", "teal": 461}, {"pc": [630], "source": "lib_pcg\\pcg128.algo.ts:89", "teal": 462}, {"pc": [631, 632, 633], "source": "lib_pcg\\pcg128.algo.ts:89", "teal": 463}, {"pc": [634], "source": "lib_pcg\\pcg128.algo.ts:89", "teal": 464}, {"pc": [635], "source": "lib_pcg\\pcg128.algo.ts:89", "teal": 465}, {"pc": [636, 637, 638], "source": "lib_pcg\\pcg128.algo.ts:89", "teal": 466}, {"pc": [639], "source": "lib_pcg\\pcg128.algo.ts:89", "teal": 467}, {"pc": [640], "source": "lib_pcg\\pcg128.algo.ts:89", "teal": 468}, {"pc": [641, 642], "source": "lib_pcg\\pcg128.algo.ts:38", "teal": 471}, {"pc": [643, 644], "source": "lib_pcg\\pcg128.algo.ts:38", "teal": 474}, {"pc": [645], "source": "lib_pcg\\pcg128.algo.ts:38", "teal": 475}, {"pc": [646, 647, 648], "source": "lib_pcg\\pcg128.algo.ts:6", "teal": 479}, {"pc": [649, 650], "source": "lib_pcg\\pcg128.algo.ts:8", "teal": 485}, {"pc": [651], "source": "lib_pcg\\pcg128.algo.ts:8", "teal": 486}, {"pc": [652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685], "source": "lib_pcg\\pcg128.algo.ts:8", "teal": 487}, {"pc": [686], "source": "lib_pcg\\pcg128.algo.ts:8", "teal": 488}, {"pc": [687, 688], "source": "lib_pcg\\pcg128.algo.ts:8", "teal": 489}, {"pc": [689], "source": "lib_pcg\\pcg128.algo.ts:8", "teal": 490}, {"pc": [690], "source": "lib_pcg\\pcg128.algo.ts:6", "teal": 491}, {"pc": [691, 692, 693], "source": "lib_pcg\\pcg128.algo.ts:12", "teal": 495}, {"pc": [694], "source": "lib_pcg\\pcg128.algo.ts:12", "teal": 498}, {"pc": [695, 696], "source": "lib_pcg\\pcg128.algo.ts:12", "teal": 499}, {"pc": [697, 698], "source": "lib_pcg\\consts.algo.ts:3", "teal": 505}, {"pc": [699, 700], "source": "lib_pcg\\pcg128.algo.ts:13", "teal": 509}, {"pc": [701, 702, 703], "source": "lib_pcg\\pcg128.algo.ts:13", "teal": 510}, {"pc": [704], "source": "lib_pcg\\pcg128.algo.ts:13", "teal": 511}, {"pc": [705, 706, 707], "source": "lib_pcg\\pcg128.algo.ts:13", "teal": 512}, {"pc": [708, 709], "source": "lib_pcg\\pcg128.algo.ts:13", "teal": 513}, {"pc": [710, 711], "source": "lib_pcg\\consts.algo.ts:5", "teal": 519}, {"pc": [712, 713], "source": "lib_pcg\\pcg128.algo.ts:14", "teal": 523}, {"pc": [714], "source": "lib_pcg\\pcg128.algo.ts:14", "teal": 524}, {"pc": [715], "source": "lib_pcg\\pcg128.algo.ts:14", "teal": 525}, {"pc": [716, 717, 718], "source": "lib_pcg\\pcg128.algo.ts:14", "teal": 526}, {"pc": [719], "source": "lib_pcg\\pcg128.algo.ts:14", "teal": 527}, {"pc": [720, 721, 722], "source": "lib_pcg\\pcg128.algo.ts:14", "teal": 528}, {"pc": [723], "source": "lib_pcg\\pcg128.algo.ts:14", "teal": 531}, {"pc": [724], "source": "lib_pcg\\pcg128.algo.ts:14", "teal": 534}, {"pc": [725, 726], "source": "lib_pcg\\pcg128.algo.ts:14", "teal": 538}, {"pc": [727, 728, 729], "source": "lib_pcg\\pcg128.algo.ts:14", "teal": 539}, {"pc": [730], "source": "lib_pcg\\pcg128.algo.ts:14", "teal": 540}, {"pc": [731, 732, 733], "source": "lib_pcg\\pcg128.algo.ts:14", "teal": 541}, {"pc": [734, 735], "source": "lib_pcg\\pcg128.algo.ts:14", "teal": 542}, {"pc": [736, 737], "source": "lib_pcg\\consts.algo.ts:7", "teal": 548}, {"pc": [738, 739], "source": "lib_pcg\\pcg128.algo.ts:15", "teal": 552}, {"pc": [740], "source": "lib_pcg\\pcg128.algo.ts:15", "teal": 553}, {"pc": [741], "source": "lib_pcg\\pcg128.algo.ts:15", "teal": 554}, {"pc": [742, 743, 744], "source": "lib_pcg\\pcg128.algo.ts:15", "teal": 555}, {"pc": [745], "source": "lib_pcg\\pcg128.algo.ts:15", "teal": 556}, {"pc": [746, 747, 748], "source": "lib_pcg\\pcg128.algo.ts:15", "teal": 557}, {"pc": [749], "source": "lib_pcg\\pcg128.algo.ts:15", "teal": 560}, {"pc": [750], "source": "lib_pcg\\pcg128.algo.ts:15", "teal": 563}, {"pc": [751, 752], "source": "lib_pcg\\pcg128.algo.ts:15", "teal": 567}, {"pc": [753, 754, 755], "source": "lib_pcg\\pcg128.algo.ts:15", "teal": 568}, {"pc": [756], "source": "lib_pcg\\pcg128.algo.ts:15", "teal": 569}, {"pc": [757, 758, 759], "source": "lib_pcg\\pcg128.algo.ts:15", "teal": 570}, {"pc": [760, 761], "source": "lib_pcg\\pcg128.algo.ts:15", "teal": 571}, {"pc": [762, 763], "source": "lib_pcg\\consts.algo.ts:9", "teal": 577}, {"pc": [764, 765], "source": "lib_pcg\\pcg128.algo.ts:16", "teal": 581}, {"pc": [766], "source": "lib_pcg\\pcg128.algo.ts:16", "teal": 582}, {"pc": [767], "source": "lib_pcg\\pcg128.algo.ts:16", "teal": 583}, {"pc": [768, 769, 770], "source": "lib_pcg\\pcg128.algo.ts:16", "teal": 584}, {"pc": [771], "source": "lib_pcg\\pcg128.algo.ts:16", "teal": 585}, {"pc": [772, 773, 774], "source": "lib_pcg\\pcg128.algo.ts:16", "teal": 586}, {"pc": [775], "source": "lib_pcg\\pcg128.algo.ts:16", "teal": 589}, {"pc": [776], "source": "lib_pcg\\pcg128.algo.ts:16", "teal": 592}, {"pc": [777, 778], "source": "lib_pcg\\pcg128.algo.ts:16", "teal": 596}, {"pc": [779, 780, 781], "source": "lib_pcg\\pcg128.algo.ts:16", "teal": 597}, {"pc": [782], "source": "lib_pcg\\pcg128.algo.ts:16", "teal": 598}, {"pc": [783, 784, 785], "source": "lib_pcg\\pcg128.algo.ts:16", "teal": 599}, {"pc": [786, 787], "source": "lib_pcg\\pcg128.algo.ts:16", "teal": 600}, {"pc": [788, 789], "source": "lib_pcg\\pcg128.algo.ts:19", "teal": 610}, {"pc": [790], "source": "lib_pcg\\pcg128.algo.ts:19", "teal": 611}, {"pc": [791, 792], "source": "lib_pcg\\pcg128.algo.ts:19", "teal": 612}, {"pc": [793], "source": "lib_pcg\\pcg128.algo.ts:19", "teal": 613}, {"pc": [794], "source": "lib_pcg\\pcg128.algo.ts:19", "teal": 614}, {"pc": [795, 796], "source": "lib_pcg\\pcg128.algo.ts:19", "teal": 615}, {"pc": [797], "source": "lib_pcg\\pcg128.algo.ts:19", "teal": 616}, {"pc": [798], "source": "lib_pcg\\pcg128.algo.ts:19", "teal": 617}, {"pc": [799, 800], "source": "lib_pcg\\pcg128.algo.ts:19", "teal": 618}, {"pc": [801], "source": "lib_pcg\\pcg128.algo.ts:19", "teal": 619}, {"pc": [802], "source": "lib_pcg\\pcg128.algo.ts:19", "teal": 620}, {"pc": [803, 804], "source": "lib_pcg\\pcg128.algo.ts:20", "teal": 621}, {"pc": [805, 806, 807], "source": "lib_pcg\\pcg128.algo.ts:20", "teal": 622}, {"pc": [808], "source": "lib_pcg\\pcg128.algo.ts:20", "teal": 623}, {"pc": [809, 810, 811], "source": "lib_pcg\\pcg128.algo.ts:20", "teal": 624}, {"pc": [812], "source": "lib_pcg\\pcg128.algo.ts:20", "teal": 625}, {"pc": [813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830], "source": "lib_pcg\\pcg128.algo.ts:20", "teal": 626}, {"pc": [831], "source": "lib_pcg\\pcg128.algo.ts:20", "teal": 627}, {"pc": [832, 833], "source": "lib_pcg\\pcg128.algo.ts:21", "teal": 628}, {"pc": [834, 835, 836], "source": "lib_pcg\\pcg128.algo.ts:21", "teal": 629}, {"pc": [837], "source": "lib_pcg\\pcg128.algo.ts:21", "teal": 630}, {"pc": [838, 839, 840], "source": "lib_pcg\\pcg128.algo.ts:21", "teal": 631}, {"pc": [841], "source": "lib_pcg\\pcg128.algo.ts:21", "teal": 632}, {"pc": [842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859], "source": "lib_pcg\\pcg128.algo.ts:21", "teal": 633}, {"pc": [860], "source": "lib_pcg\\pcg128.algo.ts:21", "teal": 634}, {"pc": [861], "source": "lib_pcg\\pcg128.algo.ts:20", "teal": 635}, {"pc": [862, 863], "source": "lib_pcg\\pcg128.algo.ts:22", "teal": 636}, {"pc": [864, 865, 866], "source": "lib_pcg\\pcg128.algo.ts:22", "teal": 637}, {"pc": [867], "source": "lib_pcg\\pcg128.algo.ts:22", "teal": 638}, {"pc": [868, 869, 870], "source": "lib_pcg\\pcg128.algo.ts:22", "teal": 639}, {"pc": [871], "source": "lib_pcg\\pcg128.algo.ts:22", "teal": 640}, {"pc": [872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889], "source": "lib_pcg\\pcg128.algo.ts:22", "teal": 641}, {"pc": [890], "source": "lib_pcg\\pcg128.algo.ts:22", "teal": 642}, {"pc": [891], "source": "lib_pcg\\pcg128.algo.ts:21", "teal": 643}, {"pc": [892, 893], "source": "lib_pcg\\pcg128.algo.ts:23", "teal": 644}, {"pc": [894, 895, 896], "source": "lib_pcg\\pcg128.algo.ts:23", "teal": 645}, {"pc": [897], "source": "lib_pcg\\pcg128.algo.ts:23", "teal": 646}, {"pc": [898, 899, 900], "source": "lib_pcg\\pcg128.algo.ts:23", "teal": 647}, {"pc": [901], "source": "lib_pcg\\pcg128.algo.ts:23", "teal": 648}, {"pc": [902], "source": "lib_pcg\\pcg128.algo.ts:22", "teal": 649}, {"pc": [903], "source": "lib_pcg\\pcg128.algo.ts:20", "teal": 650}, {"pc": [904], "source": "lib_pcg\\pcg128.algo.ts:20", "teal": 651}, {"pc": [905, 906], "source": "lib_pcg\\pcg128.algo.ts:20", "teal": 652}, {"pc": [907], "source": "lib_pcg\\pcg128.algo.ts:20", "teal": 653}, {"pc": [908], "errorMessage": "((__pcg32Output(state[0]) as uint128) * Uint<128>('79228162514264337593543950336')) |\\n      ((__pcg32Output(state[1]) as uint128) * Uint<128>('18446744073709551616')) |\\n      ((__pcg32Output(state[2]) as uint128) * Uint<128>('4294967296')) |\\n      (__pcg32Output(state[3]) as uint128) overflowed 128 bits", "source": "lib_pcg\\pcg128.algo.ts:20", "teal": 656}, {"pc": [909, 910], "source": "lib_pcg\\pcg128.algo.ts:20", "teal": 657}, {"pc": [911], "source": "lib_pcg\\pcg128.algo.ts:20", "teal": 658}, {"pc": [912], "source": "lib_pcg\\pcg128.algo.ts:20", "teal": 659}, {"pc": [913], "source": "lib_pcg\\pcg128.algo.ts:20", "teal": 660}, {"pc": [914], "source": "lib_pcg\\pcg128.algo.ts:20", "teal": 661}, {"pc": [915], "source": "lib_pcg\\pcg128.algo.ts:20", "teal": 662}, {"pc": [916], "source": "lib_pcg\\pcg128.algo.ts:20", "teal": 663}, {"pc": [917], "source": "lib_pcg\\pcg128.algo.ts:20", "teal": 664}, {"pc": [918], "source": "lib_pcg\\pcg128.algo.ts:20", "teal": 665}, {"pc": [919], "source": "lib_pcg\\pcg128.algo.ts:20", "teal": 666}, {"pc": [920, 921], "source": "lib_pcg\\pcg128.algo.ts:12", "teal": 669}, {"pc": [922, 923], "source": "lib_pcg\\pcg128.algo.ts:12", "teal": 672}, {"pc": [924], "source": "lib_pcg\\pcg128.algo.ts:12", "teal": 673}, {"pc": [925, 926, 927], "source": "lib_pcg\\pcg32.algo.ts:22", "teal": 677}, {"pc": [928], "source": "lib_pcg\\pcg32.algo.ts:22", "teal": 680}, {"pc": [929], "source": "lib_pcg\\pcg32.algo.ts:22", "teal": 681}, {"pc": [930, 931], "source": "lib_pcg\\pcg32.algo.ts:23", "teal": 685}, {"pc": [932, 933], "source": "lib_pcg\\pcg32.algo.ts:23", "teal": 686}, {"pc": [934], "source": "lib_pcg\\pcg32.algo.ts:23", "teal": 687}, {"pc": [935, 936], "source": "lib_pcg\\pcg32.algo.ts:23", "teal": 688}, {"pc": [937], "source": "lib_pcg\\pcg32.algo.ts:23", "teal": 689}, {"pc": [938, 939], "source": "lib_pcg\\pcg32.algo.ts:23", "teal": 690}, {"pc": [940], "source": "lib_pcg\\pcg32.algo.ts:23", "teal": 691}, {"pc": [941, 942, 943], "source": "lib_pcg\\pcg32.algo.ts:23", "teal": 692}, {"pc": [944, 945], "source": "lib_pcg\\pcg32.algo.ts:23", "teal": 693}, {"pc": [946, 947], "source": "lib_pcg\\pcg32.algo.ts:24", "teal": 697}, {"pc": [948, 949], "source": "lib_pcg\\pcg32.algo.ts:24", "teal": 698}, {"pc": [950], "source": "lib_pcg\\pcg32.algo.ts:24", "teal": 699}, {"pc": [951, 952], "source": "lib_pcg\\pcg32.algo.ts:24", "teal": 700}, {"pc": [953, 954], "source": "lib_pcg\\pcg32.algo.ts:25", "teal": 704}, {"pc": [955, 956], "source": "lib_pcg\\pcg32.algo.ts:25", "teal": 705}, {"pc": [957], "source": "lib_pcg\\pcg32.algo.ts:25", "teal": 706}, {"pc": [958, 959], "source": "lib_pcg\\pcg32.algo.ts:25", "teal": 707}, {"pc": [960, 961], "source": "lib_pcg\\pcg32.algo.ts:25", "teal": 708}, {"pc": [962, 963, 964], "source": "lib_pcg\\pcg32.algo.ts:25", "teal": 709}, {"pc": [965, 966], "source": "lib_pcg\\pcg32.algo.ts:25", "teal": 710}, {"pc": [967], "source": "lib_pcg\\pcg32.algo.ts:25", "teal": 711}, {"pc": [968], "source": "lib_pcg\\pcg32.algo.ts:25", "teal": 712}, {"pc": [969, 970, 971], "source": "lib_pcg\\pcg32.algo.ts:25", "teal": 713}, {"pc": [972], "source": "lib_pcg\\pcg32.algo.ts:25", "teal": 714}, {"pc": [973, 974], "source": "lib_pcg\\pcg32.algo.ts:22", "teal": 717}, {"pc": [975, 976], "source": "lib_pcg\\pcg32.algo.ts:22", "teal": 720}, {"pc": [977], "source": "lib_pcg\\pcg32.algo.ts:22", "teal": 721}, {"pc": [978, 979, 980], "source": "lib_pcg\\pcg32.algo.ts:5", "teal": 725}, {"pc": [981], "source": "lib_pcg\\pcg32.algo.ts:5", "teal": 728}, {"pc": [982], "source": "lib_pcg\\pcg32.algo.ts:5", "teal": 729}, {"pc": [983, 984], "source": "lib_pcg\\pcg32.algo.ts:6", "teal": 733}, {"pc": [985], "source": "lib_pcg\\pcg32.algo.ts:6", "teal": 734}, {"pc": [986], "source": "lib_pcg\\pcg32.algo.ts:6", "teal": 735}, {"pc": [987], "source": "lib_pcg\\pcg32.algo.ts:6", "teal": 736}, {"pc": [988, 989], "source": "lib_pcg\\pcg32.algo.ts:6", "teal": 737}, {"pc": [990, 991], "source": "lib_pcg\\pcg32.algo.ts:6", "teal": 738}, {"pc": [992, 993], "source": "lib_pcg\\pcg32.algo.ts:7", "teal": 742}, {"pc": [994, 995], "source": "lib_pcg\\pcg32.algo.ts:5", "teal": 745}, {"pc": [996, 997], "source": "lib_pcg\\pcg32.algo.ts:5", "teal": 748}, {"pc": [998], "source": "lib_pcg\\pcg32.algo.ts:5", "teal": 749}, {"pc": [999, 1000, 1001], "source": "lib_pcg\\pcg32.algo.ts:10", "teal": 753}, {"pc": [1002, 1003], "source": "lib_pcg\\pcg32.algo.ts:12", "teal": 757}, {"pc": [1004, 1005, 1006, 1007, 1008, 1009], "source": "lib_pcg\\pcg32.algo.ts:12", "teal": 758}, {"pc": [1010], "source": "lib_pcg\\pcg32.algo.ts:12", "teal": 759}, {"pc": [1011], "source": "lib_pcg\\pcg32.algo.ts:10", "teal": 760}, {"pc": [1012, 1013, 1014], "source": "lib_pcg\\pcg32.algo.ts:15", "teal": 764}, {"pc": [1015], "source": "lib_pcg\\pcg32.algo.ts:15", "teal": 767}, {"pc": [1016, 1017], "source": "lib_pcg\\pcg32.algo.ts:15", "teal": 768}, {"pc": [1018, 1019], "source": "lib_pcg\\pcg32.algo.ts:16", "teal": 772}, {"pc": [1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029], "source": "lib_pcg\\consts.algo.ts:1", "teal": 776}, {"pc": [1030], "source": "lib_pcg\\pcg32.algo.ts:16", "teal": 777}, {"pc": [1031, 1032], "source": "lib_pcg\\pcg32.algo.ts:16", "teal": 778}, {"pc": [1033, 1034], "source": "lib_pcg\\pcg32.algo.ts:16", "teal": 779}, {"pc": [1035, 1036], "source": "lib_pcg\\pcg32.algo.ts:17", "teal": 783}, {"pc": [1037, 1038], "source": "lib_pcg\\pcg32.algo.ts:17", "teal": 784}, {"pc": [1039], "source": "lib_pcg\\pcg32.algo.ts:17", "teal": 785}, {"pc": [1040, 1041], "source": "lib_pcg\\pcg32.algo.ts:17", "teal": 786}, {"pc": [1042, 1043], "source": "lib_pcg\\pcg32.algo.ts:17", "teal": 787}, {"pc": [1044, 1045], "source": "lib_pcg\\pcg32.algo.ts:19", "teal": 791}, {"pc": [1046, 1047], "source": "lib_pcg\\pcg32.algo.ts:15", "teal": 794}, {"pc": [1048, 1049], "source": "lib_pcg\\pcg32.algo.ts:15", "teal": 797}, {"pc": [1050], "source": "lib_pcg\\pcg32.algo.ts:15", "teal": 798}, {"pc": [1051, 1052, 1053], "source": "lib_pcg\\pcg128.algo.ts:27", "teal": 802}, {"pc": [1054], "source": "lib_pcg\\pcg128.algo.ts:28", "teal": 806}, {"pc": [1055], "source": "lib_pcg\\pcg128.algo.ts:28", "teal": 807}, {"pc": [1056], "source": "lib_pcg\\pcg128.algo.ts:28", "teal": 808}, {"pc": [1057], "source": "lib_pcg\\pcg128.algo.ts:28", "teal": 809}, {"pc": [1058, 1059], "source": "lib_pcg\\consts.algo.ts:3", "teal": 820}, {"pc": [1060, 1061], "source": "lib_pcg\\pcg128.algo.ts:31", "teal": 824}, {"pc": [1062], "source": "lib_pcg\\pcg128.algo.ts:31", "teal": 825}, {"pc": [1063], "source": "lib_pcg\\pcg128.algo.ts:31", "teal": 826}, {"pc": [1064, 1065, 1066], "source": "lib_pcg\\pcg128.algo.ts:31", "teal": 827}, {"pc": [1067], "source": "lib_pcg\\pcg128.algo.ts:31", "teal": 828}, {"pc": [1068, 1069], "source": "lib_pcg\\consts.algo.ts:5", "teal": 834}, {"pc": [1070, 1071], "source": "lib_pcg\\pcg128.algo.ts:32", "teal": 838}, {"pc": [1072, 1073], "source": "lib_pcg\\pcg128.algo.ts:32", "teal": 839}, {"pc": [1074], "source": "lib_pcg\\pcg128.algo.ts:32", "teal": 840}, {"pc": [1075, 1076, 1077], "source": "lib_pcg\\pcg128.algo.ts:32", "teal": 841}, {"pc": [1078], "source": "lib_pcg\\pcg128.algo.ts:32", "teal": 842}, {"pc": [1079], "source": "lib_pcg\\pcg128.algo.ts:32", "teal": 843}, {"pc": [1080, 1081], "source": "lib_pcg\\consts.algo.ts:7", "teal": 849}, {"pc": [1082, 1083], "source": "lib_pcg\\pcg128.algo.ts:33", "teal": 853}, {"pc": [1084], "source": "lib_pcg\\pcg128.algo.ts:33", "teal": 854}, {"pc": [1085], "source": "lib_pcg\\pcg128.algo.ts:33", "teal": 855}, {"pc": [1086, 1087, 1088], "source": "lib_pcg\\pcg128.algo.ts:33", "teal": 856}, {"pc": [1089], "source": "lib_pcg\\pcg128.algo.ts:33", "teal": 857}, {"pc": [1090], "source": "lib_pcg\\pcg128.algo.ts:33", "teal": 858}, {"pc": [1091, 1092], "source": "lib_pcg\\consts.algo.ts:9", "teal": 864}, {"pc": [1093, 1094], "source": "lib_pcg\\pcg128.algo.ts:34", "teal": 868}, {"pc": [1095, 1096], "source": "lib_pcg\\pcg128.algo.ts:34", "teal": 869}, {"pc": [1097], "source": "lib_pcg\\pcg128.algo.ts:34", "teal": 870}, {"pc": [1098, 1099, 1100], "source": "lib_pcg\\pcg128.algo.ts:34", "teal": 871}, {"pc": [1101], "source": "lib_pcg\\pcg128.algo.ts:34", "teal": 872}, {"pc": [1102], "source": "lib_pcg\\pcg128.algo.ts:34", "teal": 873}, {"pc": [1103], "source": "lib_pcg\\pcg128.algo.ts:27", "teal": 874}, {"pc": [1104, 1105, 1106], "source": "lib_pcg\\pcg32.algo.ts:89", "teal": 878}, {"pc": [1107], "source": "lib_pcg\\pcg32.algo.ts:89", "teal": 881}, {"pc": [1108, 1109], "source": "lib_pcg\\pcg32.algo.ts:89", "teal": 882}, {"pc": [1110, 1111], "source": "lib_pcg\\pcg32.algo.ts:90", "teal": 886}, {"pc": [1112], "source": "lib_pcg\\pcg32.algo.ts:90", "teal": 887}, {"pc": [1113, 1114, 1115], "source": "lib_pcg\\pcg32.algo.ts:90", "teal": 888}, {"pc": [1116, 1117], "source": "lib_pcg\\pcg32.algo.ts:90", "teal": 889}, {"pc": [1118, 1119], "source": "lib_pcg\\pcg32.algo.ts:91", "teal": 893}, {"pc": [1120, 1121], "source": "lib_pcg\\pcg32.algo.ts:91", "teal": 894}, {"pc": [1122], "source": "lib_pcg\\pcg32.algo.ts:91", "teal": 895}, {"pc": [1123, 1124], "source": "lib_pcg\\pcg32.algo.ts:91", "teal": 896}, {"pc": [1125, 1126], "source": "lib_pcg\\pcg32.algo.ts:91", "teal": 897}, {"pc": [1127, 1128], "source": "lib_pcg\\pcg32.algo.ts:93", "teal": 901}, {"pc": [1129, 1130], "source": "lib_pcg\\pcg32.algo.ts:93", "teal": 902}, {"pc": [1131, 1132, 1133], "source": "lib_pcg\\pcg32.algo.ts:93", "teal": 903}, {"pc": [1134, 1135], "source": "lib_pcg\\pcg32.algo.ts:89", "teal": 906}, {"pc": [1136, 1137], "source": "lib_pcg\\pcg32.algo.ts:89", "teal": 909}, {"pc": [1138], "source": "lib_pcg\\pcg32.algo.ts:89", "teal": 910}, {"pc": [1139, 1140, 1141], "source": "contracts\\lib-pcg128-exposer-ts.algo.ts:4", "teal": 913}, {"pc": [1142, 1143], "source": "contracts\\lib-pcg128-exposer-ts.algo.ts:4", "teal": 914}, {"pc": [1144, 1145], "source": "contracts\\lib-pcg128-exposer-ts.algo.ts:4", "teal": 915}, {"pc": [1146], "source": "contracts\\lib-pcg128-exposer-ts.algo.ts:4", "teal": 916}, {"pc": [1147, 1148], "source": "contracts\\lib-pcg128-exposer-ts.algo.ts:4", "teal": 917}, {"pc": [1149, 1150], "source": "contracts\\lib-pcg128-exposer-ts.algo.ts:4", "teal": 918}, {"pc": [1151], "source": "contracts\\lib-pcg128-exposer-ts.algo.ts:4", "teal": 919}, {"pc": [1152, 1153, 1154], "source": "contracts\\lib-pcg128-exposer-ts.algo.ts:4", "teal": 922}, {"pc": [1155, 1156], "source": "contracts\\lib-pcg128-exposer-ts.algo.ts:4", "teal": 923}, {"pc": [1157, 1158], "source": "contracts\\lib-pcg128-exposer-ts.algo.ts:4", "teal": 924}, {"pc": [1159], "source": "contracts\\lib-pcg128-exposer-ts.algo.ts:4", "teal": 925}, {"pc": [1160, 1161], "source": "contracts\\lib-pcg128-exposer-ts.algo.ts:4", "teal": 926}, {"pc": [1162, 1163], "source": "contracts\\lib-pcg128-exposer-ts.algo.ts:4", "teal": 927}, {"pc": [1164], "source": "contracts\\lib-pcg128-exposer-ts.algo.ts:4", "teal": 928}, {"pc": [1165], "source": "contracts\\lib-pcg128-exposer-ts.algo.ts:4", "teal": 929}, {"pc": [1166, 1167], "source": "contracts\\lib-pcg128-exposer-ts.algo.ts:4", "teal": 930}, {"pc": [1168], "source": "contracts\\lib-pcg128-exposer-ts.algo.ts:4", "teal": 931}, {"pc": [1169], "source": "contracts\\lib-pcg128-exposer-ts.algo.ts:4", "teal": 932}, {"pc": [1170], "source": "contracts\\lib-pcg128-exposer-ts.algo.ts:4", "teal": 933}, {"pc": [1171, 1172, 1173], "source": "contracts\\lib-pcg128-exposer-ts.algo.ts:4", "teal": 934}, {"pc": [1174, 1175], "source": "contracts\\lib-pcg128-exposer-ts.algo.ts:4", "teal": 935}, {"pc": [1176, 1177], "source": "contracts\\lib-pcg128-exposer-ts.algo.ts:4", "teal": 936}, {"pc": [1178], "source": "contracts\\lib-pcg128-exposer-ts.algo.ts:4", "teal": 937}, {"pc": [1179], "source": "contracts\\lib-pcg128-exposer-ts.algo.ts:4", "teal": 938}, {"pc": [1180, 1181], "source": "contracts\\lib-pcg128-exposer-ts.algo.ts:4", "teal": 939}, {"pc": [1182, 1183], "source": "contracts\\lib-pcg128-exposer-ts.algo.ts:4", "teal": 940}, {"pc": [1184, 1185], "source": "contracts\\lib-pcg128-exposer-ts.algo.ts:4", "teal": 941}, {"pc": [1186, 1187], "source": "contracts\\lib-pcg128-exposer-ts.algo.ts:4", "teal": 942}, {"pc": [1188], "source": "contracts\\lib-pcg128-exposer-ts.algo.ts:4", "teal": 943}]}, "clear": {"pcOffsetMethod": "none", "sourceInfo": []}}}"""
APP_SPEC = algokit_utils.Arc56Contract.from_json(_APP_SPEC_JSON)

def _parse_abi_args(args: object | None = None) -> list[object] | None:
    """Helper to parse ABI args into the format expected by underlying client"""
    if args is None:
        return None

    def convert_dataclass(value: object) -> object:
        if dataclasses.is_dataclass(value):
            return tuple(convert_dataclass(getattr(value, field.name)) for field in dataclasses.fields(value))
        elif isinstance(value, (list, tuple)):
            return type(value)(convert_dataclass(item) for item in value)
        return value

    match args:
        case tuple():
            method_args = list(args)
        case _ if dataclasses.is_dataclass(args):
            method_args = [getattr(args, field.name) for field in dataclasses.fields(args)]
        case _:
            raise ValueError("Invalid 'args' type. Expected 'tuple' or 'TypedDict' for respective typed arguments.")

    return [
        convert_dataclass(arg) if not isinstance(arg, algokit_utils.AppMethodCallTransactionArgument) else arg
        for arg in method_args
    ] if method_args else None

def _init_dataclass(cls: type, data: dict) -> object:
    """
    Recursively instantiate a dataclass of type `cls` from `data`.

    For each field on the dataclass, if the field type is also a dataclass
    and the corresponding data is a dict, instantiate that field recursively.
    """
    field_values = {}
    for field in dataclasses.fields(cls):
        field_value = data.get(field.name)
        # Check if the field expects another dataclass and the value is a dict.
        if dataclasses.is_dataclass(field.type) and isinstance(field_value, dict):
            field_values[field.name] = _init_dataclass(typing.cast(type, field.type), field_value)
        else:
            field_values[field.name] = field_value
    return cls(**field_values)

@dataclasses.dataclass(frozen=True, kw_only=True)
class BoundedRandUint128Args:
    """Dataclass for bounded_rand_uint128 arguments"""
    seed: bytes | str | tuple[int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int]
    lower_bound: int
    upper_bound: int
    length: int

    @property
    def abi_method_signature(self) -> str:
        return "bounded_rand_uint128(byte[32],uint128,uint128,uint16)uint128[]"


class _LibPcg128ExposerTsUpdate:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    def update_application(
        self,
        params: algokit_utils.CommonAppCallParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppUpdateMethodCallParams:
    
        params = params or algokit_utils.CommonAppCallParams()
        compilation_params = compilation_params or algokit_utils.AppClientCompilationParams()
        return self.app_client.params.update(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "updateApplication()void",
        }))


class LibPcg128ExposerTsParams:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    @property
    def update(self) -> "_LibPcg128ExposerTsUpdate":
        return _LibPcg128ExposerTsUpdate(self.app_client)

    def bounded_rand_uint128(
        self,
        args: tuple[bytes | str | tuple[int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int], int, int, int] | BoundedRandUint128Args,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "bounded_rand_uint128(byte[32],uint128,uint128,uint16)uint128[]",
            "args": method_args,
        }))

    def create_application(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "createApplication()void",
        }))

    def clear_state(
        self,
        params: algokit_utils.AppClientBareCallParams | None = None,
        
    ) -> algokit_utils.AppCallParams:
        return self.app_client.params.bare.clear_state(
            params,
            
        )


class _LibPcg128ExposerTsUpdateTransaction:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    def update_application(
        self,
        params: algokit_utils.CommonAppCallParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.BuiltTransactions:
    
        params = params or algokit_utils.CommonAppCallParams()
        compilation_params = compilation_params or algokit_utils.AppClientCompilationParams()
        return self.app_client.create_transaction.update(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "updateApplication()void",
        }))


class LibPcg128ExposerTsCreateTransactionParams:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    @property
    def update(self) -> "_LibPcg128ExposerTsUpdateTransaction":
        return _LibPcg128ExposerTsUpdateTransaction(self.app_client)

    def bounded_rand_uint128(
        self,
        args: tuple[bytes | str | tuple[int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int], int, int, int] | BoundedRandUint128Args,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "bounded_rand_uint128(byte[32],uint128,uint128,uint16)uint128[]",
            "args": method_args,
        }))

    def create_application(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "createApplication()void",
        }))

    def clear_state(
        self,
        params: algokit_utils.AppClientBareCallParams | None = None,
        
    ) -> Transaction:
        return self.app_client.create_transaction.bare.clear_state(
            params,
            
        )


class _LibPcg128ExposerTsUpdateSend:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    def update_application(
        self,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
    
        params = params or algokit_utils.CommonAppCallParams()
        compilation_params = compilation_params or algokit_utils.AppClientCompilationParams()
        response = self.app_client.send.update(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "updateApplication()void",
        }), send_params=send_params, compilation_params=compilation_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppUpdateTransactionResult[None], parsed_response)


class LibPcg128ExposerTsSend:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    @property
    def update(self) -> "_LibPcg128ExposerTsUpdateSend":
        return _LibPcg128ExposerTsUpdateSend(self.app_client)

    def bounded_rand_uint128(
        self,
        args: tuple[bytes | str | tuple[int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int], int, int, int] | BoundedRandUint128Args,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[list[int]]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "bounded_rand_uint128(byte[32],uint128,uint128,uint16)uint128[]",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[list[int]], parsed_response)

    def create_application(
        self,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
    
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "createApplication()void",
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def clear_state(
        self,
        params: algokit_utils.AppClientBareCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[algokit_utils.ABIReturn]:
        return self.app_client.send.bare.clear_state(
            params,
            send_params=send_params,
        )


class LibPcg128ExposerTsState:
    """Methods to access state for the current LibPcg128ExposerTs app"""

    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

class LibPcg128ExposerTsClient:
    """Client for interacting with LibPcg128ExposerTs smart contract"""

    @typing.overload
    def __init__(self, app_client: algokit_utils.AppClient) -> None: ...
    
    @typing.overload
    def __init__(
        self,
        *,
        algorand: _AlgoKitAlgorandClient,
        app_id: int,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> None: ...

    def __init__(
        self,
        app_client: algokit_utils.AppClient | None = None,
        *,
        algorand: _AlgoKitAlgorandClient | None = None,
        app_id: int | None = None,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> None:
        if app_client:
            self.app_client = app_client
        elif algorand and app_id:
            self.app_client = algokit_utils.AppClient(
                algokit_utils.AppClientParams(
                    algorand=algorand,
                    app_spec=APP_SPEC,
                    app_id=app_id,
                    app_name=app_name,
                    default_sender=default_sender,
                    default_signer=default_signer,
                    approval_source_map=approval_source_map,
                    clear_source_map=clear_source_map,
                )
            )
        else:
            raise ValueError("Either app_client or algorand and app_id must be provided")
    
        self.params = LibPcg128ExposerTsParams(self.app_client)
        self.create_transaction = LibPcg128ExposerTsCreateTransactionParams(self.app_client)
        self.send = LibPcg128ExposerTsSend(self.app_client)
        self.state = LibPcg128ExposerTsState(self.app_client)

    @staticmethod
    def from_creator_and_name(
        creator_address: str,
        app_name: str,
        algorand: _AlgoKitAlgorandClient,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
        ignore_cache: bool | None = None,
        app_lookup_cache: algokit_utils.ApplicationLookup | None = None,
    ) -> "LibPcg128ExposerTsClient":
        return LibPcg128ExposerTsClient(
            algokit_utils.AppClient.from_creator_and_name(
                creator_address=creator_address,
                app_name=app_name,
                app_spec=APP_SPEC,
                algorand=algorand,
                default_sender=default_sender,
                default_signer=default_signer,
                approval_source_map=approval_source_map,
                clear_source_map=clear_source_map,
                ignore_cache=ignore_cache,
                app_lookup_cache=app_lookup_cache,
            )
        )
    
    @staticmethod
    def from_network(
        algorand: _AlgoKitAlgorandClient,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> "LibPcg128ExposerTsClient":
        return LibPcg128ExposerTsClient(
            algokit_utils.AppClient.from_network(
                app_spec=APP_SPEC,
                algorand=algorand,
                app_name=app_name,
                default_sender=default_sender,
                default_signer=default_signer,
                approval_source_map=approval_source_map,
                clear_source_map=clear_source_map,
            )
        )

    @property
    def app_id(self) -> int:
        return self.app_client.app_id
    
    @property
    def app_address(self) -> str:
        return self.app_client.app_address
    
    @property
    def app_name(self) -> str:
        return self.app_client.app_name
    
    @property
    def app_spec(self) -> algokit_utils.Arc56Contract:
        return self.app_client.app_spec
    
    @property
    def algorand(self) -> _AlgoKitAlgorandClient:
        return self.app_client.algorand

    def clone(
        self,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> "LibPcg128ExposerTsClient":
        return LibPcg128ExposerTsClient(
            self.app_client.clone(
                app_name=app_name,
                default_sender=default_sender,
                default_signer=default_signer,
                approval_source_map=approval_source_map,
                clear_source_map=clear_source_map,
            )
        )

    def new_group(self) -> "LibPcg128ExposerTsComposer":
        return LibPcg128ExposerTsComposer(self)

    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["bounded_rand_uint128(byte[32],uint128,uint128,uint16)uint128[]"],
        return_value: algokit_utils.ABIReturn | None
    ) -> list[int] | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["createApplication()void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["updateApplication()void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: str,
        return_value: algokit_utils.ABIReturn | None
    ) -> algokit_utils.ABIValue | algokit_utils.ABIStruct | None: ...

    def decode_return_value(
        self,
        method: str,
        return_value: algokit_utils.ABIReturn | None
    ) -> algokit_utils.ABIValue | algokit_utils.ABIStruct | None | list[int]:
        """Decode ABI return value for the given method."""
        if return_value is None:
            return None
    
        arc56_method = self.app_spec.get_arc56_method(method)
        decoded = return_value.get_arc56_value(arc56_method, self.app_spec.structs)
    
        # If method returns a struct, convert the dict to appropriate dataclass
        if (arc56_method and
            arc56_method.returns and
            arc56_method.returns.struct and
            isinstance(decoded, dict)):
            struct_class = globals().get(arc56_method.returns.struct)
            if struct_class:
                return struct_class(**typing.cast(dict, decoded))
        return decoded


@dataclasses.dataclass(frozen=True)
class LibPcg128ExposerTsMethodCallCreateParams(
    algokit_utils.AppClientCreateSchema, algokit_utils.BaseAppClientMethodCallParams[
        typing.Any,
        str | None,
    ]
):
    """Parameters for creating LibPcg128ExposerTs contract using ABI"""
    on_complete: typing.Literal[OnComplete.NoOpOC] | None = None
    method: str | None = None

    def to_algokit_utils_params(self) -> algokit_utils.AppClientMethodCallCreateParams:
        method_args = _parse_abi_args(self.args)
        return algokit_utils.AppClientMethodCallCreateParams(
            **{
                **self.__dict__,
                "method": self.method or getattr(self.args, "abi_method_signature", None),
                "args": method_args,
            }
        )

@dataclasses.dataclass(frozen=True)
class LibPcg128ExposerTsMethodCallUpdateParams(
    algokit_utils.BaseAppClientMethodCallParams[
        typing.Any,
        str | None,
    ]
):
    """Parameters for calling LibPcg128ExposerTs contract using ABI"""
    on_complete: typing.Literal[OnComplete.UpdateApplicationOC] | None = None
    method: str | None = None

    def to_algokit_utils_params(self) -> algokit_utils.AppClientMethodCallParams:
        method_args = _parse_abi_args(self.args)
        return algokit_utils.AppClientMethodCallParams(
            **{
                **self.__dict__,
                "method": self.method or getattr(self.args, "abi_method_signature", None),
                "args": method_args,
            }
        )

class LibPcg128ExposerTsFactory(algokit_utils.TypedAppFactoryProtocol[LibPcg128ExposerTsMethodCallCreateParams, LibPcg128ExposerTsMethodCallUpdateParams, None]):
    """Factory for deploying and managing LibPcg128ExposerTsClient smart contracts"""

    def __init__(
        self,
        algorand: _AlgoKitAlgorandClient,
        *,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        version: str | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None,
    ):
        self.app_factory = algokit_utils.AppFactory(
            params=algokit_utils.AppFactoryParams(
                algorand=algorand,
                app_spec=APP_SPEC,
                app_name=app_name,
                default_sender=default_sender,
                default_signer=default_signer,
                version=version,
                compilation_params=compilation_params,
            )
        )
        self.params = LibPcg128ExposerTsFactoryParams(self.app_factory)
        self.create_transaction = LibPcg128ExposerTsFactoryCreateTransaction(self.app_factory)
        self.send = LibPcg128ExposerTsFactorySend(self.app_factory)

    @property
    def app_name(self) -> str:
        return self.app_factory.app_name
    
    @property
    def app_spec(self) -> algokit_utils.Arc56Contract:
        return self.app_factory.app_spec
    
    @property
    def algorand(self) -> _AlgoKitAlgorandClient:
        return self.app_factory.algorand

    def deploy(
        self,
        *,
        on_update: algokit_utils.OnUpdate | None = None,
        on_schema_break: algokit_utils.OnSchemaBreak | None = None,
        create_params: LibPcg128ExposerTsMethodCallCreateParams | None = None,
        update_params: LibPcg128ExposerTsMethodCallUpdateParams | None = None,
        delete_params: None = None,
        existing_deployments: algokit_utils.ApplicationLookup | None = None,
        ignore_cache: bool = False,
        app_name: str | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None,
        send_params: algokit_utils.SendParams | None = None,
    ) -> tuple[LibPcg128ExposerTsClient, algokit_utils.AppFactoryDeployResult]:
        """Deploy the application"""
        deploy_response = self.app_factory.deploy(
            on_update=on_update,
            on_schema_break=on_schema_break,
            create_params=create_params.to_algokit_utils_params() if create_params else None,
            update_params=update_params.to_algokit_utils_params() if update_params else None,
            delete_params=delete_params,
            existing_deployments=existing_deployments,
            ignore_cache=ignore_cache,
            app_name=app_name,
            compilation_params=compilation_params,
            send_params=send_params,
        )

        return LibPcg128ExposerTsClient(deploy_response[0]), deploy_response[1]

    def get_app_client_by_creator_and_name(
        self,
        creator_address: str,
        app_name: str,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        ignore_cache: bool | None = None,
        app_lookup_cache: algokit_utils.ApplicationLookup | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> LibPcg128ExposerTsClient:
        """Get an app client by creator address and name"""
        return LibPcg128ExposerTsClient(
            self.app_factory.get_app_client_by_creator_and_name(
                creator_address,
                app_name,
                default_sender,
                default_signer,
                ignore_cache,
                app_lookup_cache,
                approval_source_map,
                clear_source_map,
            )
        )

    def get_app_client_by_id(
        self,
        app_id: int,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> LibPcg128ExposerTsClient:
        """Get an app client by app ID"""
        return LibPcg128ExposerTsClient(
            self.app_factory.get_app_client_by_id(
                app_id,
                app_name,
                default_sender,
                default_signer,
                approval_source_map,
                clear_source_map,
            )
        )


class LibPcg128ExposerTsFactoryParams:
    """Parameters for creating transactions for LibPcg128ExposerTs contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory
        self.create = LibPcg128ExposerTsFactoryCreateParams(app_factory)
        self.update = LibPcg128ExposerTsFactoryUpdateParams(app_factory)
        self.delete = LibPcg128ExposerTsFactoryDeleteParams(app_factory)

class LibPcg128ExposerTsFactoryCreateParams:
    """Parameters for 'create' operations of LibPcg128ExposerTs contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateParams:
        """Creates an instance using a bare call"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.bare.create(
            algokit_utils.AppFactoryCreateParams(**dataclasses.asdict(params)),
            compilation_params=compilation_params)

    def bounded_rand_uint128(
        self,
        args: tuple[bytes | str | tuple[int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int], int, int, int] | BoundedRandUint128Args,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the bounded_rand_uint128(byte[32],uint128,uint128,uint16)uint128[] ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "bounded_rand_uint128(byte[32],uint128,uint128,uint16)uint128[]",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def create_application(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the createApplication()void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "createApplication()void",
                "args": None,
                }
            ),
            compilation_params=compilation_params
        )

    def update_application(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the updateApplication()void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "updateApplication()void",
                "args": None,
                }
            ),
            compilation_params=compilation_params
        )

class LibPcg128ExposerTsFactoryUpdateParams:
    """Parameters for 'update' operations of LibPcg128ExposerTs contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        
    ) -> algokit_utils.AppUpdateParams:
        """Updates an instance using a bare call"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.bare.deploy_update(
            algokit_utils.AppClientBareCallParams(**dataclasses.asdict(params)),
            )

class LibPcg128ExposerTsFactoryDeleteParams:
    """Parameters for 'delete' operations of LibPcg128ExposerTs contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        
    ) -> algokit_utils.AppDeleteParams:
        """Deletes an instance using a bare call"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.bare.deploy_delete(
            algokit_utils.AppClientBareCallParams(**dataclasses.asdict(params)),
            )


class LibPcg128ExposerTsFactoryCreateTransaction:
    """Create transactions for LibPcg128ExposerTs contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory
        self.create = LibPcg128ExposerTsFactoryCreateTransactionCreate(app_factory)


class LibPcg128ExposerTsFactoryCreateTransactionCreate:
    """Create new instances of LibPcg128ExposerTs contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
    ) -> Transaction:
        """Creates a new instance using a bare call"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.create_transaction.bare.create(
            algokit_utils.AppFactoryCreateParams(**dataclasses.asdict(params)),
        )


class LibPcg128ExposerTsFactorySend:
    """Send calls to LibPcg128ExposerTs contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory
        self.create = LibPcg128ExposerTsFactorySendCreate(app_factory)


class LibPcg128ExposerTsFactorySendCreate:
    """Send create calls to LibPcg128ExposerTs contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        send_params: algokit_utils.SendParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None,
    ) -> tuple[LibPcg128ExposerTsClient, algokit_utils.SendAppCreateTransactionResult]:
        """Creates a new instance using a bare call"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        result = self.app_factory.send.bare.create(
            algokit_utils.AppFactoryCreateParams(**dataclasses.asdict(params)),
            send_params=send_params,
            compilation_params=compilation_params
        )
        return LibPcg128ExposerTsClient(result[0]), result[1]

    def create_application(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        send_params: algokit_utils.SendParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> tuple[LibPcg128ExposerTsClient, algokit_utils.AppFactoryCreateMethodCallResult[None]]:
            """Creates and sends a transaction using the createApplication()void ABI method"""
            params = params or algokit_utils.CommonAppCallCreateParams()
            client, result = self.app_factory.send.create(
                algokit_utils.AppFactoryCreateMethodCallParams(
                    **{
                    **dataclasses.asdict(params),
                    "method": "createApplication()void",
                    "args": None,
                    }
                ),
                send_params=send_params,
                compilation_params=compilation_params
            )
            return_value = None if result.abi_return is None else typing.cast(None, result.abi_return)
    
            return LibPcg128ExposerTsClient(client), algokit_utils.AppFactoryCreateMethodCallResult[None](
                **{
                    **result.__dict__,
                    "app_id": result.app_id,
                    "abi_return": return_value,
                    "transaction": result.transaction,
                    "confirmation": result.confirmation,
                    "group_id": result.group_id,
                    "tx_ids": result.tx_ids,
                    "transactions": result.transactions,
                    "confirmations": result.confirmations,
                    "app_address": result.app_address,
                }
            )


class _LibPcg128ExposerTsUpdateComposer:
    def __init__(self, composer: "LibPcg128ExposerTsComposer"):
        self.composer = composer
    def update_application(
        self,
        params: algokit_utils.CommonAppCallParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> "LibPcg128ExposerTsComposer":
        self.composer._composer.add_app_update_method_call(
            self.composer.client.params.update.update_application(
                
                params=params,
                compilation_params=compilation_params
            )
        )
        self.composer._result_mappers.append(
            lambda v: self.composer.client.decode_return_value(
                "updateApplication()void", v
            )
        )
        return self.composer


class LibPcg128ExposerTsComposer:
    """Composer for creating transaction groups for LibPcg128ExposerTs contract calls"""

    def __init__(self, client: "LibPcg128ExposerTsClient"):
        self.client = client
        self._composer = client.algorand.new_group()
        self._result_mappers: list[typing.Callable[[algokit_utils.ABIReturn | None], object] | None] = []

    @property
    def update(self) -> "_LibPcg128ExposerTsUpdateComposer":
        return _LibPcg128ExposerTsUpdateComposer(self)

    def bounded_rand_uint128(
        self,
        args: tuple[bytes | str | tuple[int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int], int, int, int] | BoundedRandUint128Args,
        params: algokit_utils.CommonAppCallParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> "LibPcg128ExposerTsComposer":
        self._composer.add_app_call_method_call(
            self.client.params.bounded_rand_uint128(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "bounded_rand_uint128(byte[32],uint128,uint128,uint16)uint128[]", v
            )
        )
        return self

    def create_application(
        self,
        params: algokit_utils.CommonAppCallParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> "LibPcg128ExposerTsComposer":
        self._composer.add_app_call_method_call(
            self.client.params.create_application(
                
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "createApplication()void", v
            )
        )
        return self

    def clear_state(
        self,
        *,
        args: list[bytes] | None = None,
        params: algokit_utils.CommonAppCallParams | None = None,
    ) -> "LibPcg128ExposerTsComposer":
        params=params or algokit_utils.CommonAppCallParams()
        self._composer.add_app_call(
            self.client.params.clear_state(
                algokit_utils.AppClientBareCallParams(
                    **{
                        **dataclasses.asdict(params),
                        "args": args
                    }
                )
            )
        )
        return self
    
    def add_transaction(
        self, txn: Transaction, signer: TransactionSigner | None = None
    ) -> "LibPcg128ExposerTsComposer":
        self._composer.add_transaction(txn, signer)
        return self
    
    def composer(self) -> algokit_utils.TransactionComposer:
        return self._composer
    
    def simulate(
        self,
        allow_more_logs: bool | None = None,
        allow_empty_signatures: bool | None = None,
        allow_unnamed_resources: bool | None = None,
        extra_opcode_budget: int | None = None,
        exec_trace_config: SimulateTraceConfig | None = None,
        simulation_round: int | None = None,
        skip_signatures: bool | None = None,
    ) -> algokit_utils.SendAtomicTransactionComposerResults:
        return self._composer.simulate(
            allow_more_logs=allow_more_logs,
            allow_empty_signatures=allow_empty_signatures,
            allow_unnamed_resources=allow_unnamed_resources,
            extra_opcode_budget=extra_opcode_budget,
            exec_trace_config=exec_trace_config,
            simulation_round=simulation_round,
            skip_signatures=skip_signatures,
        )
    
    def send(
        self,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAtomicTransactionComposerResults:
        return self._composer.send(send_params)
