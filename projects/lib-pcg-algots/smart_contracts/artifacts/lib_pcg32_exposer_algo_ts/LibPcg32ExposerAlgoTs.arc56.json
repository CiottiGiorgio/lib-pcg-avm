{
    "name": "LibPcg32ExposerAlgoTs",
    "structs": {},
    "methods": [
        {
            "name": "bounded_rand_uint32",
            "args": [
                {
                    "type": "byte[8]",
                    "name": "seed"
                },
                {
                    "type": "uint32",
                    "name": "lower_bound"
                },
                {
                    "type": "uint32",
                    "name": "upper_bound"
                },
                {
                    "type": "uint16",
                    "name": "length"
                }
            ],
            "returns": {
                "type": "uint32[]"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "bounded_rand_uint16",
            "args": [
                {
                    "type": "byte[8]",
                    "name": "seed"
                },
                {
                    "type": "uint16",
                    "name": "lower_bound"
                },
                {
                    "type": "uint16",
                    "name": "upper_bound"
                },
                {
                    "type": "uint16",
                    "name": "length"
                }
            ],
            "returns": {
                "type": "uint16[]"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "bounded_rand_uint8",
            "args": [
                {
                    "type": "byte[8]",
                    "name": "seed"
                },
                {
                    "type": "uint8",
                    "name": "lower_bound"
                },
                {
                    "type": "uint8",
                    "name": "upper_bound"
                },
                {
                    "type": "uint16",
                    "name": "length"
                }
            ],
            "returns": {
                "type": "uint8[]"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 0
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {},
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": [
            "UpdateApplication"
        ]
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        74,
                        102,
                        130
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        172
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        77,
                        105,
                        133,
                        177
                    ],
                    "errorMessage": "can only call when not creating"
                },
                {
                    "pc": [
                        241
                    ],
                    "errorMessage": "overflow"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "byteCode": {
        "approval": "CiAGAQAIrf7V5NSF/ahYz4Keu+/v3oIU/////w8mAQQVH3x1MRtBAHKCAwTtBvcKBI18znkE0KNeHjYaAI4DADoAHgACI0MxGRREMRhENhoBNhoCNhoDNhoEiAHyKExQsCJDMRkURDEYRDYaATYaAjYaAzYaBIgBtyhMULAiQzEZFEQxGEQ2GgE2GgI2GgM2GgSIAXwoTFCwIkOBBCMxGY4CAAkAA0L/nDEYFEQiQzEYRIgBuCJDigEBi/8VJBJEi/8XIyUdRQEhBB5FAR5FASUdRQEhBB5FAYmKBQKAAEcGi/+BgIAEDESL/xZJk4EQDkRXBgKL/CQSQAAQi/yBEBJAAAiL/IEgEkEAzCJEi/yBA5FJjAEkTAmMBov9QAA1i/5AADAjjAOLA4v/DEEAHIv7iACnFosGiwFYiwdMUIwHiwMiCIwDjPtC/9yL+4sHjAGMAImL/kEAa4v+Ig1EIov8kIv+DUSL/iIJi/0NRIv+i/0JjACLAEkcIh5FASEFGkwYjAUjjASLBIv/DEH/vIv7iABHSU4CjAJMiwUPQQAfiwKLABiL/QgWiwaLAViLB0xQjAeLBCIIjASM+0L/yIz7Qv/LIov8kEkiCYv9DUSL/QmMAEL/niNC/zGKAQKL/yUdRQEhBB5FAYv/gRKRi/8bgRuRIQUai/+BO5FKkUwcIh5FAYEfGk8CTJAhBRoZiYoEAYv8iP6ei/0Xi/4Xi/8XTwOBIE4ETgSI/q1FAYmKBAGL/Ij+f4v9F4v+F4v/F08DgRBOBE4EiP6ORQGJigQBi/yI/mCL/ReL/heL/xdPAyROBE4EiP5wRQGJMQAyCRJEiQ==",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 4,
            "minor": 7,
            "patch": 0
        }
    },
    "events": [],
    "templateVariables": {}
}