{
    "name": "LibPcg32ExposerAlgoTs",
    "structs": {},
    "methods": [
        {
            "name": "bounded_rand_uint32",
            "args": [
                {
                    "type": "byte[8]",
                    "name": "seed"
                },
                {
                    "type": "uint32",
                    "name": "lower_bound"
                },
                {
                    "type": "uint32",
                    "name": "upper_bound"
                },
                {
                    "type": "uint16",
                    "name": "length"
                }
            ],
            "returns": {
                "type": "uint32[]"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "bounded_rand_uint16",
            "args": [
                {
                    "type": "byte[8]",
                    "name": "seed"
                },
                {
                    "type": "uint16",
                    "name": "lower_bound"
                },
                {
                    "type": "uint16",
                    "name": "upper_bound"
                },
                {
                    "type": "uint16",
                    "name": "length"
                }
            ],
            "returns": {
                "type": "uint16[]"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "bounded_rand_uint8",
            "args": [
                {
                    "type": "byte[8]",
                    "name": "seed"
                },
                {
                    "type": "uint8",
                    "name": "lower_bound"
                },
                {
                    "type": "uint8",
                    "name": "upper_bound"
                },
                {
                    "type": "uint16",
                    "name": "length"
                }
            ],
            "returns": {
                "type": "uint8[]"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 0
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {},
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": [
            "UpdateApplication"
        ]
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        75,
                        123,
                        171
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        235
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        78,
                        126,
                        174,
                        240
                    ],
                    "errorMessage": "can only call when not creating"
                },
                {
                    "pc": [
                        627,
                        671,
                        713
                    ],
                    "errorMessage": "invalid array length header"
                },
                {
                    "pc": [
                        680
                    ],
                    "errorMessage": "invalid number of bytes for arc4.dynamic_array<arc4.uint16>"
                },
                {
                    "pc": [
                        637
                    ],
                    "errorMessage": "invalid number of bytes for arc4.dynamic_array<arc4.uint32>"
                },
                {
                    "pc": [
                        720
                    ],
                    "errorMessage": "invalid number of bytes for arc4.dynamic_array<arc4.uint8>"
                },
                {
                    "pc": [
                        86,
                        134,
                        182
                    ],
                    "errorMessage": "invalid number of bytes for arc4.static_array<arc4.uint8, 8>"
                },
                {
                    "pc": [
                        110,
                        142,
                        150,
                        158,
                        208
                    ],
                    "errorMessage": "invalid number of bytes for arc4.uint16"
                },
                {
                    "pc": [
                        191,
                        200
                    ],
                    "errorMessage": "invalid number of bytes for arc4.uint32"
                },
                {
                    "pc": [
                        94,
                        102
                    ],
                    "errorMessage": "invalid number of bytes for arc4.uint8"
                },
                {
                    "pc": [
                        306
                    ],
                    "errorMessage": "overflow"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "byteCode": {
        "approval": "CiAHAQACCK3+1eTUhf2oWM+Cnrvv796CFP////8PJgEEFR98dTEbQQCwggME7Qb3CgSNfM55BNCjXh42GgCOAwBiADIAAiNDMRkURDEYRDYaAUkVJRJENhoCSRUiEkQ2GgNJFSISRDYaBEkVJBJEiAI4KExQsCJDMRkURDEYRDYaAUkVJRJENhoCSRUkEkQ2GgNJFSQSRDYaBEkVJBJEiAHdKExQsCJDMRkURDEYRDYaAUkVJRJENhoCSRWBBBJENhoDSRWBBBJENhoESRUkEkSIAX8oTFCwIkOBBCMxGY4CAAkAA0L/XjEYFEQiQzEYRIgB3iJDigEBi/8VJRJEi/8XIyEEHUUBIQUeRQEeRQEhBB1FASEFHkUBiYoFAoAARwaL/4GAgAQMRIv/FkmTgRAORFcGAov8JRJAABCL/IEQEkAACIv8gSASQQDMIkSL/IEDkUmMASVMCYwGi/1AADWL/kAAMCOMA4sDi/8MQQAci/uIAKcWiwaLAViLB0xQjAeLAyIIjAOM+0L/3Iv7iweMAYwAiYv+QQBri/4iDUQii/yQi/4NRIv+IgmL/Q1Ei/6L/QmMAIsASRwiHkUBIQYaTBiMBSOMBIsEi/8MQf+8i/uIAEdJTgKMAkyLBQ9BAB+LAosAGIv9CBaLBosBWIsHTFCMB4sEIgiMBIz7Qv/IjPtC/8sii/yQSSIJi/0NRIv9CYwAQv+eI0L/MYoBAov/IQQdRQEhBR5FAYv/gRKRi/8bgRuRIQYai/+BO5FKkUwcIh5FAYEfGk8CTJAhBhoZiYoEAYv8iP6bi/0Xi/4Xi/8XTwOBIE4ETgSI/qxFAUkjWYEECyQISwEVEkSJigQBi/yI/m+L/ReL/heL/xdPA4EQTgROBIj+gEUBSSNZJAskCEsBFRJEiYoEAYv8iP5Ei/0Xi/4Xi/8XTwMlTgROBIj+VkUBSSNZJAhLARUSRIkxADIJEkSJ",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 4,
            "minor": 11,
            "patch": 0
        }
    },
    "events": [],
    "templateVariables": {}
}