{
    "name": "LibPcg32ExposerAlgoTs",
    "structs": {},
    "methods": [
        {
            "name": "bounded_rand_uint32",
            "args": [
                {
                    "type": "byte[8]",
                    "name": "seed"
                },
                {
                    "type": "uint32",
                    "name": "lower_bound"
                },
                {
                    "type": "uint32",
                    "name": "upper_bound"
                },
                {
                    "type": "uint16",
                    "name": "length"
                }
            ],
            "returns": {
                "type": "uint32[]"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "bounded_rand_uint16",
            "args": [
                {
                    "type": "byte[8]",
                    "name": "seed"
                },
                {
                    "type": "uint16",
                    "name": "lower_bound"
                },
                {
                    "type": "uint16",
                    "name": "upper_bound"
                },
                {
                    "type": "uint16",
                    "name": "length"
                }
            ],
            "returns": {
                "type": "uint16[]"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "bounded_rand_uint8",
            "args": [
                {
                    "type": "byte[8]",
                    "name": "seed"
                },
                {
                    "type": "uint8",
                    "name": "lower_bound"
                },
                {
                    "type": "uint8",
                    "name": "upper_bound"
                },
                {
                    "type": "uint16",
                    "name": "length"
                }
            ],
            "returns": {
                "type": "uint8[]"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 0
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {},
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": [
            "UpdateApplication"
        ]
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        78,
                        106,
                        134
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        176
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        81,
                        109,
                        137,
                        181
                    ],
                    "errorMessage": "can only call when not creating"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "byteCode": {
        "approval": "CiAHAQACCK3+1eTUhf2oWM+Cnrvv796CFP////8PJgIEFR98dQIAADEbQQByggME7Qb3CgSNfM55BNCjXh42GgCOAwA6AB4AAiNDMRkURDEYRDYaATYaAjYaAzYaBIgCayhMULAiQzEZFEQxGEQ2GgE2GgI2GgM2GgSIAfMoTFCwIkMxGRREMRhENhoBNhoCNhoDNhoEiAF5KExQsCJDgQQjMRmOAgAJAANC/5wxGBREIkMxGESIAmoiQ4oBAov/IQQdRQEhBR5FAYv/gRKRi/8bgRuRIQYai/+BO5FKkUwcIh5FAYEfGk8CTJAhBhoZiYoFAoAARwaL/4GAgAQMRIv/FlcGAov8JRJAABCL/IEQEkAACIv8gSASQQDMIkSL/IEDkUmMASVMCYwGi/1AADWL/kAAMCOMA4sDi/8MQQAci/uI/3UWiwaLAViLB0xQjAeLAyIIjAOM+0L/3Iv7iweMAYwAiYv+QQBri/4iDUQii/yQi/4NRIv+IgmL/Q1Ei/6L/QmMAIsASRwiHkUBIQYaTBiMBSOMBIsEi/8MQf+8i/uI/xVJTgKMAkyLBQ9BAB+LAosAGIv9CBaLBosBWIsHTFCMB4sEIgiMBIz7Qv/IjPtC/8sii/yQSSIJi/0NRIv9CYwAQv+eI0L/MYoBAYv/FSUSRIv/FyMhBB1FASEFHkUBHkUBIQQdRQEhBR5FAYmKBAGL/Ij/04v9F4v+F4v/F0lOBClOBE8DgSBOBE4EiP69RQEjiwOLAAxBACyLAVcCAIsDSU4CgQQLJAiLAkxaFlcEBFBJFYEEChZXBgJMUIwBIgiMA0L/zIsBjACJigQBi/yI/3WL/ReL/heL/xdJTgQpTgRPA4EQTgROBIj+X0UBI4sDiwAMQQAqiwFXAgCLA0lOAiQLJAiLAkxZFlcGAlBJFSQKFlcGAkxQjAEiCIwDQv/OiwGMAImKBAGL/Ij/GYv9F4v+F4v/F0lOBClOBE8DJU4ETgSI/gRFASOLA4sADEEAJosBVwIAJIsDSU4DCIsCTFUWVwcBUEkVFlcGAkxQjAEiCIwDQv/SiwGMAIkxADIJEkSJ",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 4,
            "minor": 4,
            "patch": 4
        }
    },
    "events": [],
    "templateVariables": {}
}