{
  "version": 3,
  "sources": [
    "C:/Users/ciott/PycharmProjects/lib-pcg-avm/projects/lib-pcg-algots/lib_pcg/consts.algo.ts",
    "C:/Users/ciott/PycharmProjects/lib-pcg-avm/projects/lib-pcg-algots/lib_pcg/pcg32.algo.ts",
    "C:/Users/ciott/PycharmProjects/lib-pcg-avm/projects/lib-pcg-algots/smart_contracts/lib_pcg32_exposer_ts/contract.algo.ts"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AEIA;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;AAAA;;AA6BE;;AAAA;AAAA;AAAA;;AAAA;AA7BF;;;AAAA;;;AAAA;;;AAAA;;;AA6BE;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAdA;;AAAA;AAAA;AAAA;;AAAA;AAfF;;;AAAA;;;AAAA;;;AAAA;;;AAeE;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAdA;;AAAA;AAAA;AAAA;;AAAA;AADF;;;AAAA;;;AAAA;;;AAAA;;;AACE;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AADF;;AAAA;AAAA;;AAAA;;;;;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;AA2CG;;AAAA;AAAA;;;AAAA;;ADnBH;;;AAZqB;;ADbe;;ACaf;AAAA;;ADXmB;;ACYnB;AAAA;;AAMsB;;AAAc;;AAAd;AAAA;;AAAA;AAA2B;;AAAlC;AAXlB;;AAAT;AAYD;;AAAoB;;AAAd;AACL;AAAA;AAlBoB;AAAA;AAAQ;AAAhB;AAAA;;AAkBoE;;AAApB;AAAnB;;AAAA;AAAA;AAbhC;;AAAT;AAaA;AAIP;AAGF;;;;;;;AASS;;AAAS;;;;AAAT;AAAP;AACS;;AAAA;AAAA;;;AAEF;;AAAY;AAAZ;AAAA;;;AAAiB;;AAAY;;AAAZ;AAAjB;;;AAAmC;;AAAY;;AAAZ;AAAnC;;;;AAAP;AACM;;AAA2B;;AAAhB;AAAX;AAAA;;AACsC;AAAtC;AAA+B;AAA/B;;AAIF;;AAAA;;;AAAA;;AAAA;;;AACkB;AAAX;;AAAe;;AAAA;;AAAA;AAAxB;;;AACwB;;AAAA;;;AAGgB;AAAX;;AAAA;;AAAA;AAA3B;;AAAA;AAAS;AAAT;;AAJkC;;AAAQ;AAAJ;AAAJ;;;;;;;AAoCtC;;AAAA;;AAAA;;AAAA;;AAAA;AA7BE;;AAAA;;;AACS;;AAAa;AAAb;AAAP;AAC2B;AAAP;;AAAA;AAAb;;AAAA;AAAP;AACoB;;AAAa;AAAb;AAAb;;AAAA;AAAP;AAEA;;AAAA;;AAAgB;AAAhB;;AAxDuB;;AAAA;AAAA;AAAQ;AAAhB;AAAA;;AAKH;;AAAT;AA0DC;AAAoB;AAApB;;AAEc;AAAX;;AAAe;;AAAA;;AAAA;AAAxB;;;AAEkC;;AAAA;;;AAAA;AAAA;;AAAA;;AAAA;AAE1B;;AAAA;AAAJ;;;AAGwB;;AAAA;;AAAA;AAAD;;AAAA;AAAR;AAAX;;AAAA;;AAAA;AAFF;;AAAA;AAAS;AAAT;;AAL8B;;AAAQ;AAAJ;AAAJ;;;;;;;;;;;;AAPP;AAAP;;AAAA;AAAA;AAAqB;AAArB;AAAb;;AAAA;AAAP;AAEA;;AAAgB;AAAhB;;;;;;;;;AA8BN;;;AACc;;AAAA;AAAW;AAAhB;AAAP;AAEmB;;AAAA;AATO;ADxFQ;;ACaf;AAAA;;ADXmB;;ACYnB;AAAA;;AA2EA;AAAA;;ADzFe;;ACaf;AAAA;;ADXmB;;ACYnB;AAAA;;AAmFnB;AC/FA;;;AAMQ;;AAAQ;;;AAG8C;;AAAA;AAAoB;;AAAA;AAAe;;AAAA;AAAA;AAAA;;ADuGlF;AAAA;;AACc;;AAA8B;;AAA9B;;AAAA;;AAAA;;;AAAA;;AAGT;AAAI;;AAAA;;AAAA;AAAxB;;;AACE;;AAAA;;;AAAyD;;AAAA;AAAA;;AAAI;;AAAJ;AAAJ;AAAA;AAA3B;;AAAA;AAAA;AAAd;AAAA;;;AAAZ;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAD0C;AAAJ;AAAJ;;;;;ACzGlC;;AAAA;;AAAA;AAGF;;;ADqFO;;AAAA;;;AC5EuD;;AAAA;AAAoB;;AAAA;AAAe;;AAAA;AAAA;AAAA;;AD0GlF;AAAA;;AACc;;AAA8B;;AAA9B;;AAAA;;AAAA;;;AAAA;;AAGT;AAAI;;AAAA;;AAAA;AAAxB;;;AACE;;AAAA;;;AAAyD;;AAAA;AAAA;;AAAI;AAAJ;AAAJ;AAAA;AAA3B;;AAAA;AAAA;AAAd;AAAA;;;AAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAD0C;AAAJ;AAAJ;;;;;AC5GlC;;AAAA;;AAAA;AAGF;;;AD2EO;;AAAA;;;AClEsD;;AAAA;AAAoB;;AAAA;AAAe;;AAAA;AAAA;AAAA;;AD6GjF;AAAA;;AACc;;AAA8B;AAA9B;;AAAA;;AAAA;;;AAAA;;AAGT;AAAI;;AAAA;;AAAA;AAAxB;;;AACE;;AAAA;;;AAAsD;AAAA;;AAAA;AAAA;;AAAA;AAArB;;AAAA;AAA4B;AAA5B;AAAR;AAAb;AAAA;;;AAAZ;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAD0C;AAAJ;AAAJ;;;;;AC/GlC;;AAAA;;AAAA;AAGF;;;AAEa;;AAAkB;;AAAtB;AAAP;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "@algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 1 0 2 8 6364136223846793005 1442695040888963407 4294967295"
    },
    "30": {
      "op": "bytecblock 0x151f7c75 0x0000"
    },
    "40": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "42": {
      "op": "bz main_bare_routing@8",
      "stack_out": []
    },
    "45": {
      "op": "pushbytess 0xed06f70a 0x8d7cce79 0xd0a35e1e // method \"bounded_rand_uint32(byte[8],uint32,uint32,uint16)uint32[]\", method \"bounded_rand_uint16(byte[8],uint16,uint16,uint16)uint16[]\", method \"bounded_rand_uint8(byte[8],uint8,uint8,uint16)uint8[]\""
    },
    "62": {
      "op": "txna ApplicationArgs 0"
    },
    "65": {
      "op": "match main_bounded_rand_uint32_route@3 main_bounded_rand_uint16_route@4 main_bounded_rand_uint8_route@5"
    },
    "73": {
      "block": "main_after_if_else@13",
      "stack_in": [],
      "op": "intc_1 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "74": {
      "op": "return"
    },
    "75": {
      "block": "main_bounded_rand_uint8_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%23#0"
      ]
    },
    "77": {
      "op": "!",
      "defined_out": [
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%24#0"
      ]
    },
    "78": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "79": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%25#0"
      ]
    },
    "81": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "82": {
      "op": "txna ApplicationArgs 1"
    },
    "85": {
      "op": "txna ApplicationArgs 2"
    },
    "88": {
      "op": "txna ApplicationArgs 3"
    },
    "91": {
      "op": "txna ApplicationArgs 4",
      "defined_out": [
        "tmp%27#0",
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0"
      ],
      "stack_out": [
        "tmp%27#0",
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0"
      ]
    },
    "94": {
      "callsub": "smart_contracts/lib_pcg32_exposer_ts/contract.algo.ts::LibPcg32ExposerAlgoTs.bounded_rand_uint8",
      "op": "callsub bounded_rand_uint8",
      "defined_out": [
        "tmp%31#0"
      ],
      "stack_out": [
        "tmp%31#0"
      ]
    },
    "97": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%31#0"
      ],
      "stack_out": [
        "tmp%31#0",
        "0x151f7c75"
      ]
    },
    "98": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%31#0"
      ]
    },
    "99": {
      "op": "concat",
      "defined_out": [
        "tmp%32#0"
      ],
      "stack_out": [
        "tmp%32#0"
      ]
    },
    "100": {
      "op": "log",
      "stack_out": []
    },
    "101": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "102": {
      "op": "return"
    },
    "103": {
      "block": "main_bounded_rand_uint16_route@4",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "105": {
      "op": "!",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "106": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "107": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "109": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "110": {
      "op": "txna ApplicationArgs 1"
    },
    "113": {
      "op": "txna ApplicationArgs 2"
    },
    "116": {
      "op": "txna ApplicationArgs 3"
    },
    "119": {
      "op": "txna ApplicationArgs 4",
      "defined_out": [
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0",
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0",
        "tmp%20#0"
      ]
    },
    "122": {
      "callsub": "smart_contracts/lib_pcg32_exposer_ts/contract.algo.ts::LibPcg32ExposerAlgoTs.bounded_rand_uint16",
      "op": "callsub bounded_rand_uint16",
      "defined_out": [
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0"
      ]
    },
    "125": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0",
        "0x151f7c75"
      ]
    },
    "126": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%21#0"
      ]
    },
    "127": {
      "op": "concat",
      "defined_out": [
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0"
      ]
    },
    "128": {
      "op": "log",
      "stack_out": []
    },
    "129": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "130": {
      "op": "return"
    },
    "131": {
      "block": "main_bounded_rand_uint32_route@3",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "133": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "134": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "135": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "137": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "138": {
      "op": "txna ApplicationArgs 1"
    },
    "141": {
      "op": "txna ApplicationArgs 2"
    },
    "144": {
      "op": "txna ApplicationArgs 3"
    },
    "147": {
      "op": "txna ApplicationArgs 4",
      "defined_out": [
        "tmp%10#0",
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0",
        "tmp%10#0"
      ]
    },
    "150": {
      "callsub": "smart_contracts/lib_pcg32_exposer_ts/contract.algo.ts::LibPcg32ExposerAlgoTs.bounded_rand_uint32",
      "op": "callsub bounded_rand_uint32",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "153": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0",
        "0x151f7c75"
      ]
    },
    "154": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%11#0"
      ]
    },
    "155": {
      "op": "concat",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "156": {
      "op": "log",
      "stack_out": []
    },
    "157": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "158": {
      "op": "return"
    },
    "159": {
      "block": "main_bare_routing@8",
      "stack_in": [],
      "op": "pushint 4 // 4"
    },
    "161": {
      "op": "intc_1 // 0"
    },
    "162": {
      "op": "txn OnCompletion",
      "defined_out": [
        "0",
        "4",
        "tmp%33#0"
      ],
      "stack_out": [
        "4",
        "0",
        "tmp%33#0"
      ]
    },
    "164": {
      "op": "match main_update@9 main___algots__.defaultCreate@10",
      "stack_out": []
    },
    "170": {
      "op": "b main_after_if_else@13"
    },
    "173": {
      "block": "main___algots__.defaultCreate@10",
      "stack_in": [],
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%36#0"
      ],
      "stack_out": [
        "tmp%36#0"
      ]
    },
    "175": {
      "op": "!",
      "defined_out": [
        "tmp%37#0"
      ],
      "stack_out": [
        "tmp%37#0"
      ]
    },
    "176": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "177": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "178": {
      "op": "return"
    },
    "179": {
      "block": "main_update@9",
      "stack_in": [],
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%34#0"
      ],
      "stack_out": [
        "tmp%34#0"
      ]
    },
    "181": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "182": {
      "callsub": "smart_contracts/lib_pcg32_exposer_ts/contract.algo.ts::LibPcg32ExposerAlgoTs.update",
      "op": "callsub update"
    },
    "185": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "186": {
      "op": "return"
    },
    "187": {
      "subroutine": "lib_pcg/pcg32.algo.ts::__pcg32UnboundedRandom",
      "params": {
        "state#0": "uint64"
      },
      "block": "__pcg32UnboundedRandom",
      "stack_in": [],
      "op": "proto 1 2"
    },
    "190": {
      "op": "frame_dig -1",
      "defined_out": [
        "state#0 (copy)"
      ],
      "stack_out": [
        "state#0 (copy)"
      ]
    },
    "192": {
      "op": "intc 4 // 6364136223846793005",
      "defined_out": [
        "6364136223846793005",
        "state#0 (copy)"
      ],
      "stack_out": [
        "state#0 (copy)",
        "6364136223846793005"
      ]
    },
    "194": {
      "op": "mulw",
      "defined_out": [
        "_#0",
        "mulLow#0"
      ],
      "stack_out": [
        "_#0",
        "mulLow#0"
      ]
    },
    "195": {
      "op": "bury 1",
      "stack_out": [
        "mulLow#0"
      ]
    },
    "197": {
      "op": "intc 5 // 1442695040888963407",
      "defined_out": [
        "1442695040888963407",
        "mulLow#0"
      ],
      "stack_out": [
        "mulLow#0",
        "1442695040888963407"
      ]
    },
    "199": {
      "op": "addw",
      "defined_out": [
        "_\u2081#0",
        "addLow#0"
      ],
      "stack_out": [
        "_\u2081#0",
        "addLow#0"
      ]
    },
    "200": {
      "op": "bury 1",
      "stack_out": [
        "addLow#0"
      ]
    },
    "202": {
      "op": "frame_dig -1",
      "stack_out": [
        "addLow#0",
        "state#0 (copy)"
      ]
    },
    "204": {
      "op": "pushint 18 // 18",
      "defined_out": [
        "18",
        "addLow#0",
        "state#0 (copy)"
      ],
      "stack_out": [
        "addLow#0",
        "state#0 (copy)",
        "18"
      ]
    },
    "206": {
      "op": "shr",
      "defined_out": [
        "addLow#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "addLow#0",
        "tmp%0#1"
      ]
    },
    "207": {
      "op": "frame_dig -1",
      "stack_out": [
        "addLow#0",
        "tmp%0#1",
        "state#0 (copy)"
      ]
    },
    "209": {
      "op": "^",
      "defined_out": [
        "addLow#0",
        "tmp%1#1"
      ],
      "stack_out": [
        "addLow#0",
        "tmp%1#1"
      ]
    },
    "210": {
      "op": "pushint 27 // 27",
      "defined_out": [
        "27",
        "addLow#0",
        "tmp%1#1"
      ],
      "stack_out": [
        "addLow#0",
        "tmp%1#1",
        "27"
      ]
    },
    "212": {
      "op": "shr",
      "defined_out": [
        "addLow#0",
        "value#0"
      ],
      "stack_out": [
        "addLow#0",
        "value#0"
      ]
    },
    "213": {
      "op": "intc 6 // 4294967295",
      "defined_out": [
        "4294967295",
        "addLow#0",
        "value#0"
      ],
      "stack_out": [
        "addLow#0",
        "value#0",
        "4294967295"
      ]
    },
    "215": {
      "op": "&",
      "defined_out": [
        "addLow#0",
        "xorshifted#0"
      ],
      "stack_out": [
        "addLow#0",
        "xorshifted#0"
      ]
    },
    "216": {
      "op": "frame_dig -1",
      "stack_out": [
        "addLow#0",
        "xorshifted#0",
        "state#0 (copy)"
      ]
    },
    "218": {
      "op": "pushint 59 // 59",
      "defined_out": [
        "59",
        "addLow#0",
        "state#0 (copy)",
        "xorshifted#0"
      ],
      "stack_out": [
        "addLow#0",
        "xorshifted#0",
        "state#0 (copy)",
        "59"
      ]
    },
    "220": {
      "op": "shr",
      "defined_out": [
        "addLow#0",
        "rot#0",
        "xorshifted#0"
      ],
      "stack_out": [
        "addLow#0",
        "xorshifted#0",
        "rot#0"
      ]
    },
    "221": {
      "op": "dup2",
      "defined_out": [
        "addLow#0",
        "rot#0",
        "rot#0 (copy)",
        "xorshifted#0",
        "xorshifted#0 (copy)"
      ],
      "stack_out": [
        "addLow#0",
        "xorshifted#0",
        "rot#0",
        "xorshifted#0 (copy)",
        "rot#0 (copy)"
      ]
    },
    "222": {
      "op": "shr",
      "defined_out": [
        "addLow#0",
        "rot#0",
        "tmp%3#0",
        "xorshifted#0"
      ],
      "stack_out": [
        "addLow#0",
        "xorshifted#0",
        "rot#0",
        "tmp%3#0"
      ]
    },
    "223": {
      "op": "swap",
      "stack_out": [
        "addLow#0",
        "xorshifted#0",
        "tmp%3#0",
        "rot#0"
      ]
    },
    "224": {
      "op": "~",
      "stack_out": [
        "addLow#0",
        "xorshifted#0",
        "tmp%3#0",
        "tmp%0#1"
      ]
    },
    "225": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "addLow#0",
        "tmp%0#1",
        "tmp%3#0",
        "xorshifted#0"
      ],
      "stack_out": [
        "addLow#0",
        "xorshifted#0",
        "tmp%3#0",
        "tmp%0#1",
        "1"
      ]
    },
    "226": {
      "op": "addw",
      "defined_out": [
        "_#0",
        "addLow#0",
        "addLow#1",
        "tmp%3#0",
        "xorshifted#0"
      ],
      "stack_out": [
        "addLow#0",
        "xorshifted#0",
        "tmp%3#0",
        "_#0",
        "addLow#1"
      ]
    },
    "227": {
      "op": "bury 1",
      "stack_out": [
        "addLow#0",
        "xorshifted#0",
        "tmp%3#0",
        "addLow#1"
      ]
    },
    "229": {
      "op": "pushint 31 // 31",
      "defined_out": [
        "31",
        "addLow#0",
        "addLow#1",
        "tmp%3#0",
        "xorshifted#0"
      ],
      "stack_out": [
        "addLow#0",
        "xorshifted#0",
        "tmp%3#0",
        "addLow#1",
        "31"
      ]
    },
    "231": {
      "op": "&",
      "defined_out": [
        "addLow#0",
        "tmp%3#0",
        "tmp%5#0",
        "xorshifted#0"
      ],
      "stack_out": [
        "addLow#0",
        "xorshifted#0",
        "tmp%3#0",
        "tmp%5#0"
      ]
    },
    "232": {
      "op": "uncover 2",
      "stack_out": [
        "addLow#0",
        "tmp%3#0",
        "tmp%5#0",
        "xorshifted#0"
      ]
    },
    "234": {
      "op": "swap",
      "stack_out": [
        "addLow#0",
        "tmp%3#0",
        "xorshifted#0",
        "tmp%5#0"
      ]
    },
    "235": {
      "op": "shl",
      "stack_out": [
        "addLow#0",
        "tmp%3#0",
        "value#0"
      ]
    },
    "236": {
      "op": "intc 6 // 4294967295",
      "stack_out": [
        "addLow#0",
        "tmp%3#0",
        "value#0",
        "4294967295"
      ]
    },
    "238": {
      "op": "&",
      "defined_out": [
        "addLow#0",
        "tmp%2#2",
        "tmp%3#0"
      ],
      "stack_out": [
        "addLow#0",
        "tmp%3#0",
        "tmp%2#2"
      ]
    },
    "239": {
      "op": "|",
      "defined_out": [
        "addLow#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "addLow#0",
        "tmp%8#0"
      ]
    },
    "240": {
      "retsub": true,
      "op": "retsub"
    },
    "241": {
      "subroutine": "lib_pcg/pcg32.algo.ts::__pcg32BoundedSequence",
      "params": {
        "state#0": "uint64",
        "bitSize#0": "uint64",
        "lowerBound#0": "uint64",
        "upperBound#0": "uint64",
        "length#0": "uint64"
      },
      "block": "__pcg32BoundedSequence",
      "stack_in": [],
      "op": "proto 5 2"
    },
    "244": {
      "op": "pushbytes \"\"",
      "stack_out": [
        "absoluteBound#0"
      ]
    },
    "246": {
      "op": "dupn 6",
      "stack_out": [
        "absoluteBound#0",
        "byteSize#0",
        "candidate#0",
        "i#0",
        "i\u2081#0",
        "threshold#0",
        "truncatedStartCached#0"
      ]
    },
    "248": {
      "op": "frame_dig -1",
      "defined_out": [
        "length#0 (copy)"
      ],
      "stack_out": [
        "absoluteBound#0",
        "byteSize#0",
        "candidate#0",
        "i#0",
        "i\u2081#0",
        "threshold#0",
        "truncatedStartCached#0",
        "length#0 (copy)"
      ]
    },
    "250": {
      "op": "pushint 65536 // 65536",
      "defined_out": [
        "65536",
        "length#0 (copy)"
      ],
      "stack_out": [
        "absoluteBound#0",
        "byteSize#0",
        "candidate#0",
        "i#0",
        "i\u2081#0",
        "threshold#0",
        "truncatedStartCached#0",
        "length#0 (copy)",
        "65536"
      ]
    },
    "254": {
      "op": "<",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "absoluteBound#0",
        "byteSize#0",
        "candidate#0",
        "i#0",
        "i\u2081#0",
        "threshold#0",
        "truncatedStartCached#0",
        "tmp%1#0"
      ]
    },
    "255": {
      "op": "assert",
      "stack_out": [
        "absoluteBound#0",
        "byteSize#0",
        "candidate#0",
        "i#0",
        "i\u2081#0",
        "threshold#0",
        "truncatedStartCached#0"
      ]
    },
    "256": {
      "op": "frame_dig -1",
      "stack_out": [
        "absoluteBound#0",
        "byteSize#0",
        "candidate#0",
        "i#0",
        "i\u2081#0",
        "threshold#0",
        "truncatedStartCached#0",
        "length#0 (copy)"
      ]
    },
    "258": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "absoluteBound#0",
        "byteSize#0",
        "candidate#0",
        "i#0",
        "i\u2081#0",
        "threshold#0",
        "truncatedStartCached#0",
        "val_as_bytes%0#0"
      ]
    },
    "259": {
      "op": "extract 6 2",
      "defined_out": [
        "result#1"
      ],
      "stack_out": [
        "absoluteBound#0",
        "byteSize#0",
        "candidate#0",
        "i#0",
        "i\u2081#0",
        "threshold#0",
        "truncatedStartCached#0",
        "result#1"
      ]
    },
    "262": {
      "op": "frame_dig -4",
      "defined_out": [
        "bitSize#0 (copy)",
        "result#1"
      ],
      "stack_out": [
        "absoluteBound#0",
        "byteSize#0",
        "candidate#0",
        "i#0",
        "i\u2081#0",
        "threshold#0",
        "truncatedStartCached#0",
        "result#1",
        "bitSize#0 (copy)"
      ]
    },
    "264": {
      "op": "intc_3 // 8",
      "defined_out": [
        "8",
        "bitSize#0 (copy)",
        "result#1"
      ],
      "stack_out": [
        "absoluteBound#0",
        "byteSize#0",
        "candidate#0",
        "i#0",
        "i\u2081#0",
        "threshold#0",
        "truncatedStartCached#0",
        "result#1",
        "bitSize#0 (copy)",
        "8"
      ]
    },
    "265": {
      "op": "==",
      "defined_out": [
        "result#1",
        "tmp%2#0"
      ],
      "stack_out": [
        "absoluteBound#0",
        "byteSize#0",
        "candidate#0",
        "i#0",
        "i\u2081#0",
        "threshold#0",
        "truncatedStartCached#0",
        "result#1",
        "tmp%2#0"
      ]
    },
    "266": {
      "op": "bnz __pcg32BoundedSequence_bool_true@3",
      "stack_out": [
        "absoluteBound#0",
        "byteSize#0",
        "candidate#0",
        "i#0",
        "i\u2081#0",
        "threshold#0",
        "truncatedStartCached#0",
        "result#1"
      ]
    },
    "269": {
      "op": "frame_dig -4"
    },
    "271": {
      "op": "pushint 16 // 16"
    },
    "273": {
      "op": "=="
    },
    "274": {
      "op": "bnz __pcg32BoundedSequence_bool_true@3"
    },
    "277": {
      "op": "frame_dig -4"
    },
    "279": {
      "op": "pushint 32 // 32"
    },
    "281": {
      "op": "=="
    },
    "282": {
      "op": "bz __pcg32BoundedSequence_bool_false@4"
    },
    "285": {
      "block": "__pcg32BoundedSequence_bool_true@3",
      "stack_in": [
        "absoluteBound#0",
        "byteSize#0",
        "candidate#0",
        "i#0",
        "i\u2081#0",
        "threshold#0",
        "truncatedStartCached#0",
        "result#1"
      ],
      "op": "intc_0 // 1",
      "defined_out": [
        "or_result%0#0"
      ],
      "stack_out": [
        "absoluteBound#0",
        "byteSize#0",
        "candidate#0",
        "i#0",
        "i\u2081#0",
        "threshold#0",
        "truncatedStartCached#0",
        "result#1",
        "or_result%0#0"
      ]
    },
    "286": {
      "block": "__pcg32BoundedSequence_bool_merge@5",
      "stack_in": [
        "absoluteBound#0",
        "byteSize#0",
        "candidate#0",
        "i#0",
        "i\u2081#0",
        "threshold#0",
        "truncatedStartCached#0",
        "result#1",
        "or_result%0#0"
      ],
      "op": "assert",
      "defined_out": [],
      "stack_out": [
        "absoluteBound#0",
        "byteSize#0",
        "candidate#0",
        "i#0",
        "i\u2081#0",
        "threshold#0",
        "truncatedStartCached#0",
        "result#1"
      ]
    },
    "287": {
      "op": "frame_dig -4",
      "defined_out": [
        "bitSize#0 (copy)"
      ],
      "stack_out": [
        "absoluteBound#0",
        "byteSize#0",
        "candidate#0",
        "i#0",
        "i\u2081#0",
        "threshold#0",
        "truncatedStartCached#0",
        "result#1",
        "bitSize#0 (copy)"
      ]
    },
    "289": {
      "op": "pushint 3 // 3",
      "defined_out": [
        "3",
        "bitSize#0 (copy)"
      ],
      "stack_out": [
        "absoluteBound#0",
        "byteSize#0",
        "candidate#0",
        "i#0",
        "i\u2081#0",
        "threshold#0",
        "truncatedStartCached#0",
        "result#1",
        "bitSize#0 (copy)",
        "3"
      ]
    },
    "291": {
      "op": "shr",
      "defined_out": [
        "byteSize#0"
      ],
      "stack_out": [
        "absoluteBound#0",
        "byteSize#0",
        "candidate#0",
        "i#0",
        "i\u2081#0",
        "threshold#0",
        "truncatedStartCached#0",
        "result#1",
        "byteSize#0"
      ]
    },
    "292": {
      "op": "dup",
      "stack_out": [
        "absoluteBound#0",
        "byteSize#0",
        "candidate#0",
        "i#0",
        "i\u2081#0",
        "threshold#0",
        "truncatedStartCached#0",
        "result#1",
        "byteSize#0",
        "byteSize#0"
      ]
    },
    "293": {
      "op": "frame_bury 1",
      "defined_out": [
        "byteSize#0"
      ],
      "stack_out": [
        "absoluteBound#0",
        "byteSize#0",
        "candidate#0",
        "i#0",
        "i\u2081#0",
        "threshold#0",
        "truncatedStartCached#0",
        "result#1",
        "byteSize#0"
      ]
    },
    "295": {
      "op": "intc_3 // 8",
      "defined_out": [
        "8",
        "byteSize#0"
      ],
      "stack_out": [
        "absoluteBound#0",
        "byteSize#0",
        "candidate#0",
        "i#0",
        "i\u2081#0",
        "threshold#0",
        "truncatedStartCached#0",
        "result#1",
        "byteSize#0",
        "8"
      ]
    },
    "296": {
      "op": "swap",
      "stack_out": [
        "absoluteBound#0",
        "byteSize#0",
        "candidate#0",
        "i#0",
        "i\u2081#0",
        "threshold#0",
        "truncatedStartCached#0",
        "result#1",
        "8",
        "byteSize#0"
      ]
    },
    "297": {
      "op": "-",
      "defined_out": [
        "byteSize#0",
        "truncatedStartCached#0"
      ],
      "stack_out": [
        "absoluteBound#0",
        "byteSize#0",
        "candidate#0",
        "i#0",
        "i\u2081#0",
        "threshold#0",
        "truncatedStartCached#0",
        "result#1",
        "truncatedStartCached#0"
      ]
    },
    "298": {
      "op": "frame_bury 6",
      "defined_out": [
        "byteSize#0",
        "truncatedStartCached#0"
      ],
      "stack_out": [
        "absoluteBound#0",
        "byteSize#0",
        "candidate#0",
        "i#0",
        "i\u2081#0",
        "threshold#0",
        "truncatedStartCached#0",
        "result#1"
      ]
    },
    "300": {
      "op": "frame_dig -3",
      "defined_out": [
        "byteSize#0",
        "lowerBound#0 (copy)",
        "truncatedStartCached#0"
      ],
      "stack_out": [
        "absoluteBound#0",
        "byteSize#0",
        "candidate#0",
        "i#0",
        "i\u2081#0",
        "threshold#0",
        "truncatedStartCached#0",
        "result#1",
        "lowerBound#0 (copy)"
      ]
    },
    "302": {
      "op": "bnz __pcg32BoundedSequence_else_body@11",
      "stack_out": [
        "absoluteBound#0",
        "byteSize#0",
        "candidate#0",
        "i#0",
        "i\u2081#0",
        "threshold#0",
        "truncatedStartCached#0",
        "result#1"
      ]
    },
    "305": {
      "op": "frame_dig -2"
    },
    "307": {
      "op": "bnz __pcg32BoundedSequence_else_body@11"
    },
    "310": {
      "op": "intc_1 // 0"
    },
    "311": {
      "op": "frame_bury 3"
    },
    "313": {
      "block": "__pcg32BoundedSequence_while_top@8",
      "stack_in": [
        "absoluteBound#0",
        "byteSize#0",
        "candidate#0",
        "i#0",
        "i\u2081#0",
        "threshold#0",
        "truncatedStartCached#0",
        "result#1"
      ],
      "op": "frame_dig 3",
      "defined_out": [
        "i#0"
      ],
      "stack_out": [
        "absoluteBound#0",
        "byteSize#0",
        "candidate#0",
        "i#0",
        "i\u2081#0",
        "threshold#0",
        "truncatedStartCached#0",
        "result#1",
        "i#0"
      ]
    },
    "315": {
      "op": "frame_dig -1",
      "defined_out": [
        "i#0",
        "length#0 (copy)"
      ],
      "stack_out": [
        "absoluteBound#0",
        "byteSize#0",
        "candidate#0",
        "i#0",
        "i\u2081#0",
        "threshold#0",
        "truncatedStartCached#0",
        "result#1",
        "i#0",
        "length#0 (copy)"
      ]
    },
    "317": {
      "op": "<",
      "defined_out": [
        "i#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "absoluteBound#0",
        "byteSize#0",
        "candidate#0",
        "i#0",
        "i\u2081#0",
        "threshold#0",
        "truncatedStartCached#0",
        "result#1",
        "tmp%7#0"
      ]
    },
    "318": {
      "op": "bz __pcg32BoundedSequence_after_if_else@24",
      "stack_out": [
        "absoluteBound#0",
        "byteSize#0",
        "candidate#0",
        "i#0",
        "i\u2081#0",
        "threshold#0",
        "truncatedStartCached#0",
        "result#1"
      ]
    },
    "321": {
      "op": "frame_dig -5"
    },
    "323": {
      "callsub": "lib_pcg/pcg32.algo.ts::__pcg32UnboundedRandom",
      "op": "callsub __pcg32UnboundedRandom"
    },
    "326": {
      "op": "itob"
    },
    "327": {
      "op": "frame_dig 6"
    },
    "329": {
      "op": "frame_dig 1"
    },
    "331": {
      "op": "extract3"
    },
    "332": {
      "op": "frame_dig 7"
    },
    "334": {
      "op": "swap"
    },
    "335": {
      "op": "concat"
    },
    "336": {
      "op": "frame_bury 7"
    },
    "338": {
      "op": "frame_dig 3"
    },
    "340": {
      "op": "intc_0 // 1"
    },
    "341": {
      "op": "+"
    },
    "342": {
      "op": "frame_bury 3"
    },
    "344": {
      "op": "frame_bury -5"
    },
    "346": {
      "op": "b __pcg32BoundedSequence_while_top@8"
    },
    "349": {
      "block": "__pcg32BoundedSequence_after_if_else@24",
      "stack_in": [
        "absoluteBound#0",
        "byteSize#0",
        "candidate#0",
        "i#0",
        "i\u2081#0",
        "threshold#0",
        "truncatedStartCached#0",
        "result#1"
      ],
      "op": "frame_dig -5",
      "defined_out": [
        "state#0 (copy)"
      ],
      "stack_out": [
        "absoluteBound#0",
        "byteSize#0",
        "candidate#0",
        "i#0",
        "i\u2081#0",
        "threshold#0",
        "truncatedStartCached#0",
        "result#1",
        "state#0 (copy)"
      ]
    },
    "351": {
      "op": "frame_dig 7",
      "defined_out": [
        "result#1",
        "state#0 (copy)"
      ],
      "stack_out": [
        "absoluteBound#0",
        "byteSize#0",
        "candidate#0",
        "i#0",
        "i\u2081#0",
        "threshold#0",
        "truncatedStartCached#0",
        "result#1",
        "state#0 (copy)",
        "result#1"
      ]
    },
    "353": {
      "op": "frame_bury 1"
    },
    "355": {
      "op": "frame_bury 0"
    },
    "357": {
      "retsub": true,
      "op": "retsub"
    },
    "358": {
      "block": "__pcg32BoundedSequence_else_body@11",
      "stack_in": [
        "absoluteBound#0",
        "byteSize#0",
        "candidate#0",
        "i#0",
        "i\u2081#0",
        "threshold#0",
        "truncatedStartCached#0",
        "result#1"
      ],
      "op": "frame_dig -2",
      "defined_out": [
        "upperBound#0 (copy)"
      ],
      "stack_out": [
        "absoluteBound#0",
        "byteSize#0",
        "candidate#0",
        "i#0",
        "i\u2081#0",
        "threshold#0",
        "truncatedStartCached#0",
        "result#1",
        "upperBound#0 (copy)"
      ]
    },
    "360": {
      "op": "bz __pcg32BoundedSequence_else_body@13",
      "stack_out": [
        "absoluteBound#0",
        "byteSize#0",
        "candidate#0",
        "i#0",
        "i\u2081#0",
        "threshold#0",
        "truncatedStartCached#0",
        "result#1"
      ]
    },
    "363": {
      "op": "frame_dig -2"
    },
    "365": {
      "op": "intc_0 // 1"
    },
    "366": {
      "op": ">"
    },
    "367": {
      "op": "assert"
    },
    "368": {
      "op": "intc_0 // 1"
    },
    "369": {
      "op": "frame_dig -4"
    },
    "371": {
      "op": "shl"
    },
    "372": {
      "op": "frame_dig -2"
    },
    "374": {
      "op": ">"
    },
    "375": {
      "op": "assert"
    },
    "376": {
      "op": "frame_dig -2"
    },
    "378": {
      "op": "intc_0 // 1"
    },
    "379": {
      "op": "-"
    },
    "380": {
      "op": "frame_dig -3"
    },
    "382": {
      "op": ">"
    },
    "383": {
      "op": "assert"
    },
    "384": {
      "op": "frame_dig -2"
    },
    "386": {
      "op": "frame_dig -3"
    },
    "388": {
      "op": "-"
    },
    "389": {
      "op": "frame_bury 0"
    },
    "391": {
      "block": "__pcg32BoundedSequence_after_if_else@14",
      "stack_in": [
        "absoluteBound#0",
        "byteSize#0",
        "candidate#0",
        "i#0",
        "i\u2081#0",
        "threshold#0",
        "truncatedStartCached#0",
        "result#1"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "absoluteBound#0"
      ],
      "stack_out": [
        "absoluteBound#0",
        "byteSize#0",
        "candidate#0",
        "i#0",
        "i\u2081#0",
        "threshold#0",
        "truncatedStartCached#0",
        "result#1",
        "absoluteBound#0"
      ]
    },
    "393": {
      "op": "dup",
      "defined_out": [
        "absoluteBound#0",
        "absoluteBound#0 (copy)"
      ],
      "stack_out": [
        "absoluteBound#0",
        "byteSize#0",
        "candidate#0",
        "i#0",
        "i\u2081#0",
        "threshold#0",
        "truncatedStartCached#0",
        "result#1",
        "absoluteBound#0",
        "absoluteBound#0 (copy)"
      ]
    },
    "394": {
      "op": "~",
      "defined_out": [
        "absoluteBound#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "absoluteBound#0",
        "byteSize#0",
        "candidate#0",
        "i#0",
        "i\u2081#0",
        "threshold#0",
        "truncatedStartCached#0",
        "result#1",
        "absoluteBound#0",
        "tmp%0#0"
      ]
    },
    "395": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "absoluteBound#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "absoluteBound#0",
        "byteSize#0",
        "candidate#0",
        "i#0",
        "i\u2081#0",
        "threshold#0",
        "truncatedStartCached#0",
        "result#1",
        "absoluteBound#0",
        "tmp%0#0",
        "1"
      ]
    },
    "396": {
      "op": "addw",
      "defined_out": [
        "_#0",
        "absoluteBound#0",
        "addLow#0"
      ],
      "stack_out": [
        "absoluteBound#0",
        "byteSize#0",
        "candidate#0",
        "i#0",
        "i\u2081#0",
        "threshold#0",
        "truncatedStartCached#0",
        "result#1",
        "absoluteBound#0",
        "_#0",
        "addLow#0"
      ]
    },
    "397": {
      "op": "bury 1",
      "stack_out": [
        "absoluteBound#0",
        "byteSize#0",
        "candidate#0",
        "i#0",
        "i\u2081#0",
        "threshold#0",
        "truncatedStartCached#0",
        "result#1",
        "absoluteBound#0",
        "addLow#0"
      ]
    },
    "399": {
      "op": "intc 6 // 4294967295",
      "defined_out": [
        "4294967295",
        "absoluteBound#0",
        "addLow#0"
      ],
      "stack_out": [
        "absoluteBound#0",
        "byteSize#0",
        "candidate#0",
        "i#0",
        "i\u2081#0",
        "threshold#0",
        "truncatedStartCached#0",
        "result#1",
        "absoluteBound#0",
        "addLow#0",
        "4294967295"
      ]
    },
    "401": {
      "op": "&",
      "defined_out": [
        "absoluteBound#0",
        "tmp%2#1"
      ],
      "stack_out": [
        "absoluteBound#0",
        "byteSize#0",
        "candidate#0",
        "i#0",
        "i\u2081#0",
        "threshold#0",
        "truncatedStartCached#0",
        "result#1",
        "absoluteBound#0",
        "tmp%2#1"
      ]
    },
    "402": {
      "op": "swap",
      "stack_out": [
        "absoluteBound#0",
        "byteSize#0",
        "candidate#0",
        "i#0",
        "i\u2081#0",
        "threshold#0",
        "truncatedStartCached#0",
        "result#1",
        "tmp%2#1",
        "absoluteBound#0"
      ]
    },
    "403": {
      "op": "%",
      "defined_out": [
        "absoluteBound#0",
        "threshold#0"
      ],
      "stack_out": [
        "absoluteBound#0",
        "byteSize#0",
        "candidate#0",
        "i#0",
        "i\u2081#0",
        "threshold#0",
        "truncatedStartCached#0",
        "result#1",
        "threshold#0"
      ]
    },
    "404": {
      "op": "frame_bury 5",
      "defined_out": [
        "absoluteBound#0",
        "threshold#0"
      ],
      "stack_out": [
        "absoluteBound#0",
        "byteSize#0",
        "candidate#0",
        "i#0",
        "i\u2081#0",
        "threshold#0",
        "truncatedStartCached#0",
        "result#1"
      ]
    },
    "406": {
      "op": "intc_1 // 0",
      "defined_out": [
        "absoluteBound#0",
        "i\u2081#0",
        "threshold#0"
      ],
      "stack_out": [
        "absoluteBound#0",
        "byteSize#0",
        "candidate#0",
        "i#0",
        "i\u2081#0",
        "threshold#0",
        "truncatedStartCached#0",
        "result#1",
        "i\u2081#0"
      ]
    },
    "407": {
      "op": "frame_bury 4",
      "defined_out": [
        "absoluteBound#0",
        "i\u2081#0",
        "threshold#0"
      ],
      "stack_out": [
        "absoluteBound#0",
        "byteSize#0",
        "candidate#0",
        "i#0",
        "i\u2081#0",
        "threshold#0",
        "truncatedStartCached#0",
        "result#1"
      ]
    },
    "409": {
      "block": "__pcg32BoundedSequence_while_top@15",
      "stack_in": [
        "absoluteBound#0",
        "byteSize#0",
        "candidate#0",
        "i#0",
        "i\u2081#0",
        "threshold#0",
        "truncatedStartCached#0",
        "result#1"
      ],
      "op": "frame_dig 4",
      "defined_out": [
        "i\u2081#0"
      ],
      "stack_out": [
        "absoluteBound#0",
        "byteSize#0",
        "candidate#0",
        "i#0",
        "i\u2081#0",
        "threshold#0",
        "truncatedStartCached#0",
        "result#1",
        "i\u2081#0"
      ]
    },
    "411": {
      "op": "frame_dig -1",
      "defined_out": [
        "i\u2081#0",
        "length#0 (copy)"
      ],
      "stack_out": [
        "absoluteBound#0",
        "byteSize#0",
        "candidate#0",
        "i#0",
        "i\u2081#0",
        "threshold#0",
        "truncatedStartCached#0",
        "result#1",
        "i\u2081#0",
        "length#0 (copy)"
      ]
    },
    "413": {
      "op": "<",
      "defined_out": [
        "i\u2081#0",
        "tmp%22#0"
      ],
      "stack_out": [
        "absoluteBound#0",
        "byteSize#0",
        "candidate#0",
        "i#0",
        "i\u2081#0",
        "threshold#0",
        "truncatedStartCached#0",
        "result#1",
        "tmp%22#0"
      ]
    },
    "414": {
      "op": "bz __pcg32BoundedSequence_after_if_else@24",
      "stack_out": [
        "absoluteBound#0",
        "byteSize#0",
        "candidate#0",
        "i#0",
        "i\u2081#0",
        "threshold#0",
        "truncatedStartCached#0",
        "result#1"
      ]
    },
    "417": {
      "block": "__pcg32BoundedSequence_while_top@17",
      "stack_in": [
        "absoluteBound#0",
        "byteSize#0",
        "candidate#0",
        "i#0",
        "i\u2081#0",
        "threshold#0",
        "truncatedStartCached#0",
        "result#1"
      ],
      "op": "frame_dig -5",
      "defined_out": [
        "state#0 (copy)"
      ],
      "stack_out": [
        "absoluteBound#0",
        "byteSize#0",
        "candidate#0",
        "i#0",
        "i\u2081#0",
        "threshold#0",
        "truncatedStartCached#0",
        "result#1",
        "state#0 (copy)"
      ]
    },
    "419": {
      "callsub": "lib_pcg/pcg32.algo.ts::__pcg32UnboundedRandom",
      "op": "callsub __pcg32UnboundedRandom",
      "defined_out": [
        "candidate#0",
        "newState\u2081#0"
      ],
      "stack_out": [
        "absoluteBound#0",
        "byteSize#0",
        "candidate#0",
        "i#0",
        "i\u2081#0",
        "threshold#0",
        "truncatedStartCached#0",
        "result#1",
        "newState\u2081#0",
        "candidate#0"
      ]
    },
    "422": {
      "op": "dup",
      "stack_out": [
        "absoluteBound#0",
        "byteSize#0",
        "candidate#0",
        "i#0",
        "i\u2081#0",
        "threshold#0",
        "truncatedStartCached#0",
        "result#1",
        "newState\u2081#0",
        "candidate#0",
        "candidate#0 (copy)"
      ]
    },
    "423": {
      "op": "cover 2",
      "stack_out": [
        "absoluteBound#0",
        "byteSize#0",
        "candidate#0",
        "i#0",
        "i\u2081#0",
        "threshold#0",
        "truncatedStartCached#0",
        "result#1",
        "candidate#0",
        "newState\u2081#0",
        "candidate#0"
      ]
    },
    "425": {
      "op": "frame_bury 2",
      "defined_out": [
        "candidate#0",
        "newState\u2081#0"
      ],
      "stack_out": [
        "absoluteBound#0",
        "byteSize#0",
        "candidate#0",
        "i#0",
        "i\u2081#0",
        "threshold#0",
        "truncatedStartCached#0",
        "result#1",
        "candidate#0",
        "newState\u2081#0"
      ]
    },
    "427": {
      "op": "swap",
      "defined_out": [
        "candidate#0",
        "newState\u2081#0"
      ],
      "stack_out": [
        "absoluteBound#0",
        "byteSize#0",
        "candidate#0",
        "i#0",
        "i\u2081#0",
        "threshold#0",
        "truncatedStartCached#0",
        "result#1",
        "newState\u2081#0",
        "candidate#0"
      ]
    },
    "428": {
      "op": "frame_dig 5",
      "defined_out": [
        "candidate#0",
        "newState\u2081#0",
        "threshold#0"
      ],
      "stack_out": [
        "absoluteBound#0",
        "byteSize#0",
        "candidate#0",
        "i#0",
        "i\u2081#0",
        "threshold#0",
        "truncatedStartCached#0",
        "result#1",
        "newState\u2081#0",
        "candidate#0",
        "threshold#0"
      ]
    },
    "430": {
      "op": ">=",
      "defined_out": [
        "candidate#0",
        "newState\u2081#0",
        "threshold#0",
        "tmp%23#0"
      ],
      "stack_out": [
        "absoluteBound#0",
        "byteSize#0",
        "candidate#0",
        "i#0",
        "i\u2081#0",
        "threshold#0",
        "truncatedStartCached#0",
        "result#1",
        "newState\u2081#0",
        "tmp%23#0"
      ]
    },
    "431": {
      "op": "bz __pcg32BoundedSequence_after_if_else@20",
      "stack_out": [
        "absoluteBound#0",
        "byteSize#0",
        "candidate#0",
        "i#0",
        "i\u2081#0",
        "threshold#0",
        "truncatedStartCached#0",
        "result#1",
        "newState\u2081#0"
      ]
    },
    "434": {
      "op": "frame_dig 2"
    },
    "436": {
      "op": "frame_dig 0"
    },
    "438": {
      "op": "%"
    },
    "439": {
      "op": "frame_dig -3"
    },
    "441": {
      "op": "+"
    },
    "442": {
      "op": "itob"
    },
    "443": {
      "op": "frame_dig 6"
    },
    "445": {
      "op": "frame_dig 1"
    },
    "447": {
      "op": "extract3"
    },
    "448": {
      "op": "frame_dig 7"
    },
    "450": {
      "op": "swap"
    },
    "451": {
      "op": "concat"
    },
    "452": {
      "op": "frame_bury 7"
    },
    "454": {
      "op": "frame_dig 4"
    },
    "456": {
      "op": "intc_0 // 1"
    },
    "457": {
      "op": "+"
    },
    "458": {
      "op": "frame_bury 4"
    },
    "460": {
      "op": "frame_bury -5"
    },
    "462": {
      "op": "b __pcg32BoundedSequence_while_top@15"
    },
    "465": {
      "block": "__pcg32BoundedSequence_after_if_else@20",
      "stack_in": [
        "absoluteBound#0",
        "byteSize#0",
        "candidate#0",
        "i#0",
        "i\u2081#0",
        "threshold#0",
        "truncatedStartCached#0",
        "result#1",
        "newState\u2081#0"
      ],
      "op": "frame_bury -5",
      "defined_out": [],
      "stack_out": [
        "absoluteBound#0",
        "byteSize#0",
        "candidate#0",
        "i#0",
        "i\u2081#0",
        "threshold#0",
        "truncatedStartCached#0",
        "result#1"
      ]
    },
    "467": {
      "op": "b __pcg32BoundedSequence_while_top@17"
    },
    "470": {
      "block": "__pcg32BoundedSequence_else_body@13",
      "stack_in": [
        "absoluteBound#0",
        "byteSize#0",
        "candidate#0",
        "i#0",
        "i\u2081#0",
        "threshold#0",
        "truncatedStartCached#0",
        "result#1"
      ],
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "absoluteBound#0",
        "byteSize#0",
        "candidate#0",
        "i#0",
        "i\u2081#0",
        "threshold#0",
        "truncatedStartCached#0",
        "result#1",
        "1"
      ]
    },
    "471": {
      "op": "frame_dig -4",
      "defined_out": [
        "1",
        "bitSize#0 (copy)"
      ],
      "stack_out": [
        "absoluteBound#0",
        "byteSize#0",
        "candidate#0",
        "i#0",
        "i\u2081#0",
        "threshold#0",
        "truncatedStartCached#0",
        "result#1",
        "1",
        "bitSize#0 (copy)"
      ]
    },
    "473": {
      "op": "shl",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "absoluteBound#0",
        "byteSize#0",
        "candidate#0",
        "i#0",
        "i\u2081#0",
        "threshold#0",
        "truncatedStartCached#0",
        "result#1",
        "tmp%16#0"
      ]
    },
    "474": {
      "op": "dup",
      "defined_out": [
        "tmp%16#0",
        "tmp%16#0 (copy)"
      ],
      "stack_out": [
        "absoluteBound#0",
        "byteSize#0",
        "candidate#0",
        "i#0",
        "i\u2081#0",
        "threshold#0",
        "truncatedStartCached#0",
        "result#1",
        "tmp%16#0",
        "tmp%16#0 (copy)"
      ]
    },
    "475": {
      "op": "intc_0 // 1",
      "stack_out": [
        "absoluteBound#0",
        "byteSize#0",
        "candidate#0",
        "i#0",
        "i\u2081#0",
        "threshold#0",
        "truncatedStartCached#0",
        "result#1",
        "tmp%16#0",
        "tmp%16#0 (copy)",
        "1"
      ]
    },
    "476": {
      "op": "-",
      "defined_out": [
        "tmp%16#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "absoluteBound#0",
        "byteSize#0",
        "candidate#0",
        "i#0",
        "i\u2081#0",
        "threshold#0",
        "truncatedStartCached#0",
        "result#1",
        "tmp%16#0",
        "tmp%17#0"
      ]
    },
    "477": {
      "op": "frame_dig -3",
      "defined_out": [
        "lowerBound#0 (copy)",
        "tmp%16#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "absoluteBound#0",
        "byteSize#0",
        "candidate#0",
        "i#0",
        "i\u2081#0",
        "threshold#0",
        "truncatedStartCached#0",
        "result#1",
        "tmp%16#0",
        "tmp%17#0",
        "lowerBound#0 (copy)"
      ]
    },
    "479": {
      "op": ">",
      "defined_out": [
        "tmp%16#0",
        "tmp%18#0"
      ],
      "stack_out": [
        "absoluteBound#0",
        "byteSize#0",
        "candidate#0",
        "i#0",
        "i\u2081#0",
        "threshold#0",
        "truncatedStartCached#0",
        "result#1",
        "tmp%16#0",
        "tmp%18#0"
      ]
    },
    "480": {
      "op": "assert",
      "stack_out": [
        "absoluteBound#0",
        "byteSize#0",
        "candidate#0",
        "i#0",
        "i\u2081#0",
        "threshold#0",
        "truncatedStartCached#0",
        "result#1",
        "tmp%16#0"
      ]
    },
    "481": {
      "op": "frame_dig -3",
      "stack_out": [
        "absoluteBound#0",
        "byteSize#0",
        "candidate#0",
        "i#0",
        "i\u2081#0",
        "threshold#0",
        "truncatedStartCached#0",
        "result#1",
        "tmp%16#0",
        "lowerBound#0 (copy)"
      ]
    },
    "483": {
      "op": "-",
      "defined_out": [
        "absoluteBound#0"
      ],
      "stack_out": [
        "absoluteBound#0",
        "byteSize#0",
        "candidate#0",
        "i#0",
        "i\u2081#0",
        "threshold#0",
        "truncatedStartCached#0",
        "result#1",
        "absoluteBound#0"
      ]
    },
    "484": {
      "op": "frame_bury 0",
      "defined_out": [
        "absoluteBound#0"
      ],
      "stack_out": [
        "absoluteBound#0",
        "byteSize#0",
        "candidate#0",
        "i#0",
        "i\u2081#0",
        "threshold#0",
        "truncatedStartCached#0",
        "result#1"
      ]
    },
    "486": {
      "op": "b __pcg32BoundedSequence_after_if_else@14"
    },
    "489": {
      "block": "__pcg32BoundedSequence_bool_false@4",
      "stack_in": [
        "absoluteBound#0",
        "byteSize#0",
        "candidate#0",
        "i#0",
        "i\u2081#0",
        "threshold#0",
        "truncatedStartCached#0",
        "result#1"
      ],
      "op": "intc_1 // 0",
      "defined_out": [
        "or_result%0#0"
      ],
      "stack_out": [
        "absoluteBound#0",
        "byteSize#0",
        "candidate#0",
        "i#0",
        "i\u2081#0",
        "threshold#0",
        "truncatedStartCached#0",
        "result#1",
        "or_result%0#0"
      ]
    },
    "490": {
      "op": "b __pcg32BoundedSequence_bool_merge@5"
    },
    "493": {
      "subroutine": "lib_pcg/pcg32.algo.ts::pcg32Init",
      "params": {
        "seed#0": "bytes"
      },
      "block": "pcg32Init",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "496": {
      "op": "frame_dig -1",
      "defined_out": [
        "seed#0 (copy)"
      ],
      "stack_out": [
        "seed#0 (copy)"
      ]
    },
    "498": {
      "op": "len",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "499": {
      "op": "intc_3 // 8",
      "defined_out": [
        "8",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "8"
      ]
    },
    "500": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "501": {
      "op": "assert",
      "stack_out": []
    },
    "502": {
      "op": "frame_dig -1",
      "stack_out": [
        "seed#0 (copy)"
      ]
    },
    "504": {
      "op": "btoi",
      "defined_out": [
        "initialState#0"
      ],
      "stack_out": [
        "initialState#0"
      ]
    },
    "505": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "initialState#0"
      ],
      "stack_out": [
        "initialState#0",
        "0"
      ]
    },
    "506": {
      "op": "intc 4 // 6364136223846793005",
      "defined_out": [
        "0",
        "6364136223846793005",
        "initialState#0"
      ],
      "stack_out": [
        "initialState#0",
        "0",
        "6364136223846793005"
      ]
    },
    "508": {
      "op": "mulw",
      "defined_out": [
        "_#0",
        "initialState#0",
        "mulLow#0"
      ],
      "stack_out": [
        "initialState#0",
        "_#0",
        "mulLow#0"
      ]
    },
    "509": {
      "op": "bury 1",
      "stack_out": [
        "initialState#0",
        "mulLow#0"
      ]
    },
    "511": {
      "op": "intc 5 // 1442695040888963407",
      "defined_out": [
        "1442695040888963407",
        "initialState#0",
        "mulLow#0"
      ],
      "stack_out": [
        "initialState#0",
        "mulLow#0",
        "1442695040888963407"
      ]
    },
    "513": {
      "op": "addw",
      "defined_out": [
        "_\u2081#0",
        "addLow#0",
        "initialState#0"
      ],
      "stack_out": [
        "initialState#0",
        "_\u2081#0",
        "addLow#0"
      ]
    },
    "514": {
      "op": "bury 1",
      "stack_out": [
        "initialState#0",
        "addLow#0"
      ]
    },
    "516": {
      "op": "addw",
      "stack_out": [
        "_#0",
        "addLow#0"
      ]
    },
    "517": {
      "op": "bury 1",
      "stack_out": [
        "addLow#0"
      ]
    },
    "519": {
      "op": "intc 4 // 6364136223846793005",
      "stack_out": [
        "addLow#0",
        "6364136223846793005"
      ]
    },
    "521": {
      "op": "mulw",
      "stack_out": [
        "_#0",
        "mulLow#0"
      ]
    },
    "522": {
      "op": "bury 1",
      "stack_out": [
        "mulLow#0"
      ]
    },
    "524": {
      "op": "intc 5 // 1442695040888963407",
      "stack_out": [
        "mulLow#0",
        "1442695040888963407"
      ]
    },
    "526": {
      "op": "addw",
      "stack_out": [
        "_\u2081#0",
        "addLow#0"
      ]
    },
    "527": {
      "op": "bury 1",
      "stack_out": [
        "addLow#0"
      ]
    },
    "529": {
      "retsub": true,
      "op": "retsub"
    },
    "530": {
      "subroutine": "smart_contracts/lib_pcg32_exposer_ts/contract.algo.ts::LibPcg32ExposerAlgoTs.bounded_rand_uint32",
      "params": {
        "seed#0": "bytes",
        "lower_bound#0": "bytes",
        "upper_bound#0": "bytes",
        "length#0": "bytes"
      },
      "block": "bounded_rand_uint32",
      "stack_in": [],
      "op": "proto 4 1"
    },
    "533": {
      "op": "frame_dig -4",
      "defined_out": [
        "seed#0 (copy)"
      ],
      "stack_out": [
        "seed#0 (copy)"
      ]
    },
    "535": {
      "callsub": "lib_pcg/pcg32.algo.ts::pcg32Init",
      "op": "callsub pcg32Init",
      "defined_out": [
        "state#0"
      ],
      "stack_out": [
        "state#0"
      ]
    },
    "538": {
      "op": "frame_dig -3",
      "defined_out": [
        "lower_bound#0 (copy)",
        "state#0"
      ],
      "stack_out": [
        "state#0",
        "lower_bound#0 (copy)"
      ]
    },
    "540": {
      "op": "btoi",
      "defined_out": [
        "lowerBound#0",
        "state#0"
      ],
      "stack_out": [
        "state#0",
        "lowerBound#0"
      ]
    },
    "541": {
      "op": "frame_dig -2",
      "defined_out": [
        "lowerBound#0",
        "state#0",
        "upper_bound#0 (copy)"
      ],
      "stack_out": [
        "state#0",
        "lowerBound#0",
        "upper_bound#0 (copy)"
      ]
    },
    "543": {
      "op": "btoi",
      "defined_out": [
        "lowerBound#0",
        "state#0",
        "upperBound#0"
      ],
      "stack_out": [
        "state#0",
        "lowerBound#0",
        "upperBound#0"
      ]
    },
    "544": {
      "op": "frame_dig -1",
      "defined_out": [
        "length#0 (copy)",
        "lowerBound#0",
        "state#0",
        "upperBound#0"
      ],
      "stack_out": [
        "state#0",
        "lowerBound#0",
        "upperBound#0",
        "length#0 (copy)"
      ]
    },
    "546": {
      "op": "btoi",
      "defined_out": [
        "length#1",
        "lowerBound#0",
        "state#0",
        "upperBound#0"
      ],
      "stack_out": [
        "state#0",
        "lowerBound#0",
        "upperBound#0",
        "length#1"
      ]
    },
    "547": {
      "op": "dup",
      "stack_out": [
        "state#0",
        "lowerBound#0",
        "upperBound#0",
        "length#1",
        "length#1"
      ]
    },
    "548": {
      "op": "cover 4",
      "defined_out": [
        "length#1",
        "lowerBound#0",
        "state#0",
        "upperBound#0"
      ],
      "stack_out": [
        "length#1",
        "state#0",
        "lowerBound#0",
        "upperBound#0",
        "length#1"
      ]
    },
    "550": {
      "op": "bytec_1 // 0x0000",
      "defined_out": [
        "length#1",
        "lowerBound#0",
        "result#0",
        "state#0",
        "upperBound#0"
      ],
      "stack_out": [
        "length#1",
        "state#0",
        "lowerBound#0",
        "upperBound#0",
        "length#1",
        "result#0"
      ]
    },
    "551": {
      "op": "cover 4",
      "defined_out": [
        "length#1",
        "lowerBound#0",
        "result#0",
        "state#0",
        "upperBound#0"
      ],
      "stack_out": [
        "length#1",
        "result#0",
        "state#0",
        "lowerBound#0",
        "upperBound#0",
        "length#1"
      ]
    },
    "553": {
      "op": "uncover 3",
      "stack_out": [
        "length#1",
        "result#0",
        "lowerBound#0",
        "upperBound#0",
        "length#1",
        "state#0"
      ]
    },
    "555": {
      "op": "pushint 32 // 32",
      "defined_out": [
        "32",
        "length#1",
        "lowerBound#0",
        "result#0",
        "state#0",
        "upperBound#0"
      ],
      "stack_out": [
        "length#1",
        "result#0",
        "lowerBound#0",
        "upperBound#0",
        "length#1",
        "state#0",
        "32"
      ]
    },
    "557": {
      "op": "cover 4"
    },
    "559": {
      "op": "cover 4",
      "stack_out": [
        "length#1",
        "result#0",
        "state#0",
        "32",
        "lowerBound#0",
        "upperBound#0",
        "length#1"
      ]
    },
    "561": {
      "callsub": "lib_pcg/pcg32.algo.ts::__pcg32BoundedSequence",
      "op": "callsub __pcg32BoundedSequence",
      "defined_out": [
        "length#1",
        "newState#1",
        "result#0",
        "sequence#1"
      ],
      "stack_out": [
        "length#1",
        "result#0",
        "newState#1",
        "sequence#1"
      ]
    },
    "564": {
      "op": "bury 1",
      "defined_out": [
        "length#1",
        "result#0",
        "sequence#1"
      ],
      "stack_out": [
        "length#1",
        "result#0",
        "sequence#1"
      ]
    },
    "566": {
      "op": "intc_1 // 0",
      "defined_out": [
        "i#0",
        "length#1",
        "result#0",
        "sequence#1"
      ],
      "stack_out": [
        "length#1",
        "result#0",
        "sequence#1",
        "i#0"
      ]
    },
    "567": {
      "block": "bounded_rand_uint32_while_top@2",
      "stack_in": [
        "length#1",
        "result#0",
        "sequence#1",
        "i#0"
      ],
      "op": "frame_dig 3",
      "defined_out": [
        "i#0"
      ],
      "stack_out": [
        "length#1",
        "result#0",
        "sequence#1",
        "i#0",
        "i#0"
      ]
    },
    "569": {
      "op": "frame_dig 0",
      "defined_out": [
        "i#0",
        "length#1"
      ],
      "stack_out": [
        "length#1",
        "result#0",
        "sequence#1",
        "i#0",
        "i#0",
        "length#1"
      ]
    },
    "571": {
      "op": "<",
      "defined_out": [
        "i#0",
        "length#1",
        "tmp%0#1"
      ],
      "stack_out": [
        "length#1",
        "result#0",
        "sequence#1",
        "i#0",
        "tmp%0#1"
      ]
    },
    "572": {
      "op": "bz bounded_rand_uint32_after_while@4",
      "stack_out": [
        "length#1",
        "result#0",
        "sequence#1",
        "i#0"
      ]
    },
    "575": {
      "op": "frame_dig 1"
    },
    "577": {
      "op": "extract 2 0"
    },
    "580": {
      "op": "frame_dig 3"
    },
    "582": {
      "op": "dup"
    },
    "583": {
      "op": "cover 2"
    },
    "585": {
      "op": "pushint 4 // 4"
    },
    "587": {
      "op": "*"
    },
    "588": {
      "op": "intc_2 // 2"
    },
    "589": {
      "op": "+"
    },
    "590": {
      "op": "frame_dig 2"
    },
    "592": {
      "op": "swap"
    },
    "593": {
      "op": "extract_uint32"
    },
    "594": {
      "op": "itob"
    },
    "595": {
      "op": "extract 4 4"
    },
    "598": {
      "op": "concat"
    },
    "599": {
      "op": "dup"
    },
    "600": {
      "op": "len"
    },
    "601": {
      "op": "pushint 4 // 4"
    },
    "603": {
      "op": "/"
    },
    "604": {
      "op": "itob"
    },
    "605": {
      "op": "extract 6 2"
    },
    "608": {
      "op": "swap"
    },
    "609": {
      "op": "concat"
    },
    "610": {
      "op": "frame_bury 1"
    },
    "612": {
      "op": "intc_0 // 1"
    },
    "613": {
      "op": "+"
    },
    "614": {
      "op": "frame_bury 3"
    },
    "616": {
      "op": "b bounded_rand_uint32_while_top@2"
    },
    "619": {
      "block": "bounded_rand_uint32_after_while@4",
      "stack_in": [
        "length#1",
        "result#0",
        "sequence#1",
        "i#0"
      ],
      "op": "frame_dig 1",
      "defined_out": [
        "result#0"
      ],
      "stack_out": [
        "length#1",
        "result#0",
        "sequence#1",
        "i#0",
        "result#0"
      ]
    },
    "621": {
      "op": "frame_bury 0"
    },
    "623": {
      "retsub": true,
      "op": "retsub"
    },
    "624": {
      "subroutine": "smart_contracts/lib_pcg32_exposer_ts/contract.algo.ts::LibPcg32ExposerAlgoTs.bounded_rand_uint16",
      "params": {
        "seed#0": "bytes",
        "lower_bound#0": "bytes",
        "upper_bound#0": "bytes",
        "length#0": "bytes"
      },
      "block": "bounded_rand_uint16",
      "stack_in": [],
      "op": "proto 4 1"
    },
    "627": {
      "op": "frame_dig -4",
      "defined_out": [
        "seed#0 (copy)"
      ],
      "stack_out": [
        "seed#0 (copy)"
      ]
    },
    "629": {
      "callsub": "lib_pcg/pcg32.algo.ts::pcg32Init",
      "op": "callsub pcg32Init",
      "defined_out": [
        "state#0"
      ],
      "stack_out": [
        "state#0"
      ]
    },
    "632": {
      "op": "frame_dig -3",
      "defined_out": [
        "lower_bound#0 (copy)",
        "state#0"
      ],
      "stack_out": [
        "state#0",
        "lower_bound#0 (copy)"
      ]
    },
    "634": {
      "op": "btoi",
      "defined_out": [
        "lowerBound#0",
        "state#0"
      ],
      "stack_out": [
        "state#0",
        "lowerBound#0"
      ]
    },
    "635": {
      "op": "frame_dig -2",
      "defined_out": [
        "lowerBound#0",
        "state#0",
        "upper_bound#0 (copy)"
      ],
      "stack_out": [
        "state#0",
        "lowerBound#0",
        "upper_bound#0 (copy)"
      ]
    },
    "637": {
      "op": "btoi",
      "defined_out": [
        "lowerBound#0",
        "state#0",
        "upperBound#0"
      ],
      "stack_out": [
        "state#0",
        "lowerBound#0",
        "upperBound#0"
      ]
    },
    "638": {
      "op": "frame_dig -1",
      "defined_out": [
        "length#0 (copy)",
        "lowerBound#0",
        "state#0",
        "upperBound#0"
      ],
      "stack_out": [
        "state#0",
        "lowerBound#0",
        "upperBound#0",
        "length#0 (copy)"
      ]
    },
    "640": {
      "op": "btoi",
      "defined_out": [
        "length#1",
        "lowerBound#0",
        "state#0",
        "upperBound#0"
      ],
      "stack_out": [
        "state#0",
        "lowerBound#0",
        "upperBound#0",
        "length#1"
      ]
    },
    "641": {
      "op": "dup",
      "stack_out": [
        "state#0",
        "lowerBound#0",
        "upperBound#0",
        "length#1",
        "length#1"
      ]
    },
    "642": {
      "op": "cover 4",
      "defined_out": [
        "length#1",
        "lowerBound#0",
        "state#0",
        "upperBound#0"
      ],
      "stack_out": [
        "length#1",
        "state#0",
        "lowerBound#0",
        "upperBound#0",
        "length#1"
      ]
    },
    "644": {
      "op": "bytec_1 // 0x0000",
      "defined_out": [
        "length#1",
        "lowerBound#0",
        "result#0",
        "state#0",
        "upperBound#0"
      ],
      "stack_out": [
        "length#1",
        "state#0",
        "lowerBound#0",
        "upperBound#0",
        "length#1",
        "result#0"
      ]
    },
    "645": {
      "op": "cover 4",
      "defined_out": [
        "length#1",
        "lowerBound#0",
        "result#0",
        "state#0",
        "upperBound#0"
      ],
      "stack_out": [
        "length#1",
        "result#0",
        "state#0",
        "lowerBound#0",
        "upperBound#0",
        "length#1"
      ]
    },
    "647": {
      "op": "uncover 3",
      "stack_out": [
        "length#1",
        "result#0",
        "lowerBound#0",
        "upperBound#0",
        "length#1",
        "state#0"
      ]
    },
    "649": {
      "op": "pushint 16 // 16",
      "defined_out": [
        "16",
        "length#1",
        "lowerBound#0",
        "result#0",
        "state#0",
        "upperBound#0"
      ],
      "stack_out": [
        "length#1",
        "result#0",
        "lowerBound#0",
        "upperBound#0",
        "length#1",
        "state#0",
        "16"
      ]
    },
    "651": {
      "op": "cover 4"
    },
    "653": {
      "op": "cover 4",
      "stack_out": [
        "length#1",
        "result#0",
        "state#0",
        "16",
        "lowerBound#0",
        "upperBound#0",
        "length#1"
      ]
    },
    "655": {
      "callsub": "lib_pcg/pcg32.algo.ts::__pcg32BoundedSequence",
      "op": "callsub __pcg32BoundedSequence",
      "defined_out": [
        "length#1",
        "newState#1",
        "result#0",
        "sequence#1"
      ],
      "stack_out": [
        "length#1",
        "result#0",
        "newState#1",
        "sequence#1"
      ]
    },
    "658": {
      "op": "bury 1",
      "defined_out": [
        "length#1",
        "result#0",
        "sequence#1"
      ],
      "stack_out": [
        "length#1",
        "result#0",
        "sequence#1"
      ]
    },
    "660": {
      "op": "intc_1 // 0",
      "defined_out": [
        "i#0",
        "length#1",
        "result#0",
        "sequence#1"
      ],
      "stack_out": [
        "length#1",
        "result#0",
        "sequence#1",
        "i#0"
      ]
    },
    "661": {
      "block": "bounded_rand_uint16_while_top@4",
      "stack_in": [
        "length#1",
        "result#0",
        "sequence#1",
        "i#0"
      ],
      "op": "frame_dig 3",
      "defined_out": [
        "i#0"
      ],
      "stack_out": [
        "length#1",
        "result#0",
        "sequence#1",
        "i#0",
        "i#0"
      ]
    },
    "663": {
      "op": "frame_dig 0",
      "defined_out": [
        "i#0",
        "length#1"
      ],
      "stack_out": [
        "length#1",
        "result#0",
        "sequence#1",
        "i#0",
        "i#0",
        "length#1"
      ]
    },
    "665": {
      "op": "<",
      "defined_out": [
        "i#0",
        "length#1",
        "tmp%0#2"
      ],
      "stack_out": [
        "length#1",
        "result#0",
        "sequence#1",
        "i#0",
        "tmp%0#2"
      ]
    },
    "666": {
      "op": "bz bounded_rand_uint16_after_while@6",
      "stack_out": [
        "length#1",
        "result#0",
        "sequence#1",
        "i#0"
      ]
    },
    "669": {
      "op": "frame_dig 1"
    },
    "671": {
      "op": "extract 2 0"
    },
    "674": {
      "op": "frame_dig 3"
    },
    "676": {
      "op": "dup"
    },
    "677": {
      "op": "cover 2"
    },
    "679": {
      "op": "intc_2 // 2"
    },
    "680": {
      "op": "*"
    },
    "681": {
      "op": "intc_2 // 2"
    },
    "682": {
      "op": "+"
    },
    "683": {
      "op": "frame_dig 2"
    },
    "685": {
      "op": "swap"
    },
    "686": {
      "op": "extract_uint16"
    },
    "687": {
      "op": "itob"
    },
    "688": {
      "op": "extract 6 2"
    },
    "691": {
      "op": "concat"
    },
    "692": {
      "op": "dup"
    },
    "693": {
      "op": "len"
    },
    "694": {
      "op": "intc_2 // 2"
    },
    "695": {
      "op": "/"
    },
    "696": {
      "op": "itob"
    },
    "697": {
      "op": "extract 6 2"
    },
    "700": {
      "op": "swap"
    },
    "701": {
      "op": "concat"
    },
    "702": {
      "op": "frame_bury 1"
    },
    "704": {
      "op": "intc_0 // 1"
    },
    "705": {
      "op": "+"
    },
    "706": {
      "op": "frame_bury 3"
    },
    "708": {
      "op": "b bounded_rand_uint16_while_top@4"
    },
    "711": {
      "block": "bounded_rand_uint16_after_while@6",
      "stack_in": [
        "length#1",
        "result#0",
        "sequence#1",
        "i#0"
      ],
      "op": "frame_dig 1",
      "defined_out": [
        "result#0"
      ],
      "stack_out": [
        "length#1",
        "result#0",
        "sequence#1",
        "i#0",
        "result#0"
      ]
    },
    "713": {
      "op": "frame_bury 0"
    },
    "715": {
      "retsub": true,
      "op": "retsub"
    },
    "716": {
      "subroutine": "smart_contracts/lib_pcg32_exposer_ts/contract.algo.ts::LibPcg32ExposerAlgoTs.bounded_rand_uint8",
      "params": {
        "seed#0": "bytes",
        "lower_bound#0": "bytes",
        "upper_bound#0": "bytes",
        "length#0": "bytes"
      },
      "block": "bounded_rand_uint8",
      "stack_in": [],
      "op": "proto 4 1"
    },
    "719": {
      "op": "frame_dig -4",
      "defined_out": [
        "seed#0 (copy)"
      ],
      "stack_out": [
        "seed#0 (copy)"
      ]
    },
    "721": {
      "callsub": "lib_pcg/pcg32.algo.ts::pcg32Init",
      "op": "callsub pcg32Init",
      "defined_out": [
        "state#0"
      ],
      "stack_out": [
        "state#0"
      ]
    },
    "724": {
      "op": "frame_dig -3",
      "defined_out": [
        "lower_bound#0 (copy)",
        "state#0"
      ],
      "stack_out": [
        "state#0",
        "lower_bound#0 (copy)"
      ]
    },
    "726": {
      "op": "btoi",
      "defined_out": [
        "lowerBound#0",
        "state#0"
      ],
      "stack_out": [
        "state#0",
        "lowerBound#0"
      ]
    },
    "727": {
      "op": "frame_dig -2",
      "defined_out": [
        "lowerBound#0",
        "state#0",
        "upper_bound#0 (copy)"
      ],
      "stack_out": [
        "state#0",
        "lowerBound#0",
        "upper_bound#0 (copy)"
      ]
    },
    "729": {
      "op": "btoi",
      "defined_out": [
        "lowerBound#0",
        "state#0",
        "upperBound#0"
      ],
      "stack_out": [
        "state#0",
        "lowerBound#0",
        "upperBound#0"
      ]
    },
    "730": {
      "op": "frame_dig -1",
      "defined_out": [
        "length#0 (copy)",
        "lowerBound#0",
        "state#0",
        "upperBound#0"
      ],
      "stack_out": [
        "state#0",
        "lowerBound#0",
        "upperBound#0",
        "length#0 (copy)"
      ]
    },
    "732": {
      "op": "btoi",
      "defined_out": [
        "length#1",
        "lowerBound#0",
        "state#0",
        "upperBound#0"
      ],
      "stack_out": [
        "state#0",
        "lowerBound#0",
        "upperBound#0",
        "length#1"
      ]
    },
    "733": {
      "op": "dup",
      "stack_out": [
        "state#0",
        "lowerBound#0",
        "upperBound#0",
        "length#1",
        "length#1"
      ]
    },
    "734": {
      "op": "cover 4",
      "defined_out": [
        "length#1",
        "lowerBound#0",
        "state#0",
        "upperBound#0"
      ],
      "stack_out": [
        "length#1",
        "state#0",
        "lowerBound#0",
        "upperBound#0",
        "length#1"
      ]
    },
    "736": {
      "op": "bytec_1 // 0x0000",
      "defined_out": [
        "length#1",
        "lowerBound#0",
        "result#0",
        "state#0",
        "upperBound#0"
      ],
      "stack_out": [
        "length#1",
        "state#0",
        "lowerBound#0",
        "upperBound#0",
        "length#1",
        "result#0"
      ]
    },
    "737": {
      "op": "cover 4",
      "defined_out": [
        "length#1",
        "lowerBound#0",
        "result#0",
        "state#0",
        "upperBound#0"
      ],
      "stack_out": [
        "length#1",
        "result#0",
        "state#0",
        "lowerBound#0",
        "upperBound#0",
        "length#1"
      ]
    },
    "739": {
      "op": "uncover 3",
      "stack_out": [
        "length#1",
        "result#0",
        "lowerBound#0",
        "upperBound#0",
        "length#1",
        "state#0"
      ]
    },
    "741": {
      "op": "intc_3 // 8",
      "defined_out": [
        "8",
        "length#1",
        "lowerBound#0",
        "result#0",
        "state#0",
        "upperBound#0"
      ],
      "stack_out": [
        "length#1",
        "result#0",
        "lowerBound#0",
        "upperBound#0",
        "length#1",
        "state#0",
        "8"
      ]
    },
    "742": {
      "op": "cover 4"
    },
    "744": {
      "op": "cover 4",
      "stack_out": [
        "length#1",
        "result#0",
        "state#0",
        "8",
        "lowerBound#0",
        "upperBound#0",
        "length#1"
      ]
    },
    "746": {
      "callsub": "lib_pcg/pcg32.algo.ts::__pcg32BoundedSequence",
      "op": "callsub __pcg32BoundedSequence",
      "defined_out": [
        "length#1",
        "newState#1",
        "result#0",
        "sequence#1"
      ],
      "stack_out": [
        "length#1",
        "result#0",
        "newState#1",
        "sequence#1"
      ]
    },
    "749": {
      "op": "bury 1",
      "defined_out": [
        "length#1",
        "result#0",
        "sequence#1"
      ],
      "stack_out": [
        "length#1",
        "result#0",
        "sequence#1"
      ]
    },
    "751": {
      "op": "intc_1 // 0",
      "defined_out": [
        "i#0",
        "length#1",
        "result#0",
        "sequence#1"
      ],
      "stack_out": [
        "length#1",
        "result#0",
        "sequence#1",
        "i#0"
      ]
    },
    "752": {
      "block": "bounded_rand_uint8_while_top@4",
      "stack_in": [
        "length#1",
        "result#0",
        "sequence#1",
        "i#0"
      ],
      "op": "frame_dig 3",
      "defined_out": [
        "i#0"
      ],
      "stack_out": [
        "length#1",
        "result#0",
        "sequence#1",
        "i#0",
        "i#0"
      ]
    },
    "754": {
      "op": "frame_dig 0",
      "defined_out": [
        "i#0",
        "length#1"
      ],
      "stack_out": [
        "length#1",
        "result#0",
        "sequence#1",
        "i#0",
        "i#0",
        "length#1"
      ]
    },
    "756": {
      "op": "<",
      "defined_out": [
        "i#0",
        "length#1",
        "tmp%0#2"
      ],
      "stack_out": [
        "length#1",
        "result#0",
        "sequence#1",
        "i#0",
        "tmp%0#2"
      ]
    },
    "757": {
      "op": "bz bounded_rand_uint8_after_while@6",
      "stack_out": [
        "length#1",
        "result#0",
        "sequence#1",
        "i#0"
      ]
    },
    "760": {
      "op": "frame_dig 1"
    },
    "762": {
      "op": "extract 2 0"
    },
    "765": {
      "op": "intc_2 // 2"
    },
    "766": {
      "op": "frame_dig 3"
    },
    "768": {
      "op": "dup"
    },
    "769": {
      "op": "cover 3"
    },
    "771": {
      "op": "+"
    },
    "772": {
      "op": "frame_dig 2"
    },
    "774": {
      "op": "swap"
    },
    "775": {
      "op": "intc_0 // 1"
    },
    "776": {
      "op": "extract3"
    },
    "777": {
      "op": "btoi"
    },
    "778": {
      "op": "itob"
    },
    "779": {
      "op": "extract 7 1"
    },
    "782": {
      "op": "concat"
    },
    "783": {
      "op": "dup"
    },
    "784": {
      "op": "len"
    },
    "785": {
      "op": "itob"
    },
    "786": {
      "op": "extract 6 2"
    },
    "789": {
      "op": "swap"
    },
    "790": {
      "op": "concat"
    },
    "791": {
      "op": "frame_bury 1"
    },
    "793": {
      "op": "intc_0 // 1"
    },
    "794": {
      "op": "+"
    },
    "795": {
      "op": "frame_bury 3"
    },
    "797": {
      "op": "b bounded_rand_uint8_while_top@4"
    },
    "800": {
      "block": "bounded_rand_uint8_after_while@6",
      "stack_in": [
        "length#1",
        "result#0",
        "sequence#1",
        "i#0"
      ],
      "op": "frame_dig 1",
      "defined_out": [
        "result#0"
      ],
      "stack_out": [
        "length#1",
        "result#0",
        "sequence#1",
        "i#0",
        "result#0"
      ]
    },
    "802": {
      "op": "frame_bury 0"
    },
    "804": {
      "retsub": true,
      "op": "retsub"
    },
    "805": {
      "subroutine": "smart_contracts/lib_pcg32_exposer_ts/contract.algo.ts::LibPcg32ExposerAlgoTs.update",
      "params": {},
      "block": "update",
      "stack_in": [],
      "op": "proto 0 0"
    },
    "808": {
      "op": "txn Sender"
    },
    "810": {
      "op": "global CreatorAddress",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "812": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "813": {
      "op": "assert",
      "stack_out": []
    },
    "814": {
      "retsub": true,
      "op": "retsub"
    }
  }
}