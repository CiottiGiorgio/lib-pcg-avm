#pragma version 10
#pragma typetrack false

// @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram() -> uint64:
main:
    intcblock 1 0 2 8 6364136223846793005 1442695040888963407 4294967295
    bytecblock 0x151f7c75 0x0000
    txn NumAppArgs
    bz main_bare_routing@8
    pushbytess 0xed06f70a 0x8d7cce79 0xd0a35e1e // method "bounded_rand_uint32(byte[8],uint32,uint32,uint16)uint32[]", method "bounded_rand_uint16(byte[8],uint16,uint16,uint16)uint16[]", method "bounded_rand_uint8(byte[8],uint8,uint8,uint16)uint8[]"
    txna ApplicationArgs 0
    match main_bounded_rand_uint32_route@3 main_bounded_rand_uint16_route@4 main_bounded_rand_uint8_route@5

main_after_if_else@13:
    intc_1 // 0
    return

main_bounded_rand_uint8_route@5:
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    txna ApplicationArgs 1
    txna ApplicationArgs 2
    txna ApplicationArgs 3
    txna ApplicationArgs 4
    callsub bounded_rand_uint8
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return

main_bounded_rand_uint16_route@4:
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    txna ApplicationArgs 1
    txna ApplicationArgs 2
    txna ApplicationArgs 3
    txna ApplicationArgs 4
    callsub bounded_rand_uint16
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return

main_bounded_rand_uint32_route@3:
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    txna ApplicationArgs 1
    txna ApplicationArgs 2
    txna ApplicationArgs 3
    txna ApplicationArgs 4
    callsub bounded_rand_uint32
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return

main_bare_routing@8:
    pushint 4 // 4
    intc_1 // 0
    txn OnCompletion
    match main_update@9 main___algots__.defaultCreate@10
    b main_after_if_else@13

main___algots__.defaultCreate@10:
    txn ApplicationID
    !
    assert // can only call when creating
    intc_0 // 1
    return

main_update@9:
    txn ApplicationID
    assert // can only call when not creating
    callsub update
    intc_0 // 1
    return


// lib_pcg/pcg32.algo.ts::__pcg32UnboundedRandom(state: uint64) -> uint64, uint64:
__pcg32UnboundedRandom:
    proto 1 2
    frame_dig -1
    intc 4 // 6364136223846793005
    mulw
    bury 1
    intc 5 // 1442695040888963407
    addw
    bury 1
    frame_dig -1
    pushint 18 // 18
    shr
    frame_dig -1
    ^
    pushint 27 // 27
    shr
    intc 6 // 4294967295
    &
    frame_dig -1
    pushint 59 // 59
    shr
    dup2
    shr
    swap
    ~
    intc_0 // 1
    addw
    bury 1
    pushint 31 // 31
    &
    uncover 2
    swap
    shl
    intc 6 // 4294967295
    &
    |
    retsub


// lib_pcg/pcg32.algo.ts::__pcg32BoundedSequence(state: uint64, bitSize: uint64, lowerBound: uint64, upperBound: uint64, length: uint64) -> uint64, bytes:
__pcg32BoundedSequence:
    proto 5 2
    pushbytes ""
    dupn 6
    frame_dig -1
    pushint 65536 // 65536
    <
    assert
    frame_dig -1
    itob
    extract 6 2
    frame_dig -4
    intc_3 // 8
    ==
    bnz __pcg32BoundedSequence_bool_true@3
    frame_dig -4
    pushint 16 // 16
    ==
    bnz __pcg32BoundedSequence_bool_true@3
    frame_dig -4
    pushint 32 // 32
    ==
    bz __pcg32BoundedSequence_bool_false@4

__pcg32BoundedSequence_bool_true@3:
    intc_0 // 1

__pcg32BoundedSequence_bool_merge@5:
    assert
    frame_dig -4
    pushint 3 // 3
    shr
    dup
    frame_bury 1
    intc_3 // 8
    swap
    -
    frame_bury 6
    frame_dig -3
    bnz __pcg32BoundedSequence_else_body@11
    frame_dig -2
    bnz __pcg32BoundedSequence_else_body@11
    intc_1 // 0
    frame_bury 3

__pcg32BoundedSequence_while_top@8:
    frame_dig 3
    frame_dig -1
    <
    bz __pcg32BoundedSequence_after_if_else@24
    frame_dig -5
    callsub __pcg32UnboundedRandom
    itob
    frame_dig 6
    frame_dig 1
    extract3
    frame_dig 7
    swap
    concat
    frame_bury 7
    frame_dig 3
    intc_0 // 1
    +
    frame_bury 3
    frame_bury -5
    b __pcg32BoundedSequence_while_top@8

__pcg32BoundedSequence_after_if_else@24:
    frame_dig -5
    frame_dig 7
    frame_bury 1
    frame_bury 0
    retsub

__pcg32BoundedSequence_else_body@11:
    frame_dig -2
    bz __pcg32BoundedSequence_else_body@13
    frame_dig -2
    intc_0 // 1
    >
    assert
    intc_0 // 1
    frame_dig -4
    shl
    frame_dig -2
    >
    assert
    frame_dig -2
    intc_0 // 1
    -
    frame_dig -3
    >
    assert
    frame_dig -2
    frame_dig -3
    -
    frame_bury 0

__pcg32BoundedSequence_after_if_else@14:
    frame_dig 0
    dup
    ~
    intc_0 // 1
    addw
    bury 1
    intc 6 // 4294967295
    &
    swap
    %
    frame_bury 5
    intc_1 // 0
    frame_bury 4

__pcg32BoundedSequence_while_top@15:
    frame_dig 4
    frame_dig -1
    <
    bz __pcg32BoundedSequence_after_if_else@24

__pcg32BoundedSequence_while_top@17:
    frame_dig -5
    callsub __pcg32UnboundedRandom
    dup
    cover 2
    frame_bury 2
    swap
    frame_dig 5
    >=
    bz __pcg32BoundedSequence_after_if_else@20
    frame_dig 2
    frame_dig 0
    %
    frame_dig -3
    +
    itob
    frame_dig 6
    frame_dig 1
    extract3
    frame_dig 7
    swap
    concat
    frame_bury 7
    frame_dig 4
    intc_0 // 1
    +
    frame_bury 4
    frame_bury -5
    b __pcg32BoundedSequence_while_top@15

__pcg32BoundedSequence_after_if_else@20:
    frame_bury -5
    b __pcg32BoundedSequence_while_top@17

__pcg32BoundedSequence_else_body@13:
    intc_0 // 1
    frame_dig -4
    shl
    dup
    intc_0 // 1
    -
    frame_dig -3
    >
    assert
    frame_dig -3
    -
    frame_bury 0
    b __pcg32BoundedSequence_after_if_else@14

__pcg32BoundedSequence_bool_false@4:
    intc_1 // 0
    b __pcg32BoundedSequence_bool_merge@5


// lib_pcg/pcg32.algo.ts::pcg32Init(seed: bytes) -> uint64:
pcg32Init:
    proto 1 1
    frame_dig -1
    len
    intc_3 // 8
    ==
    assert
    frame_dig -1
    btoi
    intc_1 // 0
    intc 4 // 6364136223846793005
    mulw
    bury 1
    intc 5 // 1442695040888963407
    addw
    bury 1
    addw
    bury 1
    intc 4 // 6364136223846793005
    mulw
    bury 1
    intc 5 // 1442695040888963407
    addw
    bury 1
    retsub


// smart_contracts/lib_pcg32_exposer_ts/contract.algo.ts::LibPcg32ExposerAlgoTs.bounded_rand_uint32(seed: bytes, lower_bound: bytes, upper_bound: bytes, length: bytes) -> bytes:
bounded_rand_uint32:
    proto 4 1
    frame_dig -4
    callsub pcg32Init
    frame_dig -3
    btoi
    frame_dig -2
    btoi
    frame_dig -1
    btoi
    dup
    cover 4
    bytec_1 // 0x0000
    cover 4
    uncover 3
    pushint 32 // 32
    cover 4
    cover 4
    callsub __pcg32BoundedSequence
    bury 1
    intc_1 // 0

bounded_rand_uint32_while_top@2:
    frame_dig 3
    frame_dig 0
    <
    bz bounded_rand_uint32_after_while@4
    frame_dig 1
    extract 2 0
    frame_dig 3
    dup
    cover 2
    pushint 4 // 4
    *
    intc_2 // 2
    +
    frame_dig 2
    swap
    extract_uint32
    itob
    extract 4 4
    concat
    dup
    len
    pushint 4 // 4
    /
    itob
    extract 6 2
    swap
    concat
    frame_bury 1
    intc_0 // 1
    +
    frame_bury 3
    b bounded_rand_uint32_while_top@2

bounded_rand_uint32_after_while@4:
    frame_dig 1
    frame_bury 0
    retsub


// smart_contracts/lib_pcg32_exposer_ts/contract.algo.ts::LibPcg32ExposerAlgoTs.bounded_rand_uint16(seed: bytes, lower_bound: bytes, upper_bound: bytes, length: bytes) -> bytes:
bounded_rand_uint16:
    proto 4 1
    frame_dig -4
    callsub pcg32Init
    frame_dig -3
    btoi
    frame_dig -2
    btoi
    frame_dig -1
    btoi
    dup
    cover 4
    bytec_1 // 0x0000
    cover 4
    uncover 3
    pushint 16 // 16
    cover 4
    cover 4
    callsub __pcg32BoundedSequence
    bury 1
    intc_1 // 0

bounded_rand_uint16_while_top@4:
    frame_dig 3
    frame_dig 0
    <
    bz bounded_rand_uint16_after_while@6
    frame_dig 1
    extract 2 0
    frame_dig 3
    dup
    cover 2
    intc_2 // 2
    *
    intc_2 // 2
    +
    frame_dig 2
    swap
    extract_uint16
    itob
    extract 6 2
    concat
    dup
    len
    intc_2 // 2
    /
    itob
    extract 6 2
    swap
    concat
    frame_bury 1
    intc_0 // 1
    +
    frame_bury 3
    b bounded_rand_uint16_while_top@4

bounded_rand_uint16_after_while@6:
    frame_dig 1
    frame_bury 0
    retsub


// smart_contracts/lib_pcg32_exposer_ts/contract.algo.ts::LibPcg32ExposerAlgoTs.bounded_rand_uint8(seed: bytes, lower_bound: bytes, upper_bound: bytes, length: bytes) -> bytes:
bounded_rand_uint8:
    proto 4 1
    frame_dig -4
    callsub pcg32Init
    frame_dig -3
    btoi
    frame_dig -2
    btoi
    frame_dig -1
    btoi
    dup
    cover 4
    bytec_1 // 0x0000
    cover 4
    uncover 3
    intc_3 // 8
    cover 4
    cover 4
    callsub __pcg32BoundedSequence
    bury 1
    intc_1 // 0

bounded_rand_uint8_while_top@4:
    frame_dig 3
    frame_dig 0
    <
    bz bounded_rand_uint8_after_while@6
    frame_dig 1
    extract 2 0
    intc_2 // 2
    frame_dig 3
    dup
    cover 3
    +
    frame_dig 2
    swap
    getbyte
    itob
    extract 7 1
    concat
    dup
    len
    itob
    extract 6 2
    swap
    concat
    frame_bury 1
    intc_0 // 1
    +
    frame_bury 3
    b bounded_rand_uint8_while_top@4

bounded_rand_uint8_after_while@6:
    frame_dig 1
    frame_bury 0
    retsub


// smart_contracts/lib_pcg32_exposer_ts/contract.algo.ts::LibPcg32ExposerAlgoTs.update() -> void:
update:
    txn Sender
    global CreatorAddress
    ==
    assert
    retsub
