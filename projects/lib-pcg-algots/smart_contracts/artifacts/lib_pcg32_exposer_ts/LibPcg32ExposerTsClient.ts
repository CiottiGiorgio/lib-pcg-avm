/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { AlgorandClientInterface } from '@algorandfoundation/algokit-utils/types/algorand-client-interface'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'
import SimulateResponse = modelsv2.SimulateResponse

export const APP_SPEC: Arc56Contract = {"name":"LibPcg32ExposerTs","structs":{},"methods":[{"name":"bounded_rand_uint32","args":[{"type":"byte[8]","name":"seed"},{"type":"uint32","name":"lower_bound"},{"type":"uint32","name":"upper_bound"},{"type":"uint16","name":"length"}],"returns":{"type":"uint32[]"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"bounded_rand_uint16","args":[{"type":"byte[8]","name":"seed"},{"type":"uint16","name":"lower_bound"},{"type":"uint16","name":"upper_bound"},{"type":"uint16","name":"length"}],"returns":{"type":"uint16[]"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"bounded_rand_uint8","args":[{"type":"byte[8]","name":"seed"},{"type":"uint8","name":"lower_bound"},{"type":"uint8","name":"upper_bound"},{"type":"uint16","name":"length"}],"returns":{"type":"uint8[]"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"update","args":[],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}}],"arcs":[22,28],"networks":{},"state":{"schema":{"global":{"ints":0,"bytes":0},"local":{"ints":0,"bytes":0}},"keys":{"global":{},"local":{},"box":{}},"maps":{"global":{},"local":{},"box":{}}},"bareActions":{"create":["NoOp"],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"pc":[78,106,134,162],"errorMessage":"OnCompletion is not NoOp"},{"pc":[179],"errorMessage":"can only call when creating"},{"pc":[81,109,137,165],"errorMessage":"can only call when not creating"}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"","clear":"I3ByYWdtYSB2ZXJzaW9uIDEwCgpzbWFydF9jb250cmFjdHMvbGliX3BjZzMyX2V4cG9zZXJfdHMvY29udHJhY3QuYWxnby50czo6TGliUGNnMzJFeHBvc2VyVHMuY2xlYXJTdGF0ZVByb2dyYW06CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="},"events":[],"templateVariables":{}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


/**
 * The argument types for the LibPcg32ExposerTs contract
 */
export type LibPcg32ExposerTsArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'bounded_rand_uint32(byte[8],uint32,uint32,uint16)uint32[]': {
      seed: Uint8Array
      lowerBound: bigint | number
      upperBound: bigint | number
      length: bigint | number
    }
    'bounded_rand_uint16(byte[8],uint16,uint16,uint16)uint16[]': {
      seed: Uint8Array
      lowerBound: bigint | number
      upperBound: bigint | number
      length: bigint | number
    }
    'bounded_rand_uint8(byte[8],uint8,uint8,uint16)uint8[]': {
      seed: Uint8Array
      lowerBound: bigint | number
      upperBound: bigint | number
      length: bigint | number
    }
    'update()void': Record<string, never>
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'bounded_rand_uint32(byte[8],uint32,uint32,uint16)uint32[]': [seed: Uint8Array, lowerBound: bigint | number, upperBound: bigint | number, length: bigint | number]
    'bounded_rand_uint16(byte[8],uint16,uint16,uint16)uint16[]': [seed: Uint8Array, lowerBound: bigint | number, upperBound: bigint | number, length: bigint | number]
    'bounded_rand_uint8(byte[8],uint8,uint8,uint16)uint8[]': [seed: Uint8Array, lowerBound: bigint | number, upperBound: bigint | number, length: bigint | number]
    'update()void': []
  }
}

/**
 * The return type for each method
 */
export type LibPcg32ExposerTsReturns = {
  'bounded_rand_uint32(byte[8],uint32,uint32,uint16)uint32[]': number[]
  'bounded_rand_uint16(byte[8],uint16,uint16,uint16)uint16[]': number[]
  'bounded_rand_uint8(byte[8],uint8,uint8,uint16)uint8[]': number[]
  'update()void': void
}

/**
 * Defines the types of available calls and state of the LibPcg32ExposerTs smart contract.
 */
export type LibPcg32ExposerTsTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'bounded_rand_uint32(byte[8],uint32,uint32,uint16)uint32[]' | 'bounded_rand_uint32', {
      argsObj: LibPcg32ExposerTsArgs['obj']['bounded_rand_uint32(byte[8],uint32,uint32,uint16)uint32[]']
      argsTuple: LibPcg32ExposerTsArgs['tuple']['bounded_rand_uint32(byte[8],uint32,uint32,uint16)uint32[]']
      returns: LibPcg32ExposerTsReturns['bounded_rand_uint32(byte[8],uint32,uint32,uint16)uint32[]']
    }>
    & Record<'bounded_rand_uint16(byte[8],uint16,uint16,uint16)uint16[]' | 'bounded_rand_uint16', {
      argsObj: LibPcg32ExposerTsArgs['obj']['bounded_rand_uint16(byte[8],uint16,uint16,uint16)uint16[]']
      argsTuple: LibPcg32ExposerTsArgs['tuple']['bounded_rand_uint16(byte[8],uint16,uint16,uint16)uint16[]']
      returns: LibPcg32ExposerTsReturns['bounded_rand_uint16(byte[8],uint16,uint16,uint16)uint16[]']
    }>
    & Record<'bounded_rand_uint8(byte[8],uint8,uint8,uint16)uint8[]' | 'bounded_rand_uint8', {
      argsObj: LibPcg32ExposerTsArgs['obj']['bounded_rand_uint8(byte[8],uint8,uint8,uint16)uint8[]']
      argsTuple: LibPcg32ExposerTsArgs['tuple']['bounded_rand_uint8(byte[8],uint8,uint8,uint16)uint8[]']
      returns: LibPcg32ExposerTsReturns['bounded_rand_uint8(byte[8],uint8,uint8,uint16)uint8[]']
    }>
    & Record<'update()void' | 'update', {
      argsObj: LibPcg32ExposerTsArgs['obj']['update()void']
      argsTuple: LibPcg32ExposerTsArgs['tuple']['update()void']
      returns: LibPcg32ExposerTsReturns['update()void']
    }>
}

/**
 * Defines the possible abi call signatures.
 */
export type LibPcg32ExposerTsSignatures = keyof LibPcg32ExposerTsTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type LibPcg32ExposerTsNonVoidMethodSignatures = keyof LibPcg32ExposerTsTypes['methods'] extends infer T ? T extends keyof LibPcg32ExposerTsTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the LibPcg32ExposerTs smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends LibPcg32ExposerTsSignatures> = LibPcg32ExposerTsTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the LibPcg32ExposerTs smart contract to the method's return type
 */
export type MethodReturn<TSignature extends LibPcg32ExposerTsSignatures> = LibPcg32ExposerTsTypes['methods'][TSignature]['returns']


/**
 * Defines supported create method params for this smart contract
 */
export type LibPcg32ExposerTsCreateCallParams =
  | Expand<AppClientBareCallParams & {method?: never} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines arguments required for the deploy method.
 */
export type LibPcg32ExposerTsDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: LibPcg32ExposerTsCreateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the LibPcg32ExposerTs smart contract
 */
export abstract class LibPcg32ExposerTsParamsFactory {
  /**
   * Constructs a no op call for the bounded_rand_uint32(byte[8],uint32,uint32,uint16)uint32[] ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static boundedRandUint32(params: CallParams<LibPcg32ExposerTsArgs['obj']['bounded_rand_uint32(byte[8],uint32,uint32,uint16)uint32[]'] | LibPcg32ExposerTsArgs['tuple']['bounded_rand_uint32(byte[8],uint32,uint32,uint16)uint32[]']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'bounded_rand_uint32(byte[8],uint32,uint32,uint16)uint32[]' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.seed, params.args.lowerBound, params.args.upperBound, params.args.length],
    }
  }
  /**
   * Constructs a no op call for the bounded_rand_uint16(byte[8],uint16,uint16,uint16)uint16[] ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static boundedRandUint16(params: CallParams<LibPcg32ExposerTsArgs['obj']['bounded_rand_uint16(byte[8],uint16,uint16,uint16)uint16[]'] | LibPcg32ExposerTsArgs['tuple']['bounded_rand_uint16(byte[8],uint16,uint16,uint16)uint16[]']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'bounded_rand_uint16(byte[8],uint16,uint16,uint16)uint16[]' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.seed, params.args.lowerBound, params.args.upperBound, params.args.length],
    }
  }
  /**
   * Constructs a no op call for the bounded_rand_uint8(byte[8],uint8,uint8,uint16)uint8[] ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static boundedRandUint8(params: CallParams<LibPcg32ExposerTsArgs['obj']['bounded_rand_uint8(byte[8],uint8,uint8,uint16)uint8[]'] | LibPcg32ExposerTsArgs['tuple']['bounded_rand_uint8(byte[8],uint8,uint8,uint16)uint8[]']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'bounded_rand_uint8(byte[8],uint8,uint8,uint16)uint8[]' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.seed, params.args.lowerBound, params.args.upperBound, params.args.length],
    }
  }
  /**
   * Constructs a no op call for the update()void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static update(params: CallParams<LibPcg32ExposerTsArgs['obj']['update()void'] | LibPcg32ExposerTsArgs['tuple']['update()void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'update()void' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the LibPcg32ExposerTs smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class LibPcg32ExposerTsFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `LibPcg32ExposerTsFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClientInterface {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new LibPcg32ExposerTsClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new LibPcg32ExposerTsClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the LibPcg32ExposerTs smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: LibPcg32ExposerTsDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
    })
    return { result: result.result, appClient: new LibPcg32ExposerTsClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the LibPcg32ExposerTs smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The params for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.params.bare.create(params)
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the LibPcg32ExposerTs smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The transaction for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.createTransaction.bare.create(params)
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the LibPcg32ExposerTs smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The create result
       */
      bare: async (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        const result = await this.appFactory.send.bare.create(params)
        return { result: result.result, appClient: new LibPcg32ExposerTsClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the LibPcg32ExposerTs smart contract
 */
export class LibPcg32ExposerTsClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `LibPcg32ExposerTsClient`
   *
   * @param appClient An `AppClient` instance which has been created with the LibPcg32ExposerTs app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `LibPcg32ExposerTsClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends LibPcg32ExposerTsNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `LibPcg32ExposerTsClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<LibPcg32ExposerTsClient> {
    return new LibPcg32ExposerTsClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `LibPcg32ExposerTsClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<LibPcg32ExposerTsClient> {
    return new LibPcg32ExposerTsClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClientInterface {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Makes a clear_state call to an existing instance of the LibPcg32ExposerTs smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the LibPcg32ExposerTs smart contract using the `bounded_rand_uint32(byte[8],uint32,uint32,uint16)uint32[]` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    boundedRandUint32: (params: CallParams<LibPcg32ExposerTsArgs['obj']['bounded_rand_uint32(byte[8],uint32,uint32,uint16)uint32[]'] | LibPcg32ExposerTsArgs['tuple']['bounded_rand_uint32(byte[8],uint32,uint32,uint16)uint32[]']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(LibPcg32ExposerTsParamsFactory.boundedRandUint32(params))
    },

    /**
     * Makes a call to the LibPcg32ExposerTs smart contract using the `bounded_rand_uint16(byte[8],uint16,uint16,uint16)uint16[]` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    boundedRandUint16: (params: CallParams<LibPcg32ExposerTsArgs['obj']['bounded_rand_uint16(byte[8],uint16,uint16,uint16)uint16[]'] | LibPcg32ExposerTsArgs['tuple']['bounded_rand_uint16(byte[8],uint16,uint16,uint16)uint16[]']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(LibPcg32ExposerTsParamsFactory.boundedRandUint16(params))
    },

    /**
     * Makes a call to the LibPcg32ExposerTs smart contract using the `bounded_rand_uint8(byte[8],uint8,uint8,uint16)uint8[]` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    boundedRandUint8: (params: CallParams<LibPcg32ExposerTsArgs['obj']['bounded_rand_uint8(byte[8],uint8,uint8,uint16)uint8[]'] | LibPcg32ExposerTsArgs['tuple']['bounded_rand_uint8(byte[8],uint8,uint8,uint16)uint8[]']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(LibPcg32ExposerTsParamsFactory.boundedRandUint8(params))
    },

    /**
     * Makes a call to the LibPcg32ExposerTs smart contract using the `update()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    update: (params: CallParams<LibPcg32ExposerTsArgs['obj']['update()void'] | LibPcg32ExposerTsArgs['tuple']['update()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(LibPcg32ExposerTsParamsFactory.update(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Makes a clear_state call to an existing instance of the LibPcg32ExposerTs smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the LibPcg32ExposerTs smart contract using the `bounded_rand_uint32(byte[8],uint32,uint32,uint16)uint32[]` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    boundedRandUint32: (params: CallParams<LibPcg32ExposerTsArgs['obj']['bounded_rand_uint32(byte[8],uint32,uint32,uint16)uint32[]'] | LibPcg32ExposerTsArgs['tuple']['bounded_rand_uint32(byte[8],uint32,uint32,uint16)uint32[]']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(LibPcg32ExposerTsParamsFactory.boundedRandUint32(params))
    },

    /**
     * Makes a call to the LibPcg32ExposerTs smart contract using the `bounded_rand_uint16(byte[8],uint16,uint16,uint16)uint16[]` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    boundedRandUint16: (params: CallParams<LibPcg32ExposerTsArgs['obj']['bounded_rand_uint16(byte[8],uint16,uint16,uint16)uint16[]'] | LibPcg32ExposerTsArgs['tuple']['bounded_rand_uint16(byte[8],uint16,uint16,uint16)uint16[]']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(LibPcg32ExposerTsParamsFactory.boundedRandUint16(params))
    },

    /**
     * Makes a call to the LibPcg32ExposerTs smart contract using the `bounded_rand_uint8(byte[8],uint8,uint8,uint16)uint8[]` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    boundedRandUint8: (params: CallParams<LibPcg32ExposerTsArgs['obj']['bounded_rand_uint8(byte[8],uint8,uint8,uint16)uint8[]'] | LibPcg32ExposerTsArgs['tuple']['bounded_rand_uint8(byte[8],uint8,uint8,uint16)uint8[]']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(LibPcg32ExposerTsParamsFactory.boundedRandUint8(params))
    },

    /**
     * Makes a call to the LibPcg32ExposerTs smart contract using the `update()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    update: (params: CallParams<LibPcg32ExposerTsArgs['obj']['update()void'] | LibPcg32ExposerTsArgs['tuple']['update()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(LibPcg32ExposerTsParamsFactory.update(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Makes a clear_state call to an existing instance of the LibPcg32ExposerTs smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the LibPcg32ExposerTs smart contract using the `bounded_rand_uint32(byte[8],uint32,uint32,uint16)uint32[]` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    boundedRandUint32: async (params: CallParams<LibPcg32ExposerTsArgs['obj']['bounded_rand_uint32(byte[8],uint32,uint32,uint16)uint32[]'] | LibPcg32ExposerTsArgs['tuple']['bounded_rand_uint32(byte[8],uint32,uint32,uint16)uint32[]']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(LibPcg32ExposerTsParamsFactory.boundedRandUint32(params))
      return {...result, return: result.return as unknown as (undefined | LibPcg32ExposerTsReturns['bounded_rand_uint32(byte[8],uint32,uint32,uint16)uint32[]'])}
    },

    /**
     * Makes a call to the LibPcg32ExposerTs smart contract using the `bounded_rand_uint16(byte[8],uint16,uint16,uint16)uint16[]` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    boundedRandUint16: async (params: CallParams<LibPcg32ExposerTsArgs['obj']['bounded_rand_uint16(byte[8],uint16,uint16,uint16)uint16[]'] | LibPcg32ExposerTsArgs['tuple']['bounded_rand_uint16(byte[8],uint16,uint16,uint16)uint16[]']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(LibPcg32ExposerTsParamsFactory.boundedRandUint16(params))
      return {...result, return: result.return as unknown as (undefined | LibPcg32ExposerTsReturns['bounded_rand_uint16(byte[8],uint16,uint16,uint16)uint16[]'])}
    },

    /**
     * Makes a call to the LibPcg32ExposerTs smart contract using the `bounded_rand_uint8(byte[8],uint8,uint8,uint16)uint8[]` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    boundedRandUint8: async (params: CallParams<LibPcg32ExposerTsArgs['obj']['bounded_rand_uint8(byte[8],uint8,uint8,uint16)uint8[]'] | LibPcg32ExposerTsArgs['tuple']['bounded_rand_uint8(byte[8],uint8,uint8,uint16)uint8[]']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(LibPcg32ExposerTsParamsFactory.boundedRandUint8(params))
      return {...result, return: result.return as unknown as (undefined | LibPcg32ExposerTsReturns['bounded_rand_uint8(byte[8],uint8,uint8,uint16)uint8[]'])}
    },

    /**
     * Makes a call to the LibPcg32ExposerTs smart contract using the `update()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    update: async (params: CallParams<LibPcg32ExposerTsArgs['obj']['update()void'] | LibPcg32ExposerTsArgs['tuple']['update()void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(LibPcg32ExposerTsParamsFactory.update(params))
      return {...result, return: result.return as unknown as (undefined | LibPcg32ExposerTsReturns['update()void'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new LibPcg32ExposerTsClient(this.appClient.clone(params))
  }

  /**
   * Methods to access state for the current LibPcg32ExposerTs app
   */
  state = {
  }

  public newGroup(): LibPcg32ExposerTsComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a bounded_rand_uint32(byte[8],uint32,uint32,uint16)uint32[] method call against the LibPcg32ExposerTs contract
       */
      boundedRandUint32(params: CallParams<LibPcg32ExposerTsArgs['obj']['bounded_rand_uint32(byte[8],uint32,uint32,uint16)uint32[]'] | LibPcg32ExposerTsArgs['tuple']['bounded_rand_uint32(byte[8],uint32,uint32,uint16)uint32[]']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.boundedRandUint32(params)))
        resultMappers.push((v) => client.decodeReturnValue('bounded_rand_uint32(byte[8],uint32,uint32,uint16)uint32[]', v))
        return this
      },
      /**
       * Add a bounded_rand_uint16(byte[8],uint16,uint16,uint16)uint16[] method call against the LibPcg32ExposerTs contract
       */
      boundedRandUint16(params: CallParams<LibPcg32ExposerTsArgs['obj']['bounded_rand_uint16(byte[8],uint16,uint16,uint16)uint16[]'] | LibPcg32ExposerTsArgs['tuple']['bounded_rand_uint16(byte[8],uint16,uint16,uint16)uint16[]']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.boundedRandUint16(params)))
        resultMappers.push((v) => client.decodeReturnValue('bounded_rand_uint16(byte[8],uint16,uint16,uint16)uint16[]', v))
        return this
      },
      /**
       * Add a bounded_rand_uint8(byte[8],uint8,uint8,uint16)uint8[] method call against the LibPcg32ExposerTs contract
       */
      boundedRandUint8(params: CallParams<LibPcg32ExposerTsArgs['obj']['bounded_rand_uint8(byte[8],uint8,uint8,uint16)uint8[]'] | LibPcg32ExposerTsArgs['tuple']['bounded_rand_uint8(byte[8],uint8,uint8,uint16)uint8[]']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.boundedRandUint8(params)))
        resultMappers.push((v) => client.decodeReturnValue('bounded_rand_uint8(byte[8],uint8,uint8,uint16)uint8[]', v))
        return this
      },
      /**
       * Add a update()void method call against the LibPcg32ExposerTs contract
       */
      update(params: CallParams<LibPcg32ExposerTsArgs['obj']['update()void'] | LibPcg32ExposerTsArgs['tuple']['update()void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.update(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a clear state call to the LibPcg32ExposerTs contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as LibPcg32ExposerTsComposer
  }
}
export type LibPcg32ExposerTsComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the bounded_rand_uint32(byte[8],uint32,uint32,uint16)uint32[] ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  boundedRandUint32(params?: CallParams<LibPcg32ExposerTsArgs['obj']['bounded_rand_uint32(byte[8],uint32,uint32,uint16)uint32[]'] | LibPcg32ExposerTsArgs['tuple']['bounded_rand_uint32(byte[8],uint32,uint32,uint16)uint32[]']>): LibPcg32ExposerTsComposer<[...TReturns, LibPcg32ExposerTsReturns['bounded_rand_uint32(byte[8],uint32,uint32,uint16)uint32[]'] | undefined]>

  /**
   * Calls the bounded_rand_uint16(byte[8],uint16,uint16,uint16)uint16[] ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  boundedRandUint16(params?: CallParams<LibPcg32ExposerTsArgs['obj']['bounded_rand_uint16(byte[8],uint16,uint16,uint16)uint16[]'] | LibPcg32ExposerTsArgs['tuple']['bounded_rand_uint16(byte[8],uint16,uint16,uint16)uint16[]']>): LibPcg32ExposerTsComposer<[...TReturns, LibPcg32ExposerTsReturns['bounded_rand_uint16(byte[8],uint16,uint16,uint16)uint16[]'] | undefined]>

  /**
   * Calls the bounded_rand_uint8(byte[8],uint8,uint8,uint16)uint8[] ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  boundedRandUint8(params?: CallParams<LibPcg32ExposerTsArgs['obj']['bounded_rand_uint8(byte[8],uint8,uint8,uint16)uint8[]'] | LibPcg32ExposerTsArgs['tuple']['bounded_rand_uint8(byte[8],uint8,uint8,uint16)uint8[]']>): LibPcg32ExposerTsComposer<[...TReturns, LibPcg32ExposerTsReturns['bounded_rand_uint8(byte[8],uint8,uint8,uint16)uint8[]'] | undefined]>

  /**
   * Calls the update()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  update(params?: CallParams<LibPcg32ExposerTsArgs['obj']['update()void'] | LibPcg32ExposerTsArgs['tuple']['update()void']>): LibPcg32ExposerTsComposer<[...TReturns, LibPcg32ExposerTsReturns['update()void'] | undefined]>

  /**
   * Makes a clear_state call to an existing instance of the LibPcg32ExposerTs smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): LibPcg32ExposerTsComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): LibPcg32ExposerTsComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): TransactionComposer
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<LibPcg32ExposerTsComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<LibPcg32ExposerTsComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<LibPcg32ExposerTsComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<LibPcg32ExposerTsComposerResults<TReturns>>
}
export type LibPcg32ExposerTsComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

