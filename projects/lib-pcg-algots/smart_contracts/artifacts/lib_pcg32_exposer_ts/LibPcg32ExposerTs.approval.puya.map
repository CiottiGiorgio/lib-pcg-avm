{
  "version": 3,
  "sources": [
    "C:/Users/ciott/PycharmProjects/lib-pcg-avm/projects/lib-pcg-algots/lib_pcg/consts.algo.ts",
    "C:/Users/ciott/PycharmProjects/lib-pcg-avm/projects/lib-pcg-algots/lib_pcg/pcg32.algo.ts",
    "C:/Users/ciott/PycharmProjects/lib-pcg-avm/projects/lib-pcg-algots/smart_contracts/lib_pcg32_exposer_ts/contract.algo.ts"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AEIA;;;AAAA;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;;;AAAA;AAAA;AACE;;AAAA;AAAA;AAAA;;AAAA;AADF;;;AAAA;;;AAAA;;;AAAA;;;AACE;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAcA;;AAAA;AAAA;AAAA;;AAAA;AAfF;;;AAAA;;;AAAA;;;AAAA;;;AAeE;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAcA;;AAAA;AAAA;AAAA;;AAAA;AA7BF;;;AAAA;;;AAAA;;;AAAA;;;AA6BE;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAeA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AA5CF;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACE;;;AAMQ;;AAAQ;;;AAG8C;;AAAA;AAAoB;;AAAA;AAAe;;AAAA;AAAlE;;;AAAA;;AAE7B;ADkFJ;;;AACc;;AAAA;AAAW;AAAhB;AAAP;AAEmB;;AAAA;ADhGmB;;ACgG/B;;;AAAP;AAVF;;;AAC4B;AAApB;;AAAQ;;;AACK;;AAAA;AAAA;;AAEZ;;AAAA;;;AAAP;AAhFF;;;AACqB;;ADbe;;;;;;;;;;ACaf;AAAA;;AACA;;AAAA;AAAA;;AAEnB;AA6FF;;;AAMiB;AACc;;AAA8B;;AAA9B;;AAAA;;AAAA;;AAAA;;;AAAA;AAGT;AAAI;;AAAA;;AAAA;AAAxB;;;AACE;;AAAA;;;AAAyD;;AAAA;AAAA;;AAAI;;AAAJ;AAAJ;AAAA;AAA3B;;AAAA;AAAA;AAAd;AAAA;;;AAAZ;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAD0C;AAAJ;AAAJ;;;;;AAIpC;;AAAA;;AAAA;;AAAA;;AAAA;AA9FF;;;;;;;AASS;;AAAS;;;;AAAT;AAAP;AACS;;AAAA;AAAA;;;AAEF;;AAAY;AAAZ;AAAA;;;AAAiB;;AAAY;;AAAZ;AAAjB;;;AAAmC;;AAAY;;AAAZ;AAAnC;;;;;;;;AAAP;AACM;;AAA2B;;AAAhB;AAAX;AAAA;;AACsC;AAAtC;AAA+B;AAA/B;;AAIF;;AAAA;;;AAAA;;AAAA;;;AACkB;AAAX;;AAAe;;AAAA;;AAAA;AAAxB;;;AACwB;;AAAA;;;AAGgB;AAAX;;AAAA;;AAAA;AAA3B;;AAAA;AAAS;AAAT;;AAJkC;;AAAQ;AAAJ;AAAJ;;;;;;;AAOpC;;AAAA;;;AACS;;AAAa;AAAb;AAAP;AAC2B;AAAP;;AAAA;AAAb;;AAAA;AAAP;AACoB;;AAAa;AAAb;AAAb;;AAAA;AAAP;AAEA;;AAAA;;AAAgB;AAAhB;;;;;AAE2B;AAAP;;AAAA;AAAA;AAAqB;AAArB;AAAb;;AAAA;AAAP;AAEA;;AAAgB;AAAhB;;AAGuC;;AAAA;AAAA;;;AAAf;;;AAApB;AAAoB;AAApB;;AAEc;AAAX;;AAAe;;AAAA;;AAAA;AAAxB;;;AAGkC;;AAAA;;;AAAA;AAAA;;AAAA;;AAAA;AAE1B;;AAAA;AAAJ;;;AAGwB;;AAAA;;AAAA;AAAD;;AAAA;AAAR;AAAX;;AAAA;;AAAA;AAFF;;AAAA;AAAS;AAAT;;AAN8B;;AAAQ;AAAJ;AAAJ;;;;;;;;;;;;AAgBtC;;AAAA;;AAAA;;AAAA;;AAAA;AA5DF;;;AACU;;ADxB8B;;ACwB9B;;;AAAuC;;AAAA;;;AAA/C;AAPF;;;AAC2C;;AAAc;;AAAd;AAAA;;AAAA;AAA2B;;AAAlC;AAAf;;;AACb;;AAAoB;;AAAd;AACL;AAAA;AAA4D;AAAA;;;AAAoB;;AAApB;AAAnB;;AAAA;AAAA;AAAf;;;AAA1B;AAAP;AAdF;;;AACS;;AAAS;;;;;;AAAT;AAAP;AANF;;;AAC6B;;AAAA;AAAQ;AAAhB;AAAA;;AACnB;ACWA;;;AAMQ;;AAAQ;;;AAG8C;;AAAA;AAAoB;;AAAA;AAAe;;AAAA;AAAlE;;;AAAA;;AAE7B;AD0EJ;;;AACS;;AAAA;;;AAAP;AAwBF;;;AAMiB;AACc;;AAA8B;;AAA9B;;AAAA;;AAAA;;AAAA;;;AAAA;AAGT;AAAI;;AAAA;;AAAA;AAAxB;;;AACE;;AAAA;;;AAAyD;;AAAA;AAAA;;AAAI;AAAJ;AAAJ;AAAA;AAA3B;;AAAA;AAAA;AAAd;AAAA;;;AAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAD0C;AAAJ;AAAJ;;;;;AAIpC;;AAAA;;AAAA;;AAAA;;AAAA;AC9GA;;;AAMQ;;AAAQ;;;AAG6C;;AAAA;AAAoB;;AAAA;AAAe;;AAAA;AAAjE;;;AAAA;;AAE7B;ADgEJ;;;AACS;;AAAA;;;AAAP;AAqCF;;;AAMiB;AACc;;AAA8B;AAA9B;;AAAA;;AAAA;;AAAA;;;AAAA;AAGT;AAAI;;AAAA;;AAAA;AAAxB;;;AACE;;AAAA;;;AAAsD;AAAA;;AAAA;AAAA;;AAAA;AAArB;;AAAA;AAA4B;AAA5B;AAAR;AAAb;AAAA;;;AAAZ;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAD0C;AAAJ;AAAJ;;;;;AAIpC;;AAAA;;AAAA;;AAAA;;AAAA;AChHA;;;AACa;;AAAkB;;AAAtB;AAAP;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "smart_contracts/lib_pcg32_exposer_ts/contract.algo.ts::LibPcg32ExposerTs.approvalProgram",
      "params": {},
      "block": "smart_contracts/lib_pcg32_exposer_ts/contract.algo.ts::LibPcg32ExposerTs.approvalProgram",
      "stack_in": [],
      "op": "intcblock 1 0 2 8 1442695040888963407"
    },
    "16": {
      "op": "bytecblock 0x151f7c75 0x0000"
    },
    "26": {
      "callsub": "smart_contracts/lib_pcg32_exposer_ts/contract.algo.ts::LibPcg32ExposerTs.__puya_arc4_router__",
      "op": "callsub __puya_arc4_router__",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "29": {
      "op": "return",
      "stack_out": []
    },
    "30": {
      "subroutine": "smart_contracts/lib_pcg32_exposer_ts/contract.algo.ts::LibPcg32ExposerTs.__puya_arc4_router__",
      "params": {},
      "block": "__puya_arc4_router__",
      "stack_in": [],
      "op": "proto 0 1"
    },
    "33": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "35": {
      "op": "bz __puya_arc4_router___bare_routing@8",
      "stack_out": []
    },
    "38": {
      "op": "pushbytess 0xed06f70a 0x8d7cce79 0xd0a35e1e 0xa0e81872 // method \"bounded_rand_uint32(byte[8],uint32,uint32,uint16)uint32[]\", method \"bounded_rand_uint16(byte[8],uint16,uint16,uint16)uint16[]\", method \"bounded_rand_uint8(byte[8],uint8,uint8,uint16)uint8[]\", method \"update()void\""
    },
    "60": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(bounded_rand_uint16(byte[8],uint16,uint16,uint16)uint16[])",
        "Method(bounded_rand_uint32(byte[8],uint32,uint32,uint16)uint32[])",
        "Method(bounded_rand_uint8(byte[8],uint8,uint8,uint16)uint8[])",
        "Method(update()void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "Method(bounded_rand_uint32(byte[8],uint32,uint32,uint16)uint32[])",
        "Method(bounded_rand_uint16(byte[8],uint16,uint16,uint16)uint16[])",
        "Method(bounded_rand_uint8(byte[8],uint8,uint8,uint16)uint8[])",
        "Method(update()void)",
        "tmp%2#0"
      ]
    },
    "63": {
      "op": "match __puya_arc4_router___bounded_rand_uint32_route@2 __puya_arc4_router___bounded_rand_uint16_route@3 __puya_arc4_router___bounded_rand_uint8_route@4 __puya_arc4_router___update_route@5",
      "stack_out": []
    },
    "73": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "74": {
      "retsub": true,
      "op": "retsub"
    },
    "75": {
      "block": "__puya_arc4_router___bounded_rand_uint32_route@2",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "77": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "78": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "79": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "81": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "82": {
      "op": "txna ApplicationArgs 1"
    },
    "85": {
      "op": "txna ApplicationArgs 2"
    },
    "88": {
      "op": "txna ApplicationArgs 3"
    },
    "91": {
      "op": "txna ApplicationArgs 4",
      "defined_out": [
        "tmp%10#0",
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0",
        "tmp%10#0"
      ]
    },
    "94": {
      "callsub": "smart_contracts/lib_pcg32_exposer_ts/contract.algo.ts::LibPcg32ExposerTs.bounded_rand_uint32",
      "op": "callsub bounded_rand_uint32",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "97": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0",
        "0x151f7c75"
      ]
    },
    "98": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%11#0"
      ]
    },
    "99": {
      "op": "concat",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "100": {
      "op": "log",
      "stack_out": []
    },
    "101": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "102": {
      "retsub": true,
      "op": "retsub"
    },
    "103": {
      "block": "__puya_arc4_router___bounded_rand_uint16_route@3",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "105": {
      "op": "!",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "106": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "107": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "109": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "110": {
      "op": "txna ApplicationArgs 1"
    },
    "113": {
      "op": "txna ApplicationArgs 2"
    },
    "116": {
      "op": "txna ApplicationArgs 3"
    },
    "119": {
      "op": "txna ApplicationArgs 4",
      "defined_out": [
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0",
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0",
        "tmp%20#0"
      ]
    },
    "122": {
      "callsub": "smart_contracts/lib_pcg32_exposer_ts/contract.algo.ts::LibPcg32ExposerTs.bounded_rand_uint16",
      "op": "callsub bounded_rand_uint16",
      "defined_out": [
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0"
      ]
    },
    "125": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0",
        "0x151f7c75"
      ]
    },
    "126": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%21#0"
      ]
    },
    "127": {
      "op": "concat",
      "defined_out": [
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0"
      ]
    },
    "128": {
      "op": "log",
      "stack_out": []
    },
    "129": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "130": {
      "retsub": true,
      "op": "retsub"
    },
    "131": {
      "block": "__puya_arc4_router___bounded_rand_uint8_route@4",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%23#0"
      ]
    },
    "133": {
      "op": "!",
      "defined_out": [
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%24#0"
      ]
    },
    "134": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "135": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%25#0"
      ]
    },
    "137": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "138": {
      "op": "txna ApplicationArgs 1"
    },
    "141": {
      "op": "txna ApplicationArgs 2"
    },
    "144": {
      "op": "txna ApplicationArgs 3"
    },
    "147": {
      "op": "txna ApplicationArgs 4",
      "defined_out": [
        "tmp%27#0",
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0"
      ],
      "stack_out": [
        "tmp%27#0",
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0"
      ]
    },
    "150": {
      "callsub": "smart_contracts/lib_pcg32_exposer_ts/contract.algo.ts::LibPcg32ExposerTs.bounded_rand_uint8",
      "op": "callsub bounded_rand_uint8",
      "defined_out": [
        "tmp%31#0"
      ],
      "stack_out": [
        "tmp%31#0"
      ]
    },
    "153": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%31#0"
      ],
      "stack_out": [
        "tmp%31#0",
        "0x151f7c75"
      ]
    },
    "154": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%31#0"
      ]
    },
    "155": {
      "op": "concat",
      "defined_out": [
        "tmp%32#0"
      ],
      "stack_out": [
        "tmp%32#0"
      ]
    },
    "156": {
      "op": "log",
      "stack_out": []
    },
    "157": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "158": {
      "retsub": true,
      "op": "retsub"
    },
    "159": {
      "block": "__puya_arc4_router___update_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%33#0"
      ],
      "stack_out": [
        "tmp%33#0"
      ]
    },
    "161": {
      "op": "!",
      "defined_out": [
        "tmp%34#0"
      ],
      "stack_out": [
        "tmp%34#0"
      ]
    },
    "162": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "163": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%35#0"
      ],
      "stack_out": [
        "tmp%35#0"
      ]
    },
    "165": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "166": {
      "callsub": "smart_contracts/lib_pcg32_exposer_ts/contract.algo.ts::LibPcg32ExposerTs.update",
      "op": "callsub update"
    },
    "169": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "170": {
      "retsub": true,
      "op": "retsub"
    },
    "171": {
      "block": "__puya_arc4_router___bare_routing@8",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%37#0"
      ],
      "stack_out": [
        "tmp%37#0"
      ]
    },
    "173": {
      "op": "bnz __puya_arc4_router___after_if_else@12",
      "stack_out": []
    },
    "176": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%38#0"
      ],
      "stack_out": [
        "tmp%38#0"
      ]
    },
    "178": {
      "op": "!",
      "defined_out": [
        "tmp%39#0"
      ],
      "stack_out": [
        "tmp%39#0"
      ]
    },
    "179": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "180": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "181": {
      "retsub": true,
      "op": "retsub"
    },
    "182": {
      "block": "__puya_arc4_router___after_if_else@12",
      "stack_in": [],
      "op": "intc_1 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "183": {
      "retsub": true,
      "op": "retsub"
    },
    "184": {
      "subroutine": "smart_contracts/lib_pcg32_exposer_ts/contract.algo.ts::LibPcg32ExposerTs.bounded_rand_uint32",
      "params": {
        "seed#0": "bytes",
        "lower_bound#0": "bytes",
        "upper_bound#0": "bytes",
        "length#0": "bytes"
      },
      "block": "bounded_rand_uint32",
      "stack_in": [],
      "op": "proto 4 1"
    },
    "187": {
      "op": "frame_dig -4",
      "defined_out": [
        "seed#0 (copy)"
      ],
      "stack_out": [
        "seed#0 (copy)"
      ]
    },
    "189": {
      "callsub": "lib_pcg/pcg32.algo.ts::pcg32Init",
      "op": "callsub pcg32Init",
      "defined_out": [
        "state#0"
      ],
      "stack_out": [
        "state#0"
      ]
    },
    "192": {
      "op": "frame_dig -3",
      "defined_out": [
        "lower_bound#0 (copy)",
        "state#0"
      ],
      "stack_out": [
        "state#0",
        "lower_bound#0 (copy)"
      ]
    },
    "194": {
      "op": "btoi",
      "defined_out": [
        "state#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "state#0",
        "tmp%0#0"
      ]
    },
    "195": {
      "op": "frame_dig -2",
      "defined_out": [
        "state#0",
        "tmp%0#0",
        "upper_bound#0 (copy)"
      ],
      "stack_out": [
        "state#0",
        "tmp%0#0",
        "upper_bound#0 (copy)"
      ]
    },
    "197": {
      "op": "btoi",
      "defined_out": [
        "state#0",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "state#0",
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "198": {
      "op": "frame_dig -1",
      "defined_out": [
        "length#0 (copy)",
        "state#0",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "state#0",
        "tmp%0#0",
        "tmp%1#0",
        "length#0 (copy)"
      ]
    },
    "200": {
      "op": "btoi",
      "defined_out": [
        "state#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "state#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0"
      ]
    },
    "201": {
      "callsub": "lib_pcg/pcg32.algo.ts::pcg32Random",
      "op": "callsub pcg32Random",
      "defined_out": [
        "newState#0",
        "sequence#0"
      ],
      "stack_out": [
        "newState#0",
        "sequence#0"
      ]
    },
    "204": {
      "op": "bury 1",
      "stack_out": [
        "sequence#0"
      ]
    },
    "206": {
      "retsub": true,
      "op": "retsub"
    },
    "207": {
      "subroutine": "lib_pcg/pcg32.algo.ts::pcg32Init",
      "params": {
        "seed#0": "bytes"
      },
      "block": "pcg32Init",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "210": {
      "op": "frame_dig -1",
      "defined_out": [
        "seed#0 (copy)"
      ],
      "stack_out": [
        "seed#0 (copy)"
      ]
    },
    "212": {
      "op": "len",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "213": {
      "op": "intc_3 // 8",
      "defined_out": [
        "8",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "8"
      ]
    },
    "214": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "215": {
      "op": "assert",
      "stack_out": []
    },
    "216": {
      "op": "frame_dig -1",
      "stack_out": [
        "seed#0 (copy)"
      ]
    },
    "218": {
      "op": "btoi",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "219": {
      "op": "intc 4 // 1442695040888963407",
      "defined_out": [
        "1442695040888963407",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "1442695040888963407"
      ]
    },
    "221": {
      "callsub": "lib_pcg/pcg32.algo.ts::__pcg32Init",
      "op": "callsub __pcg32Init",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "224": {
      "retsub": true,
      "op": "retsub"
    },
    "225": {
      "subroutine": "lib_pcg/pcg32.algo.ts::__pcg32Init",
      "params": {
        "initialState#0": "uint64",
        "incr#0": "uint64"
      },
      "block": "__pcg32Init",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "228": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "229": {
      "op": "frame_dig -1",
      "defined_out": [
        "0",
        "incr#0 (copy)"
      ],
      "stack_out": [
        "0",
        "incr#0 (copy)"
      ]
    },
    "231": {
      "callsub": "lib_pcg/pcg32.algo.ts::__pcg32Step",
      "op": "callsub __pcg32Step",
      "defined_out": [
        "state#0"
      ],
      "stack_out": [
        "state#0"
      ]
    },
    "234": {
      "op": "frame_dig -2",
      "defined_out": [
        "initialState#0 (copy)",
        "state#0"
      ],
      "stack_out": [
        "state#0",
        "initialState#0 (copy)"
      ]
    },
    "236": {
      "op": "addw",
      "defined_out": [
        "_#0",
        "addLow#0"
      ],
      "stack_out": [
        "_#0",
        "addLow#0"
      ]
    },
    "237": {
      "op": "bury 1",
      "stack_out": [
        "addLow#0"
      ]
    },
    "239": {
      "op": "frame_dig -1",
      "stack_out": [
        "addLow#0",
        "incr#0 (copy)"
      ]
    },
    "241": {
      "callsub": "lib_pcg/pcg32.algo.ts::__pcg32Step",
      "op": "callsub __pcg32Step",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "244": {
      "retsub": true,
      "op": "retsub"
    },
    "245": {
      "subroutine": "lib_pcg/pcg32.algo.ts::__pcg32Step",
      "params": {
        "state#0": "uint64",
        "incr#0": "uint64"
      },
      "block": "__pcg32Step",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "248": {
      "op": "frame_dig -2",
      "defined_out": [
        "state#0 (copy)"
      ],
      "stack_out": [
        "state#0 (copy)"
      ]
    },
    "250": {
      "op": "pushint 6364136223846793005 // 6364136223846793005",
      "defined_out": [
        "6364136223846793005",
        "state#0 (copy)"
      ],
      "stack_out": [
        "state#0 (copy)",
        "6364136223846793005"
      ]
    },
    "260": {
      "op": "mulw",
      "defined_out": [
        "_#0",
        "mulLow#0"
      ],
      "stack_out": [
        "_#0",
        "mulLow#0"
      ]
    },
    "261": {
      "op": "bury 1",
      "stack_out": [
        "mulLow#0"
      ]
    },
    "263": {
      "op": "frame_dig -1",
      "defined_out": [
        "incr#0 (copy)",
        "mulLow#0"
      ],
      "stack_out": [
        "mulLow#0",
        "incr#0 (copy)"
      ]
    },
    "265": {
      "op": "addw",
      "defined_out": [
        "_\u2081#0",
        "addLow#0"
      ],
      "stack_out": [
        "_\u2081#0",
        "addLow#0"
      ]
    },
    "266": {
      "op": "bury 1",
      "stack_out": [
        "addLow#0"
      ]
    },
    "268": {
      "retsub": true,
      "op": "retsub"
    },
    "269": {
      "subroutine": "lib_pcg/pcg32.algo.ts::pcg32Random",
      "params": {
        "state#0": "uint64",
        "lowerBound#0": "uint64",
        "upperBound#0": "uint64",
        "length#0": "uint64"
      },
      "block": "pcg32Random",
      "stack_in": [],
      "op": "proto 4 2"
    },
    "272": {
      "op": "bytec_1 // 0x0000"
    },
    "273": {
      "op": "frame_dig -4"
    },
    "275": {
      "op": "pushint 32 // 32"
    },
    "277": {
      "op": "frame_dig -3"
    },
    "279": {
      "op": "frame_dig -2"
    },
    "281": {
      "op": "frame_dig -1",
      "defined_out": [
        "32",
        "length#0 (copy)",
        "lowerBound#0 (copy)",
        "result#0",
        "state#0 (copy)",
        "upperBound#0 (copy)"
      ],
      "stack_out": [
        "result#0",
        "state#0 (copy)",
        "32",
        "lowerBound#0 (copy)",
        "upperBound#0 (copy)",
        "length#0 (copy)"
      ]
    },
    "283": {
      "callsub": "lib_pcg/pcg32.algo.ts::__pcg32BoundedSequence",
      "op": "callsub __pcg32BoundedSequence",
      "defined_out": [
        "newState#0",
        "result#0",
        "sequence#0"
      ],
      "stack_out": [
        "result#0",
        "newState#0",
        "sequence#0"
      ]
    },
    "286": {
      "op": "swap",
      "defined_out": [
        "newState#0",
        "result#0",
        "sequence#0"
      ],
      "stack_out": [
        "result#0",
        "sequence#0",
        "newState#0"
      ]
    },
    "287": {
      "op": "intc_1 // 0",
      "defined_out": [
        "i#0",
        "newState#0",
        "result#0",
        "sequence#0"
      ],
      "stack_out": [
        "result#0",
        "sequence#0",
        "newState#0",
        "i#0"
      ]
    },
    "288": {
      "block": "pcg32Random_while_top@1",
      "stack_in": [
        "result#0",
        "sequence#0",
        "newState#0",
        "i#0"
      ],
      "op": "frame_dig 3",
      "defined_out": [
        "i#0"
      ],
      "stack_out": [
        "result#0",
        "sequence#0",
        "newState#0",
        "i#0",
        "i#0"
      ]
    },
    "290": {
      "op": "frame_dig -1",
      "defined_out": [
        "i#0",
        "length#0 (copy)"
      ],
      "stack_out": [
        "result#0",
        "sequence#0",
        "newState#0",
        "i#0",
        "i#0",
        "length#0 (copy)"
      ]
    },
    "292": {
      "op": "<",
      "defined_out": [
        "i#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "result#0",
        "sequence#0",
        "newState#0",
        "i#0",
        "tmp%0#0"
      ]
    },
    "293": {
      "op": "bz pcg32Random_after_while@4",
      "stack_out": [
        "result#0",
        "sequence#0",
        "newState#0",
        "i#0"
      ]
    },
    "296": {
      "op": "frame_dig 0",
      "defined_out": [
        "i#0",
        "result#0"
      ],
      "stack_out": [
        "result#0",
        "sequence#0",
        "newState#0",
        "i#0",
        "result#0"
      ]
    },
    "298": {
      "op": "extract 2 0",
      "defined_out": [
        "expr_value_trimmed%0#0",
        "i#0",
        "result#0"
      ],
      "stack_out": [
        "result#0",
        "sequence#0",
        "newState#0",
        "i#0",
        "expr_value_trimmed%0#0"
      ]
    },
    "301": {
      "op": "frame_dig 3",
      "stack_out": [
        "result#0",
        "sequence#0",
        "newState#0",
        "i#0",
        "expr_value_trimmed%0#0",
        "i#0"
      ]
    },
    "303": {
      "op": "dup",
      "defined_out": [
        "expr_value_trimmed%0#0",
        "i#0",
        "i#0 (copy)",
        "result#0"
      ],
      "stack_out": [
        "result#0",
        "sequence#0",
        "newState#0",
        "i#0",
        "expr_value_trimmed%0#0",
        "i#0 (copy)",
        "i#0 (copy)"
      ]
    },
    "304": {
      "op": "cover 2",
      "stack_out": [
        "result#0",
        "sequence#0",
        "newState#0",
        "i#0",
        "i#0",
        "expr_value_trimmed%0#0",
        "i#0 (copy)"
      ]
    },
    "306": {
      "op": "pushint 4 // 4",
      "defined_out": [
        "4",
        "expr_value_trimmed%0#0",
        "i#0",
        "i#0 (copy)",
        "result#0"
      ],
      "stack_out": [
        "result#0",
        "sequence#0",
        "newState#0",
        "i#0",
        "i#0",
        "expr_value_trimmed%0#0",
        "i#0 (copy)",
        "4"
      ]
    },
    "308": {
      "op": "*",
      "defined_out": [
        "expr_value_trimmed%0#0",
        "i#0",
        "result#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "result#0",
        "sequence#0",
        "newState#0",
        "i#0",
        "i#0",
        "expr_value_trimmed%0#0",
        "tmp%1#0"
      ]
    },
    "309": {
      "op": "intc_2 // 2",
      "defined_out": [
        "2",
        "expr_value_trimmed%0#0",
        "i#0",
        "result#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "result#0",
        "sequence#0",
        "newState#0",
        "i#0",
        "i#0",
        "expr_value_trimmed%0#0",
        "tmp%1#0",
        "2"
      ]
    },
    "310": {
      "op": "+",
      "defined_out": [
        "expr_value_trimmed%0#0",
        "i#0",
        "result#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "result#0",
        "sequence#0",
        "newState#0",
        "i#0",
        "i#0",
        "expr_value_trimmed%0#0",
        "tmp%2#0"
      ]
    },
    "311": {
      "op": "frame_dig 1",
      "defined_out": [
        "expr_value_trimmed%0#0",
        "i#0",
        "result#0",
        "sequence#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "result#0",
        "sequence#0",
        "newState#0",
        "i#0",
        "i#0",
        "expr_value_trimmed%0#0",
        "tmp%2#0",
        "sequence#0"
      ]
    },
    "313": {
      "op": "swap",
      "stack_out": [
        "result#0",
        "sequence#0",
        "newState#0",
        "i#0",
        "i#0",
        "expr_value_trimmed%0#0",
        "sequence#0",
        "tmp%2#0"
      ]
    },
    "314": {
      "op": "extract_uint32",
      "defined_out": [
        "expr_value_trimmed%0#0",
        "i#0",
        "result#0",
        "sequence#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "result#0",
        "sequence#0",
        "newState#0",
        "i#0",
        "i#0",
        "expr_value_trimmed%0#0",
        "to_encode%0#0"
      ]
    },
    "315": {
      "op": "itob",
      "defined_out": [
        "expr_value_trimmed%0#0",
        "i#0",
        "result#0",
        "sequence#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "result#0",
        "sequence#0",
        "newState#0",
        "i#0",
        "i#0",
        "expr_value_trimmed%0#0",
        "val_as_bytes%0#0"
      ]
    },
    "316": {
      "op": "extract 4 4",
      "defined_out": [
        "expr_value_trimmed%0#0",
        "i#0",
        "result#0",
        "sequence#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "result#0",
        "sequence#0",
        "newState#0",
        "i#0",
        "i#0",
        "expr_value_trimmed%0#0",
        "tmp%3#0"
      ]
    },
    "319": {
      "op": "concat",
      "defined_out": [
        "concatenated%0#0",
        "i#0",
        "result#0",
        "sequence#0"
      ],
      "stack_out": [
        "result#0",
        "sequence#0",
        "newState#0",
        "i#0",
        "i#0",
        "concatenated%0#0"
      ]
    },
    "320": {
      "op": "dup",
      "defined_out": [
        "concatenated%0#0",
        "concatenated%0#0 (copy)",
        "i#0",
        "result#0",
        "sequence#0"
      ],
      "stack_out": [
        "result#0",
        "sequence#0",
        "newState#0",
        "i#0",
        "i#0",
        "concatenated%0#0",
        "concatenated%0#0 (copy)"
      ]
    },
    "321": {
      "op": "len",
      "defined_out": [
        "byte_len%0#0",
        "concatenated%0#0",
        "i#0",
        "result#0",
        "sequence#0"
      ],
      "stack_out": [
        "result#0",
        "sequence#0",
        "newState#0",
        "i#0",
        "i#0",
        "concatenated%0#0",
        "byte_len%0#0"
      ]
    },
    "322": {
      "op": "pushint 4 // 4",
      "stack_out": [
        "result#0",
        "sequence#0",
        "newState#0",
        "i#0",
        "i#0",
        "concatenated%0#0",
        "byte_len%0#0",
        "4"
      ]
    },
    "324": {
      "op": "/",
      "defined_out": [
        "concatenated%0#0",
        "i#0",
        "len_%0#0",
        "result#0",
        "sequence#0"
      ],
      "stack_out": [
        "result#0",
        "sequence#0",
        "newState#0",
        "i#0",
        "i#0",
        "concatenated%0#0",
        "len_%0#0"
      ]
    },
    "325": {
      "op": "itob",
      "defined_out": [
        "as_bytes%0#0",
        "concatenated%0#0",
        "i#0",
        "result#0",
        "sequence#0"
      ],
      "stack_out": [
        "result#0",
        "sequence#0",
        "newState#0",
        "i#0",
        "i#0",
        "concatenated%0#0",
        "as_bytes%0#0"
      ]
    },
    "326": {
      "op": "extract 6 2",
      "defined_out": [
        "concatenated%0#0",
        "i#0",
        "len_16_bit%0#0",
        "result#0",
        "sequence#0"
      ],
      "stack_out": [
        "result#0",
        "sequence#0",
        "newState#0",
        "i#0",
        "i#0",
        "concatenated%0#0",
        "len_16_bit%0#0"
      ]
    },
    "329": {
      "op": "swap",
      "stack_out": [
        "result#0",
        "sequence#0",
        "newState#0",
        "i#0",
        "i#0",
        "len_16_bit%0#0",
        "concatenated%0#0"
      ]
    },
    "330": {
      "op": "concat",
      "stack_out": [
        "result#0",
        "sequence#0",
        "newState#0",
        "i#0",
        "i#0",
        "result#0"
      ]
    },
    "331": {
      "op": "frame_bury 0",
      "defined_out": [
        "i#0",
        "result#0",
        "sequence#0"
      ],
      "stack_out": [
        "result#0",
        "sequence#0",
        "newState#0",
        "i#0",
        "i#0"
      ]
    },
    "333": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "i#0",
        "result#0",
        "sequence#0"
      ],
      "stack_out": [
        "result#0",
        "sequence#0",
        "newState#0",
        "i#0",
        "i#0",
        "1"
      ]
    },
    "334": {
      "op": "+",
      "stack_out": [
        "result#0",
        "sequence#0",
        "newState#0",
        "i#0",
        "i#0"
      ]
    },
    "335": {
      "op": "frame_bury 3",
      "defined_out": [
        "i#0",
        "result#0",
        "sequence#0"
      ],
      "stack_out": [
        "result#0",
        "sequence#0",
        "newState#0",
        "i#0"
      ]
    },
    "337": {
      "op": "b pcg32Random_while_top@1"
    },
    "340": {
      "block": "pcg32Random_after_while@4",
      "stack_in": [
        "result#0",
        "sequence#0",
        "newState#0",
        "i#0"
      ],
      "op": "frame_dig 2",
      "defined_out": [
        "newState#0"
      ],
      "stack_out": [
        "result#0",
        "sequence#0",
        "newState#0",
        "i#0",
        "newState#0"
      ]
    },
    "342": {
      "op": "frame_dig 0",
      "defined_out": [
        "newState#0",
        "result#0"
      ],
      "stack_out": [
        "result#0",
        "sequence#0",
        "newState#0",
        "i#0",
        "newState#0",
        "result#0"
      ]
    },
    "344": {
      "op": "frame_bury 1"
    },
    "346": {
      "op": "frame_bury 0"
    },
    "348": {
      "retsub": true,
      "op": "retsub"
    },
    "349": {
      "subroutine": "lib_pcg/pcg32.algo.ts::__pcg32BoundedSequence",
      "params": {
        "state#0": "uint64",
        "bitSize#0": "uint64",
        "lowerBound#0": "uint64",
        "upperBound#0": "uint64",
        "length#0": "uint64"
      },
      "block": "__pcg32BoundedSequence",
      "stack_in": [],
      "op": "proto 5 2"
    },
    "352": {
      "op": "pushbytes \"\"",
      "stack_out": [
        "absoluteBound#0"
      ]
    },
    "354": {
      "op": "dupn 6",
      "stack_out": [
        "absoluteBound#0",
        "byteSize#0",
        "candidate#0",
        "i#0",
        "i\u2081#0",
        "threshold#0",
        "truncatedStartCached#0"
      ]
    },
    "356": {
      "op": "frame_dig -1",
      "defined_out": [
        "length#0 (copy)"
      ],
      "stack_out": [
        "absoluteBound#0",
        "byteSize#0",
        "candidate#0",
        "i#0",
        "i\u2081#0",
        "threshold#0",
        "truncatedStartCached#0",
        "length#0 (copy)"
      ]
    },
    "358": {
      "op": "pushint 65536 // 65536",
      "defined_out": [
        "65536",
        "length#0 (copy)"
      ],
      "stack_out": [
        "absoluteBound#0",
        "byteSize#0",
        "candidate#0",
        "i#0",
        "i\u2081#0",
        "threshold#0",
        "truncatedStartCached#0",
        "length#0 (copy)",
        "65536"
      ]
    },
    "362": {
      "op": "<",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "absoluteBound#0",
        "byteSize#0",
        "candidate#0",
        "i#0",
        "i\u2081#0",
        "threshold#0",
        "truncatedStartCached#0",
        "tmp%1#0"
      ]
    },
    "363": {
      "op": "assert",
      "stack_out": [
        "absoluteBound#0",
        "byteSize#0",
        "candidate#0",
        "i#0",
        "i\u2081#0",
        "threshold#0",
        "truncatedStartCached#0"
      ]
    },
    "364": {
      "op": "frame_dig -1",
      "stack_out": [
        "absoluteBound#0",
        "byteSize#0",
        "candidate#0",
        "i#0",
        "i\u2081#0",
        "threshold#0",
        "truncatedStartCached#0",
        "length#0 (copy)"
      ]
    },
    "366": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "absoluteBound#0",
        "byteSize#0",
        "candidate#0",
        "i#0",
        "i\u2081#0",
        "threshold#0",
        "truncatedStartCached#0",
        "val_as_bytes%0#0"
      ]
    },
    "367": {
      "op": "extract 6 2",
      "defined_out": [
        "result#1"
      ],
      "stack_out": [
        "absoluteBound#0",
        "byteSize#0",
        "candidate#0",
        "i#0",
        "i\u2081#0",
        "threshold#0",
        "truncatedStartCached#0",
        "result#1"
      ]
    },
    "370": {
      "op": "frame_dig -4",
      "defined_out": [
        "bitSize#0 (copy)",
        "result#1"
      ],
      "stack_out": [
        "absoluteBound#0",
        "byteSize#0",
        "candidate#0",
        "i#0",
        "i\u2081#0",
        "threshold#0",
        "truncatedStartCached#0",
        "result#1",
        "bitSize#0 (copy)"
      ]
    },
    "372": {
      "op": "intc_3 // 8",
      "defined_out": [
        "8",
        "bitSize#0 (copy)",
        "result#1"
      ],
      "stack_out": [
        "absoluteBound#0",
        "byteSize#0",
        "candidate#0",
        "i#0",
        "i\u2081#0",
        "threshold#0",
        "truncatedStartCached#0",
        "result#1",
        "bitSize#0 (copy)",
        "8"
      ]
    },
    "373": {
      "op": "==",
      "defined_out": [
        "result#1",
        "tmp%2#0"
      ],
      "stack_out": [
        "absoluteBound#0",
        "byteSize#0",
        "candidate#0",
        "i#0",
        "i\u2081#0",
        "threshold#0",
        "truncatedStartCached#0",
        "result#1",
        "tmp%2#0"
      ]
    },
    "374": {
      "op": "bnz __pcg32BoundedSequence_bool_true@3",
      "stack_out": [
        "absoluteBound#0",
        "byteSize#0",
        "candidate#0",
        "i#0",
        "i\u2081#0",
        "threshold#0",
        "truncatedStartCached#0",
        "result#1"
      ]
    },
    "377": {
      "op": "frame_dig -4",
      "stack_out": [
        "absoluteBound#0",
        "byteSize#0",
        "candidate#0",
        "i#0",
        "i\u2081#0",
        "threshold#0",
        "truncatedStartCached#0",
        "result#1",
        "bitSize#0 (copy)"
      ]
    },
    "379": {
      "op": "pushint 16 // 16",
      "defined_out": [
        "16",
        "bitSize#0 (copy)",
        "result#1"
      ],
      "stack_out": [
        "absoluteBound#0",
        "byteSize#0",
        "candidate#0",
        "i#0",
        "i\u2081#0",
        "threshold#0",
        "truncatedStartCached#0",
        "result#1",
        "bitSize#0 (copy)",
        "16"
      ]
    },
    "381": {
      "op": "==",
      "defined_out": [
        "result#1",
        "tmp%3#0"
      ],
      "stack_out": [
        "absoluteBound#0",
        "byteSize#0",
        "candidate#0",
        "i#0",
        "i\u2081#0",
        "threshold#0",
        "truncatedStartCached#0",
        "result#1",
        "tmp%3#0"
      ]
    },
    "382": {
      "op": "bnz __pcg32BoundedSequence_bool_true@3",
      "stack_out": [
        "absoluteBound#0",
        "byteSize#0",
        "candidate#0",
        "i#0",
        "i\u2081#0",
        "threshold#0",
        "truncatedStartCached#0",
        "result#1"
      ]
    },
    "385": {
      "op": "frame_dig -4",
      "stack_out": [
        "absoluteBound#0",
        "byteSize#0",
        "candidate#0",
        "i#0",
        "i\u2081#0",
        "threshold#0",
        "truncatedStartCached#0",
        "result#1",
        "bitSize#0 (copy)"
      ]
    },
    "387": {
      "op": "pushint 32 // 32",
      "defined_out": [
        "32",
        "bitSize#0 (copy)",
        "result#1"
      ],
      "stack_out": [
        "absoluteBound#0",
        "byteSize#0",
        "candidate#0",
        "i#0",
        "i\u2081#0",
        "threshold#0",
        "truncatedStartCached#0",
        "result#1",
        "bitSize#0 (copy)",
        "32"
      ]
    },
    "389": {
      "op": "==",
      "defined_out": [
        "result#1",
        "tmp%4#0"
      ],
      "stack_out": [
        "absoluteBound#0",
        "byteSize#0",
        "candidate#0",
        "i#0",
        "i\u2081#0",
        "threshold#0",
        "truncatedStartCached#0",
        "result#1",
        "tmp%4#0"
      ]
    },
    "390": {
      "op": "bz __pcg32BoundedSequence_bool_false@4",
      "stack_out": [
        "absoluteBound#0",
        "byteSize#0",
        "candidate#0",
        "i#0",
        "i\u2081#0",
        "threshold#0",
        "truncatedStartCached#0",
        "result#1"
      ]
    },
    "393": {
      "block": "__pcg32BoundedSequence_bool_true@3",
      "stack_in": [
        "absoluteBound#0",
        "byteSize#0",
        "candidate#0",
        "i#0",
        "i\u2081#0",
        "threshold#0",
        "truncatedStartCached#0",
        "result#1"
      ],
      "op": "intc_0 // 1",
      "defined_out": [
        "or_result%0#0"
      ],
      "stack_out": [
        "absoluteBound#0",
        "byteSize#0",
        "candidate#0",
        "i#0",
        "i\u2081#0",
        "threshold#0",
        "truncatedStartCached#0",
        "result#1",
        "or_result%0#0"
      ]
    },
    "394": {
      "op": "b __pcg32BoundedSequence_bool_merge@5"
    },
    "397": {
      "block": "__pcg32BoundedSequence_bool_false@4",
      "stack_in": [
        "absoluteBound#0",
        "byteSize#0",
        "candidate#0",
        "i#0",
        "i\u2081#0",
        "threshold#0",
        "truncatedStartCached#0",
        "result#1"
      ],
      "op": "intc_1 // 0",
      "defined_out": [
        "or_result%0#0"
      ],
      "stack_out": [
        "absoluteBound#0",
        "byteSize#0",
        "candidate#0",
        "i#0",
        "i\u2081#0",
        "threshold#0",
        "truncatedStartCached#0",
        "result#1",
        "or_result%0#0"
      ]
    },
    "398": {
      "block": "__pcg32BoundedSequence_bool_merge@5",
      "stack_in": [
        "absoluteBound#0",
        "byteSize#0",
        "candidate#0",
        "i#0",
        "i\u2081#0",
        "threshold#0",
        "truncatedStartCached#0",
        "result#1",
        "or_result%0#0"
      ],
      "op": "assert",
      "defined_out": [],
      "stack_out": [
        "absoluteBound#0",
        "byteSize#0",
        "candidate#0",
        "i#0",
        "i\u2081#0",
        "threshold#0",
        "truncatedStartCached#0",
        "result#1"
      ]
    },
    "399": {
      "op": "frame_dig -4",
      "defined_out": [
        "bitSize#0 (copy)"
      ],
      "stack_out": [
        "absoluteBound#0",
        "byteSize#0",
        "candidate#0",
        "i#0",
        "i\u2081#0",
        "threshold#0",
        "truncatedStartCached#0",
        "result#1",
        "bitSize#0 (copy)"
      ]
    },
    "401": {
      "op": "pushint 3 // 3",
      "defined_out": [
        "3",
        "bitSize#0 (copy)"
      ],
      "stack_out": [
        "absoluteBound#0",
        "byteSize#0",
        "candidate#0",
        "i#0",
        "i\u2081#0",
        "threshold#0",
        "truncatedStartCached#0",
        "result#1",
        "bitSize#0 (copy)",
        "3"
      ]
    },
    "403": {
      "op": "shr",
      "defined_out": [
        "byteSize#0"
      ],
      "stack_out": [
        "absoluteBound#0",
        "byteSize#0",
        "candidate#0",
        "i#0",
        "i\u2081#0",
        "threshold#0",
        "truncatedStartCached#0",
        "result#1",
        "byteSize#0"
      ]
    },
    "404": {
      "op": "dup",
      "stack_out": [
        "absoluteBound#0",
        "byteSize#0",
        "candidate#0",
        "i#0",
        "i\u2081#0",
        "threshold#0",
        "truncatedStartCached#0",
        "result#1",
        "byteSize#0",
        "byteSize#0"
      ]
    },
    "405": {
      "op": "frame_bury 1",
      "defined_out": [
        "byteSize#0"
      ],
      "stack_out": [
        "absoluteBound#0",
        "byteSize#0",
        "candidate#0",
        "i#0",
        "i\u2081#0",
        "threshold#0",
        "truncatedStartCached#0",
        "result#1",
        "byteSize#0"
      ]
    },
    "407": {
      "op": "intc_3 // 8",
      "defined_out": [
        "8",
        "byteSize#0"
      ],
      "stack_out": [
        "absoluteBound#0",
        "byteSize#0",
        "candidate#0",
        "i#0",
        "i\u2081#0",
        "threshold#0",
        "truncatedStartCached#0",
        "result#1",
        "byteSize#0",
        "8"
      ]
    },
    "408": {
      "op": "swap",
      "stack_out": [
        "absoluteBound#0",
        "byteSize#0",
        "candidate#0",
        "i#0",
        "i\u2081#0",
        "threshold#0",
        "truncatedStartCached#0",
        "result#1",
        "8",
        "byteSize#0"
      ]
    },
    "409": {
      "op": "-",
      "defined_out": [
        "byteSize#0",
        "truncatedStartCached#0"
      ],
      "stack_out": [
        "absoluteBound#0",
        "byteSize#0",
        "candidate#0",
        "i#0",
        "i\u2081#0",
        "threshold#0",
        "truncatedStartCached#0",
        "result#1",
        "truncatedStartCached#0"
      ]
    },
    "410": {
      "op": "frame_bury 6",
      "defined_out": [
        "byteSize#0",
        "truncatedStartCached#0"
      ],
      "stack_out": [
        "absoluteBound#0",
        "byteSize#0",
        "candidate#0",
        "i#0",
        "i\u2081#0",
        "threshold#0",
        "truncatedStartCached#0",
        "result#1"
      ]
    },
    "412": {
      "op": "frame_dig -3",
      "defined_out": [
        "byteSize#0",
        "lowerBound#0 (copy)",
        "truncatedStartCached#0"
      ],
      "stack_out": [
        "absoluteBound#0",
        "byteSize#0",
        "candidate#0",
        "i#0",
        "i\u2081#0",
        "threshold#0",
        "truncatedStartCached#0",
        "result#1",
        "lowerBound#0 (copy)"
      ]
    },
    "414": {
      "op": "bnz __pcg32BoundedSequence_else_body@13",
      "stack_out": [
        "absoluteBound#0",
        "byteSize#0",
        "candidate#0",
        "i#0",
        "i\u2081#0",
        "threshold#0",
        "truncatedStartCached#0",
        "result#1"
      ]
    },
    "417": {
      "op": "frame_dig -2",
      "defined_out": [
        "byteSize#0",
        "truncatedStartCached#0",
        "upperBound#0 (copy)"
      ],
      "stack_out": [
        "absoluteBound#0",
        "byteSize#0",
        "candidate#0",
        "i#0",
        "i\u2081#0",
        "threshold#0",
        "truncatedStartCached#0",
        "result#1",
        "upperBound#0 (copy)"
      ]
    },
    "419": {
      "op": "bnz __pcg32BoundedSequence_else_body@13",
      "stack_out": [
        "absoluteBound#0",
        "byteSize#0",
        "candidate#0",
        "i#0",
        "i\u2081#0",
        "threshold#0",
        "truncatedStartCached#0",
        "result#1"
      ]
    },
    "422": {
      "op": "intc_1 // 0",
      "defined_out": [
        "byteSize#0",
        "i#0",
        "truncatedStartCached#0"
      ],
      "stack_out": [
        "absoluteBound#0",
        "byteSize#0",
        "candidate#0",
        "i#0",
        "i\u2081#0",
        "threshold#0",
        "truncatedStartCached#0",
        "result#1",
        "i#0"
      ]
    },
    "423": {
      "op": "frame_bury 3",
      "stack_out": [
        "absoluteBound#0",
        "byteSize#0",
        "candidate#0",
        "i#0",
        "i\u2081#0",
        "threshold#0",
        "truncatedStartCached#0",
        "result#1"
      ]
    },
    "425": {
      "block": "__pcg32BoundedSequence_while_top@8",
      "stack_in": [
        "absoluteBound#0",
        "byteSize#0",
        "candidate#0",
        "i#0",
        "i\u2081#0",
        "threshold#0",
        "truncatedStartCached#0",
        "result#1"
      ],
      "op": "frame_dig 3",
      "defined_out": [
        "i#0"
      ],
      "stack_out": [
        "absoluteBound#0",
        "byteSize#0",
        "candidate#0",
        "i#0",
        "i\u2081#0",
        "threshold#0",
        "truncatedStartCached#0",
        "result#1",
        "i#0"
      ]
    },
    "427": {
      "op": "frame_dig -1",
      "defined_out": [
        "i#0",
        "length#0 (copy)"
      ],
      "stack_out": [
        "absoluteBound#0",
        "byteSize#0",
        "candidate#0",
        "i#0",
        "i\u2081#0",
        "threshold#0",
        "truncatedStartCached#0",
        "result#1",
        "i#0",
        "length#0 (copy)"
      ]
    },
    "429": {
      "op": "<",
      "defined_out": [
        "i#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "absoluteBound#0",
        "byteSize#0",
        "candidate#0",
        "i#0",
        "i\u2081#0",
        "threshold#0",
        "truncatedStartCached#0",
        "result#1",
        "tmp%7#0"
      ]
    },
    "430": {
      "op": "bz __pcg32BoundedSequence_after_if_else@29",
      "stack_out": [
        "absoluteBound#0",
        "byteSize#0",
        "candidate#0",
        "i#0",
        "i\u2081#0",
        "threshold#0",
        "truncatedStartCached#0",
        "result#1"
      ]
    },
    "433": {
      "op": "frame_dig -5",
      "defined_out": [
        "i#0",
        "state#0 (copy)"
      ],
      "stack_out": [
        "absoluteBound#0",
        "byteSize#0",
        "candidate#0",
        "i#0",
        "i\u2081#0",
        "threshold#0",
        "truncatedStartCached#0",
        "result#1",
        "state#0 (copy)"
      ]
    },
    "435": {
      "callsub": "lib_pcg/pcg32.algo.ts::__pcg32UnboundedRandom",
      "op": "callsub __pcg32UnboundedRandom",
      "defined_out": [
        "i#0",
        "n#0",
        "newState#0"
      ],
      "stack_out": [
        "absoluteBound#0",
        "byteSize#0",
        "candidate#0",
        "i#0",
        "i\u2081#0",
        "threshold#0",
        "truncatedStartCached#0",
        "result#1",
        "newState#0",
        "n#0"
      ]
    },
    "438": {
      "op": "itob",
      "defined_out": [
        "i#0",
        "newState#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "absoluteBound#0",
        "byteSize#0",
        "candidate#0",
        "i#0",
        "i\u2081#0",
        "threshold#0",
        "truncatedStartCached#0",
        "result#1",
        "newState#0",
        "tmp%8#0"
      ]
    },
    "439": {
      "op": "frame_dig 6",
      "defined_out": [
        "i#0",
        "newState#0",
        "tmp%8#0",
        "truncatedStartCached#0"
      ],
      "stack_out": [
        "absoluteBound#0",
        "byteSize#0",
        "candidate#0",
        "i#0",
        "i\u2081#0",
        "threshold#0",
        "truncatedStartCached#0",
        "result#1",
        "newState#0",
        "tmp%8#0",
        "truncatedStartCached#0"
      ]
    },
    "441": {
      "op": "frame_dig 1",
      "defined_out": [
        "byteSize#0",
        "i#0",
        "newState#0",
        "tmp%8#0",
        "truncatedStartCached#0"
      ],
      "stack_out": [
        "absoluteBound#0",
        "byteSize#0",
        "candidate#0",
        "i#0",
        "i\u2081#0",
        "threshold#0",
        "truncatedStartCached#0",
        "result#1",
        "newState#0",
        "tmp%8#0",
        "truncatedStartCached#0",
        "byteSize#0"
      ]
    },
    "443": {
      "op": "extract3",
      "defined_out": [
        "byteSize#0",
        "i#0",
        "newState#0",
        "tmp%9#0",
        "truncatedStartCached#0"
      ],
      "stack_out": [
        "absoluteBound#0",
        "byteSize#0",
        "candidate#0",
        "i#0",
        "i\u2081#0",
        "threshold#0",
        "truncatedStartCached#0",
        "result#1",
        "newState#0",
        "tmp%9#0"
      ]
    },
    "444": {
      "op": "frame_dig 7",
      "defined_out": [
        "byteSize#0",
        "i#0",
        "newState#0",
        "result#1",
        "tmp%9#0",
        "truncatedStartCached#0"
      ],
      "stack_out": [
        "absoluteBound#0",
        "byteSize#0",
        "candidate#0",
        "i#0",
        "i\u2081#0",
        "threshold#0",
        "truncatedStartCached#0",
        "result#1",
        "newState#0",
        "tmp%9#0",
        "result#1"
      ]
    },
    "446": {
      "op": "swap",
      "stack_out": [
        "absoluteBound#0",
        "byteSize#0",
        "candidate#0",
        "i#0",
        "i\u2081#0",
        "threshold#0",
        "truncatedStartCached#0",
        "result#1",
        "newState#0",
        "result#1",
        "tmp%9#0"
      ]
    },
    "447": {
      "op": "concat",
      "stack_out": [
        "absoluteBound#0",
        "byteSize#0",
        "candidate#0",
        "i#0",
        "i\u2081#0",
        "threshold#0",
        "truncatedStartCached#0",
        "result#1",
        "newState#0",
        "result#1"
      ]
    },
    "448": {
      "op": "frame_bury 7",
      "defined_out": [
        "byteSize#0",
        "i#0",
        "newState#0",
        "result#1",
        "truncatedStartCached#0"
      ],
      "stack_out": [
        "absoluteBound#0",
        "byteSize#0",
        "candidate#0",
        "i#0",
        "i\u2081#0",
        "threshold#0",
        "truncatedStartCached#0",
        "result#1",
        "newState#0"
      ]
    },
    "450": {
      "op": "frame_dig 3",
      "stack_out": [
        "absoluteBound#0",
        "byteSize#0",
        "candidate#0",
        "i#0",
        "i\u2081#0",
        "threshold#0",
        "truncatedStartCached#0",
        "result#1",
        "newState#0",
        "i#0"
      ]
    },
    "452": {
      "op": "intc_0 // 1",
      "stack_out": [
        "absoluteBound#0",
        "byteSize#0",
        "candidate#0",
        "i#0",
        "i\u2081#0",
        "threshold#0",
        "truncatedStartCached#0",
        "result#1",
        "newState#0",
        "i#0",
        "1"
      ]
    },
    "453": {
      "op": "+",
      "stack_out": [
        "absoluteBound#0",
        "byteSize#0",
        "candidate#0",
        "i#0",
        "i\u2081#0",
        "threshold#0",
        "truncatedStartCached#0",
        "result#1",
        "newState#0",
        "i#0"
      ]
    },
    "454": {
      "op": "frame_bury 3",
      "defined_out": [
        "byteSize#0",
        "i#0",
        "newState#0",
        "result#1",
        "truncatedStartCached#0"
      ],
      "stack_out": [
        "absoluteBound#0",
        "byteSize#0",
        "candidate#0",
        "i#0",
        "i\u2081#0",
        "threshold#0",
        "truncatedStartCached#0",
        "result#1",
        "newState#0"
      ]
    },
    "456": {
      "op": "frame_bury -5",
      "stack_out": [
        "absoluteBound#0",
        "byteSize#0",
        "candidate#0",
        "i#0",
        "i\u2081#0",
        "threshold#0",
        "truncatedStartCached#0",
        "result#1"
      ]
    },
    "458": {
      "op": "b __pcg32BoundedSequence_while_top@8"
    },
    "461": {
      "block": "__pcg32BoundedSequence_else_body@13",
      "stack_in": [
        "absoluteBound#0",
        "byteSize#0",
        "candidate#0",
        "i#0",
        "i\u2081#0",
        "threshold#0",
        "truncatedStartCached#0",
        "result#1"
      ],
      "op": "frame_dig -2",
      "defined_out": [
        "upperBound#0 (copy)"
      ],
      "stack_out": [
        "absoluteBound#0",
        "byteSize#0",
        "candidate#0",
        "i#0",
        "i\u2081#0",
        "threshold#0",
        "truncatedStartCached#0",
        "result#1",
        "upperBound#0 (copy)"
      ]
    },
    "463": {
      "op": "bz __pcg32BoundedSequence_else_body@15",
      "stack_out": [
        "absoluteBound#0",
        "byteSize#0",
        "candidate#0",
        "i#0",
        "i\u2081#0",
        "threshold#0",
        "truncatedStartCached#0",
        "result#1"
      ]
    },
    "466": {
      "op": "frame_dig -2",
      "stack_out": [
        "absoluteBound#0",
        "byteSize#0",
        "candidate#0",
        "i#0",
        "i\u2081#0",
        "threshold#0",
        "truncatedStartCached#0",
        "result#1",
        "upperBound#0 (copy)"
      ]
    },
    "468": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "upperBound#0 (copy)"
      ],
      "stack_out": [
        "absoluteBound#0",
        "byteSize#0",
        "candidate#0",
        "i#0",
        "i\u2081#0",
        "threshold#0",
        "truncatedStartCached#0",
        "result#1",
        "upperBound#0 (copy)",
        "1"
      ]
    },
    "469": {
      "op": ">",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "absoluteBound#0",
        "byteSize#0",
        "candidate#0",
        "i#0",
        "i\u2081#0",
        "threshold#0",
        "truncatedStartCached#0",
        "result#1",
        "tmp%11#0"
      ]
    },
    "470": {
      "op": "assert",
      "stack_out": [
        "absoluteBound#0",
        "byteSize#0",
        "candidate#0",
        "i#0",
        "i\u2081#0",
        "threshold#0",
        "truncatedStartCached#0",
        "result#1"
      ]
    },
    "471": {
      "op": "intc_0 // 1",
      "stack_out": [
        "absoluteBound#0",
        "byteSize#0",
        "candidate#0",
        "i#0",
        "i\u2081#0",
        "threshold#0",
        "truncatedStartCached#0",
        "result#1",
        "1"
      ]
    },
    "472": {
      "op": "frame_dig -4",
      "defined_out": [
        "1",
        "bitSize#0 (copy)"
      ],
      "stack_out": [
        "absoluteBound#0",
        "byteSize#0",
        "candidate#0",
        "i#0",
        "i\u2081#0",
        "threshold#0",
        "truncatedStartCached#0",
        "result#1",
        "1",
        "bitSize#0 (copy)"
      ]
    },
    "474": {
      "op": "shl",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "absoluteBound#0",
        "byteSize#0",
        "candidate#0",
        "i#0",
        "i\u2081#0",
        "threshold#0",
        "truncatedStartCached#0",
        "result#1",
        "tmp%12#0"
      ]
    },
    "475": {
      "op": "frame_dig -2",
      "stack_out": [
        "absoluteBound#0",
        "byteSize#0",
        "candidate#0",
        "i#0",
        "i\u2081#0",
        "threshold#0",
        "truncatedStartCached#0",
        "result#1",
        "tmp%12#0",
        "upperBound#0 (copy)"
      ]
    },
    "477": {
      "op": ">",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "absoluteBound#0",
        "byteSize#0",
        "candidate#0",
        "i#0",
        "i\u2081#0",
        "threshold#0",
        "truncatedStartCached#0",
        "result#1",
        "tmp%13#0"
      ]
    },
    "478": {
      "op": "assert",
      "stack_out": [
        "absoluteBound#0",
        "byteSize#0",
        "candidate#0",
        "i#0",
        "i\u2081#0",
        "threshold#0",
        "truncatedStartCached#0",
        "result#1"
      ]
    },
    "479": {
      "op": "frame_dig -2",
      "stack_out": [
        "absoluteBound#0",
        "byteSize#0",
        "candidate#0",
        "i#0",
        "i\u2081#0",
        "threshold#0",
        "truncatedStartCached#0",
        "result#1",
        "upperBound#0 (copy)"
      ]
    },
    "481": {
      "op": "intc_0 // 1",
      "stack_out": [
        "absoluteBound#0",
        "byteSize#0",
        "candidate#0",
        "i#0",
        "i\u2081#0",
        "threshold#0",
        "truncatedStartCached#0",
        "result#1",
        "upperBound#0 (copy)",
        "1"
      ]
    },
    "482": {
      "op": "-",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "absoluteBound#0",
        "byteSize#0",
        "candidate#0",
        "i#0",
        "i\u2081#0",
        "threshold#0",
        "truncatedStartCached#0",
        "result#1",
        "tmp%14#0"
      ]
    },
    "483": {
      "op": "frame_dig -3",
      "defined_out": [
        "lowerBound#0 (copy)",
        "tmp%14#0"
      ],
      "stack_out": [
        "absoluteBound#0",
        "byteSize#0",
        "candidate#0",
        "i#0",
        "i\u2081#0",
        "threshold#0",
        "truncatedStartCached#0",
        "result#1",
        "tmp%14#0",
        "lowerBound#0 (copy)"
      ]
    },
    "485": {
      "op": ">",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "absoluteBound#0",
        "byteSize#0",
        "candidate#0",
        "i#0",
        "i\u2081#0",
        "threshold#0",
        "truncatedStartCached#0",
        "result#1",
        "tmp%15#0"
      ]
    },
    "486": {
      "op": "assert",
      "stack_out": [
        "absoluteBound#0",
        "byteSize#0",
        "candidate#0",
        "i#0",
        "i\u2081#0",
        "threshold#0",
        "truncatedStartCached#0",
        "result#1"
      ]
    },
    "487": {
      "op": "frame_dig -2",
      "stack_out": [
        "absoluteBound#0",
        "byteSize#0",
        "candidate#0",
        "i#0",
        "i\u2081#0",
        "threshold#0",
        "truncatedStartCached#0",
        "result#1",
        "upperBound#0 (copy)"
      ]
    },
    "489": {
      "op": "frame_dig -3",
      "stack_out": [
        "absoluteBound#0",
        "byteSize#0",
        "candidate#0",
        "i#0",
        "i\u2081#0",
        "threshold#0",
        "truncatedStartCached#0",
        "result#1",
        "upperBound#0 (copy)",
        "lowerBound#0 (copy)"
      ]
    },
    "491": {
      "op": "-",
      "defined_out": [
        "absoluteBound#0"
      ],
      "stack_out": [
        "absoluteBound#0",
        "byteSize#0",
        "candidate#0",
        "i#0",
        "i\u2081#0",
        "threshold#0",
        "truncatedStartCached#0",
        "result#1",
        "absoluteBound#0"
      ]
    },
    "492": {
      "op": "frame_bury 0",
      "defined_out": [
        "absoluteBound#0"
      ],
      "stack_out": [
        "absoluteBound#0",
        "byteSize#0",
        "candidate#0",
        "i#0",
        "i\u2081#0",
        "threshold#0",
        "truncatedStartCached#0",
        "result#1"
      ]
    },
    "494": {
      "op": "b __pcg32BoundedSequence_after_if_else@16"
    },
    "497": {
      "block": "__pcg32BoundedSequence_else_body@15",
      "stack_in": [
        "absoluteBound#0",
        "byteSize#0",
        "candidate#0",
        "i#0",
        "i\u2081#0",
        "threshold#0",
        "truncatedStartCached#0",
        "result#1"
      ],
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "absoluteBound#0",
        "byteSize#0",
        "candidate#0",
        "i#0",
        "i\u2081#0",
        "threshold#0",
        "truncatedStartCached#0",
        "result#1",
        "1"
      ]
    },
    "498": {
      "op": "frame_dig -4",
      "defined_out": [
        "1",
        "bitSize#0 (copy)"
      ],
      "stack_out": [
        "absoluteBound#0",
        "byteSize#0",
        "candidate#0",
        "i#0",
        "i\u2081#0",
        "threshold#0",
        "truncatedStartCached#0",
        "result#1",
        "1",
        "bitSize#0 (copy)"
      ]
    },
    "500": {
      "op": "shl",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "absoluteBound#0",
        "byteSize#0",
        "candidate#0",
        "i#0",
        "i\u2081#0",
        "threshold#0",
        "truncatedStartCached#0",
        "result#1",
        "tmp%16#0"
      ]
    },
    "501": {
      "op": "dup",
      "defined_out": [
        "tmp%16#0",
        "tmp%16#0 (copy)"
      ],
      "stack_out": [
        "absoluteBound#0",
        "byteSize#0",
        "candidate#0",
        "i#0",
        "i\u2081#0",
        "threshold#0",
        "truncatedStartCached#0",
        "result#1",
        "tmp%16#0",
        "tmp%16#0 (copy)"
      ]
    },
    "502": {
      "op": "intc_0 // 1",
      "stack_out": [
        "absoluteBound#0",
        "byteSize#0",
        "candidate#0",
        "i#0",
        "i\u2081#0",
        "threshold#0",
        "truncatedStartCached#0",
        "result#1",
        "tmp%16#0",
        "tmp%16#0 (copy)",
        "1"
      ]
    },
    "503": {
      "op": "-",
      "defined_out": [
        "tmp%16#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "absoluteBound#0",
        "byteSize#0",
        "candidate#0",
        "i#0",
        "i\u2081#0",
        "threshold#0",
        "truncatedStartCached#0",
        "result#1",
        "tmp%16#0",
        "tmp%17#0"
      ]
    },
    "504": {
      "op": "frame_dig -3",
      "defined_out": [
        "lowerBound#0 (copy)",
        "tmp%16#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "absoluteBound#0",
        "byteSize#0",
        "candidate#0",
        "i#0",
        "i\u2081#0",
        "threshold#0",
        "truncatedStartCached#0",
        "result#1",
        "tmp%16#0",
        "tmp%17#0",
        "lowerBound#0 (copy)"
      ]
    },
    "506": {
      "op": ">",
      "defined_out": [
        "tmp%16#0",
        "tmp%18#0"
      ],
      "stack_out": [
        "absoluteBound#0",
        "byteSize#0",
        "candidate#0",
        "i#0",
        "i\u2081#0",
        "threshold#0",
        "truncatedStartCached#0",
        "result#1",
        "tmp%16#0",
        "tmp%18#0"
      ]
    },
    "507": {
      "op": "assert",
      "stack_out": [
        "absoluteBound#0",
        "byteSize#0",
        "candidate#0",
        "i#0",
        "i\u2081#0",
        "threshold#0",
        "truncatedStartCached#0",
        "result#1",
        "tmp%16#0"
      ]
    },
    "508": {
      "op": "frame_dig -3",
      "stack_out": [
        "absoluteBound#0",
        "byteSize#0",
        "candidate#0",
        "i#0",
        "i\u2081#0",
        "threshold#0",
        "truncatedStartCached#0",
        "result#1",
        "tmp%16#0",
        "lowerBound#0 (copy)"
      ]
    },
    "510": {
      "op": "-",
      "defined_out": [
        "absoluteBound#0"
      ],
      "stack_out": [
        "absoluteBound#0",
        "byteSize#0",
        "candidate#0",
        "i#0",
        "i\u2081#0",
        "threshold#0",
        "truncatedStartCached#0",
        "result#1",
        "absoluteBound#0"
      ]
    },
    "511": {
      "op": "frame_bury 0",
      "defined_out": [
        "absoluteBound#0"
      ],
      "stack_out": [
        "absoluteBound#0",
        "byteSize#0",
        "candidate#0",
        "i#0",
        "i\u2081#0",
        "threshold#0",
        "truncatedStartCached#0",
        "result#1"
      ]
    },
    "513": {
      "block": "__pcg32BoundedSequence_after_if_else@16",
      "stack_in": [
        "absoluteBound#0",
        "byteSize#0",
        "candidate#0",
        "i#0",
        "i\u2081#0",
        "threshold#0",
        "truncatedStartCached#0",
        "result#1"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "absoluteBound#0"
      ],
      "stack_out": [
        "absoluteBound#0",
        "byteSize#0",
        "candidate#0",
        "i#0",
        "i\u2081#0",
        "threshold#0",
        "truncatedStartCached#0",
        "result#1",
        "absoluteBound#0"
      ]
    },
    "515": {
      "op": "dup",
      "defined_out": [
        "absoluteBound#0",
        "absoluteBound#0 (copy)"
      ],
      "stack_out": [
        "absoluteBound#0",
        "byteSize#0",
        "candidate#0",
        "i#0",
        "i\u2081#0",
        "threshold#0",
        "truncatedStartCached#0",
        "result#1",
        "absoluteBound#0",
        "absoluteBound#0 (copy)"
      ]
    },
    "516": {
      "callsub": "lib_pcg/pcg32.algo.ts::__uint64Twos",
      "op": "callsub __uint64Twos",
      "defined_out": [
        "absoluteBound#0",
        "tmp%20#0"
      ],
      "stack_out": [
        "absoluteBound#0",
        "byteSize#0",
        "candidate#0",
        "i#0",
        "i\u2081#0",
        "threshold#0",
        "truncatedStartCached#0",
        "result#1",
        "absoluteBound#0",
        "tmp%20#0"
      ]
    },
    "519": {
      "callsub": "lib_pcg/pcg32.algo.ts::__maskToUint32",
      "op": "callsub __maskToUint32",
      "defined_out": [
        "absoluteBound#0",
        "tmp%21#0"
      ],
      "stack_out": [
        "absoluteBound#0",
        "byteSize#0",
        "candidate#0",
        "i#0",
        "i\u2081#0",
        "threshold#0",
        "truncatedStartCached#0",
        "result#1",
        "absoluteBound#0",
        "tmp%21#0"
      ]
    },
    "522": {
      "op": "swap",
      "stack_out": [
        "absoluteBound#0",
        "byteSize#0",
        "candidate#0",
        "i#0",
        "i\u2081#0",
        "threshold#0",
        "truncatedStartCached#0",
        "result#1",
        "tmp%21#0",
        "absoluteBound#0"
      ]
    },
    "523": {
      "op": "%",
      "defined_out": [
        "absoluteBound#0",
        "threshold#0"
      ],
      "stack_out": [
        "absoluteBound#0",
        "byteSize#0",
        "candidate#0",
        "i#0",
        "i\u2081#0",
        "threshold#0",
        "truncatedStartCached#0",
        "result#1",
        "threshold#0"
      ]
    },
    "524": {
      "op": "frame_bury 5",
      "defined_out": [
        "absoluteBound#0",
        "threshold#0"
      ],
      "stack_out": [
        "absoluteBound#0",
        "byteSize#0",
        "candidate#0",
        "i#0",
        "i\u2081#0",
        "threshold#0",
        "truncatedStartCached#0",
        "result#1"
      ]
    },
    "526": {
      "op": "intc_1 // 0",
      "defined_out": [
        "absoluteBound#0",
        "i\u2081#0",
        "threshold#0"
      ],
      "stack_out": [
        "absoluteBound#0",
        "byteSize#0",
        "candidate#0",
        "i#0",
        "i\u2081#0",
        "threshold#0",
        "truncatedStartCached#0",
        "result#1",
        "i\u2081#0"
      ]
    },
    "527": {
      "op": "frame_bury 4",
      "defined_out": [
        "absoluteBound#0",
        "i\u2081#0",
        "threshold#0"
      ],
      "stack_out": [
        "absoluteBound#0",
        "byteSize#0",
        "candidate#0",
        "i#0",
        "i\u2081#0",
        "threshold#0",
        "truncatedStartCached#0",
        "result#1"
      ]
    },
    "529": {
      "block": "__pcg32BoundedSequence_while_top@17",
      "stack_in": [
        "absoluteBound#0",
        "byteSize#0",
        "candidate#0",
        "i#0",
        "i\u2081#0",
        "threshold#0",
        "truncatedStartCached#0",
        "result#1"
      ],
      "op": "frame_dig 4",
      "defined_out": [
        "i\u2081#0"
      ],
      "stack_out": [
        "absoluteBound#0",
        "byteSize#0",
        "candidate#0",
        "i#0",
        "i\u2081#0",
        "threshold#0",
        "truncatedStartCached#0",
        "result#1",
        "i\u2081#0"
      ]
    },
    "531": {
      "op": "frame_dig -1",
      "defined_out": [
        "i\u2081#0",
        "length#0 (copy)"
      ],
      "stack_out": [
        "absoluteBound#0",
        "byteSize#0",
        "candidate#0",
        "i#0",
        "i\u2081#0",
        "threshold#0",
        "truncatedStartCached#0",
        "result#1",
        "i\u2081#0",
        "length#0 (copy)"
      ]
    },
    "533": {
      "op": "<",
      "defined_out": [
        "i\u2081#0",
        "tmp%22#0"
      ],
      "stack_out": [
        "absoluteBound#0",
        "byteSize#0",
        "candidate#0",
        "i#0",
        "i\u2081#0",
        "threshold#0",
        "truncatedStartCached#0",
        "result#1",
        "tmp%22#0"
      ]
    },
    "534": {
      "op": "bz __pcg32BoundedSequence_after_if_else@29",
      "stack_out": [
        "absoluteBound#0",
        "byteSize#0",
        "candidate#0",
        "i#0",
        "i\u2081#0",
        "threshold#0",
        "truncatedStartCached#0",
        "result#1"
      ]
    },
    "537": {
      "block": "__pcg32BoundedSequence_while_top@19",
      "stack_in": [
        "absoluteBound#0",
        "byteSize#0",
        "candidate#0",
        "i#0",
        "i\u2081#0",
        "threshold#0",
        "truncatedStartCached#0",
        "result#1"
      ],
      "op": "frame_dig -5",
      "defined_out": [
        "state#0 (copy)"
      ],
      "stack_out": [
        "absoluteBound#0",
        "byteSize#0",
        "candidate#0",
        "i#0",
        "i\u2081#0",
        "threshold#0",
        "truncatedStartCached#0",
        "result#1",
        "state#0 (copy)"
      ]
    },
    "539": {
      "callsub": "lib_pcg/pcg32.algo.ts::__pcg32UnboundedRandom",
      "op": "callsub __pcg32UnboundedRandom",
      "defined_out": [
        "candidate#0",
        "newState\u2081#0"
      ],
      "stack_out": [
        "absoluteBound#0",
        "byteSize#0",
        "candidate#0",
        "i#0",
        "i\u2081#0",
        "threshold#0",
        "truncatedStartCached#0",
        "result#1",
        "newState\u2081#0",
        "candidate#0"
      ]
    },
    "542": {
      "op": "dup",
      "stack_out": [
        "absoluteBound#0",
        "byteSize#0",
        "candidate#0",
        "i#0",
        "i\u2081#0",
        "threshold#0",
        "truncatedStartCached#0",
        "result#1",
        "newState\u2081#0",
        "candidate#0",
        "candidate#0 (copy)"
      ]
    },
    "543": {
      "op": "cover 2",
      "stack_out": [
        "absoluteBound#0",
        "byteSize#0",
        "candidate#0",
        "i#0",
        "i\u2081#0",
        "threshold#0",
        "truncatedStartCached#0",
        "result#1",
        "candidate#0",
        "newState\u2081#0",
        "candidate#0"
      ]
    },
    "545": {
      "op": "frame_bury 2",
      "defined_out": [
        "candidate#0",
        "newState\u2081#0"
      ],
      "stack_out": [
        "absoluteBound#0",
        "byteSize#0",
        "candidate#0",
        "i#0",
        "i\u2081#0",
        "threshold#0",
        "truncatedStartCached#0",
        "result#1",
        "candidate#0",
        "newState\u2081#0"
      ]
    },
    "547": {
      "op": "swap",
      "defined_out": [
        "candidate#0",
        "newState\u2081#0"
      ],
      "stack_out": [
        "absoluteBound#0",
        "byteSize#0",
        "candidate#0",
        "i#0",
        "i\u2081#0",
        "threshold#0",
        "truncatedStartCached#0",
        "result#1",
        "newState\u2081#0",
        "candidate#0"
      ]
    },
    "548": {
      "op": "frame_dig 5",
      "defined_out": [
        "candidate#0",
        "newState\u2081#0",
        "threshold#0"
      ],
      "stack_out": [
        "absoluteBound#0",
        "byteSize#0",
        "candidate#0",
        "i#0",
        "i\u2081#0",
        "threshold#0",
        "truncatedStartCached#0",
        "result#1",
        "newState\u2081#0",
        "candidate#0",
        "threshold#0"
      ]
    },
    "550": {
      "op": ">=",
      "defined_out": [
        "candidate#0",
        "newState\u2081#0",
        "threshold#0",
        "tmp%23#0"
      ],
      "stack_out": [
        "absoluteBound#0",
        "byteSize#0",
        "candidate#0",
        "i#0",
        "i\u2081#0",
        "threshold#0",
        "truncatedStartCached#0",
        "result#1",
        "newState\u2081#0",
        "tmp%23#0"
      ]
    },
    "551": {
      "op": "bz __pcg32BoundedSequence_after_if_else@22",
      "stack_out": [
        "absoluteBound#0",
        "byteSize#0",
        "candidate#0",
        "i#0",
        "i\u2081#0",
        "threshold#0",
        "truncatedStartCached#0",
        "result#1",
        "newState\u2081#0"
      ]
    },
    "554": {
      "op": "frame_dig 2",
      "stack_out": [
        "absoluteBound#0",
        "byteSize#0",
        "candidate#0",
        "i#0",
        "i\u2081#0",
        "threshold#0",
        "truncatedStartCached#0",
        "result#1",
        "newState\u2081#0",
        "candidate#0"
      ]
    },
    "556": {
      "op": "frame_dig 0",
      "defined_out": [
        "absoluteBound#0",
        "candidate#0",
        "newState\u2081#0",
        "threshold#0"
      ],
      "stack_out": [
        "absoluteBound#0",
        "byteSize#0",
        "candidate#0",
        "i#0",
        "i\u2081#0",
        "threshold#0",
        "truncatedStartCached#0",
        "result#1",
        "newState\u2081#0",
        "candidate#0",
        "absoluteBound#0"
      ]
    },
    "558": {
      "op": "%",
      "defined_out": [
        "absoluteBound#0",
        "candidate#0",
        "newState\u2081#0",
        "threshold#0",
        "tmp%24#0"
      ],
      "stack_out": [
        "absoluteBound#0",
        "byteSize#0",
        "candidate#0",
        "i#0",
        "i\u2081#0",
        "threshold#0",
        "truncatedStartCached#0",
        "result#1",
        "newState\u2081#0",
        "tmp%24#0"
      ]
    },
    "559": {
      "op": "frame_dig -3",
      "defined_out": [
        "absoluteBound#0",
        "candidate#0",
        "lowerBound#0 (copy)",
        "newState\u2081#0",
        "threshold#0",
        "tmp%24#0"
      ],
      "stack_out": [
        "absoluteBound#0",
        "byteSize#0",
        "candidate#0",
        "i#0",
        "i\u2081#0",
        "threshold#0",
        "truncatedStartCached#0",
        "result#1",
        "newState\u2081#0",
        "tmp%24#0",
        "lowerBound#0 (copy)"
      ]
    },
    "561": {
      "op": "+",
      "defined_out": [
        "absoluteBound#0",
        "candidate#0",
        "newState\u2081#0",
        "threshold#0",
        "tmp%25#0"
      ],
      "stack_out": [
        "absoluteBound#0",
        "byteSize#0",
        "candidate#0",
        "i#0",
        "i\u2081#0",
        "threshold#0",
        "truncatedStartCached#0",
        "result#1",
        "newState\u2081#0",
        "tmp%25#0"
      ]
    },
    "562": {
      "op": "itob",
      "defined_out": [
        "absoluteBound#0",
        "candidate#0",
        "newState\u2081#0",
        "threshold#0",
        "tmp%26#0"
      ],
      "stack_out": [
        "absoluteBound#0",
        "byteSize#0",
        "candidate#0",
        "i#0",
        "i\u2081#0",
        "threshold#0",
        "truncatedStartCached#0",
        "result#1",
        "newState\u2081#0",
        "tmp%26#0"
      ]
    },
    "563": {
      "op": "frame_dig 6",
      "defined_out": [
        "absoluteBound#0",
        "candidate#0",
        "newState\u2081#0",
        "threshold#0",
        "tmp%26#0",
        "truncatedStartCached#0"
      ],
      "stack_out": [
        "absoluteBound#0",
        "byteSize#0",
        "candidate#0",
        "i#0",
        "i\u2081#0",
        "threshold#0",
        "truncatedStartCached#0",
        "result#1",
        "newState\u2081#0",
        "tmp%26#0",
        "truncatedStartCached#0"
      ]
    },
    "565": {
      "op": "frame_dig 1",
      "defined_out": [
        "absoluteBound#0",
        "byteSize#0",
        "candidate#0",
        "newState\u2081#0",
        "threshold#0",
        "tmp%26#0",
        "truncatedStartCached#0"
      ],
      "stack_out": [
        "absoluteBound#0",
        "byteSize#0",
        "candidate#0",
        "i#0",
        "i\u2081#0",
        "threshold#0",
        "truncatedStartCached#0",
        "result#1",
        "newState\u2081#0",
        "tmp%26#0",
        "truncatedStartCached#0",
        "byteSize#0"
      ]
    },
    "567": {
      "op": "extract3",
      "defined_out": [
        "absoluteBound#0",
        "byteSize#0",
        "candidate#0",
        "newState\u2081#0",
        "threshold#0",
        "tmp%27#0",
        "truncatedStartCached#0"
      ],
      "stack_out": [
        "absoluteBound#0",
        "byteSize#0",
        "candidate#0",
        "i#0",
        "i\u2081#0",
        "threshold#0",
        "truncatedStartCached#0",
        "result#1",
        "newState\u2081#0",
        "tmp%27#0"
      ]
    },
    "568": {
      "op": "frame_dig 7",
      "defined_out": [
        "absoluteBound#0",
        "byteSize#0",
        "candidate#0",
        "newState\u2081#0",
        "result#1",
        "threshold#0",
        "tmp%27#0",
        "truncatedStartCached#0"
      ],
      "stack_out": [
        "absoluteBound#0",
        "byteSize#0",
        "candidate#0",
        "i#0",
        "i\u2081#0",
        "threshold#0",
        "truncatedStartCached#0",
        "result#1",
        "newState\u2081#0",
        "tmp%27#0",
        "result#1"
      ]
    },
    "570": {
      "op": "swap",
      "stack_out": [
        "absoluteBound#0",
        "byteSize#0",
        "candidate#0",
        "i#0",
        "i\u2081#0",
        "threshold#0",
        "truncatedStartCached#0",
        "result#1",
        "newState\u2081#0",
        "result#1",
        "tmp%27#0"
      ]
    },
    "571": {
      "op": "concat",
      "stack_out": [
        "absoluteBound#0",
        "byteSize#0",
        "candidate#0",
        "i#0",
        "i\u2081#0",
        "threshold#0",
        "truncatedStartCached#0",
        "result#1",
        "newState\u2081#0",
        "result#1"
      ]
    },
    "572": {
      "op": "frame_bury 7",
      "defined_out": [
        "absoluteBound#0",
        "byteSize#0",
        "candidate#0",
        "newState\u2081#0",
        "result#1",
        "threshold#0",
        "truncatedStartCached#0"
      ],
      "stack_out": [
        "absoluteBound#0",
        "byteSize#0",
        "candidate#0",
        "i#0",
        "i\u2081#0",
        "threshold#0",
        "truncatedStartCached#0",
        "result#1",
        "newState\u2081#0"
      ]
    },
    "574": {
      "op": "frame_dig 4",
      "defined_out": [
        "absoluteBound#0",
        "byteSize#0",
        "candidate#0",
        "i\u2081#0",
        "newState\u2081#0",
        "result#1",
        "threshold#0",
        "truncatedStartCached#0"
      ],
      "stack_out": [
        "absoluteBound#0",
        "byteSize#0",
        "candidate#0",
        "i#0",
        "i\u2081#0",
        "threshold#0",
        "truncatedStartCached#0",
        "result#1",
        "newState\u2081#0",
        "i\u2081#0"
      ]
    },
    "576": {
      "op": "intc_0 // 1",
      "stack_out": [
        "absoluteBound#0",
        "byteSize#0",
        "candidate#0",
        "i#0",
        "i\u2081#0",
        "threshold#0",
        "truncatedStartCached#0",
        "result#1",
        "newState\u2081#0",
        "i\u2081#0",
        "1"
      ]
    },
    "577": {
      "op": "+",
      "stack_out": [
        "absoluteBound#0",
        "byteSize#0",
        "candidate#0",
        "i#0",
        "i\u2081#0",
        "threshold#0",
        "truncatedStartCached#0",
        "result#1",
        "newState\u2081#0",
        "i\u2081#0"
      ]
    },
    "578": {
      "op": "frame_bury 4",
      "stack_out": [
        "absoluteBound#0",
        "byteSize#0",
        "candidate#0",
        "i#0",
        "i\u2081#0",
        "threshold#0",
        "truncatedStartCached#0",
        "result#1",
        "newState\u2081#0"
      ]
    },
    "580": {
      "op": "frame_bury -5",
      "stack_out": [
        "absoluteBound#0",
        "byteSize#0",
        "candidate#0",
        "i#0",
        "i\u2081#0",
        "threshold#0",
        "truncatedStartCached#0",
        "result#1"
      ]
    },
    "582": {
      "op": "b __pcg32BoundedSequence_while_top@17"
    },
    "585": {
      "block": "__pcg32BoundedSequence_after_if_else@22",
      "stack_in": [
        "absoluteBound#0",
        "byteSize#0",
        "candidate#0",
        "i#0",
        "i\u2081#0",
        "threshold#0",
        "truncatedStartCached#0",
        "result#1",
        "newState\u2081#0"
      ],
      "op": "frame_bury -5",
      "defined_out": [],
      "stack_out": [
        "absoluteBound#0",
        "byteSize#0",
        "candidate#0",
        "i#0",
        "i\u2081#0",
        "threshold#0",
        "truncatedStartCached#0",
        "result#1"
      ]
    },
    "587": {
      "op": "b __pcg32BoundedSequence_while_top@19"
    },
    "590": {
      "block": "__pcg32BoundedSequence_after_if_else@29",
      "stack_in": [
        "absoluteBound#0",
        "byteSize#0",
        "candidate#0",
        "i#0",
        "i\u2081#0",
        "threshold#0",
        "truncatedStartCached#0",
        "result#1"
      ],
      "op": "frame_dig -5",
      "defined_out": [
        "state#0 (copy)"
      ],
      "stack_out": [
        "absoluteBound#0",
        "byteSize#0",
        "candidate#0",
        "i#0",
        "i\u2081#0",
        "threshold#0",
        "truncatedStartCached#0",
        "result#1",
        "state#0 (copy)"
      ]
    },
    "592": {
      "op": "frame_dig 7",
      "defined_out": [
        "result#1",
        "state#0 (copy)"
      ],
      "stack_out": [
        "absoluteBound#0",
        "byteSize#0",
        "candidate#0",
        "i#0",
        "i\u2081#0",
        "threshold#0",
        "truncatedStartCached#0",
        "result#1",
        "state#0 (copy)",
        "result#1"
      ]
    },
    "594": {
      "op": "frame_bury 1"
    },
    "596": {
      "op": "frame_bury 0"
    },
    "598": {
      "retsub": true,
      "op": "retsub"
    },
    "599": {
      "subroutine": "lib_pcg/pcg32.algo.ts::__pcg32UnboundedRandom",
      "params": {
        "state#0": "uint64"
      },
      "block": "__pcg32UnboundedRandom",
      "stack_in": [],
      "op": "proto 1 2"
    },
    "602": {
      "op": "frame_dig -1",
      "defined_out": [
        "state#0 (copy)"
      ],
      "stack_out": [
        "state#0 (copy)"
      ]
    },
    "604": {
      "op": "intc 4 // 1442695040888963407",
      "defined_out": [
        "1442695040888963407",
        "state#0 (copy)"
      ],
      "stack_out": [
        "state#0 (copy)",
        "1442695040888963407"
      ]
    },
    "606": {
      "callsub": "lib_pcg/pcg32.algo.ts::__pcg32Step",
      "op": "callsub __pcg32Step",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "609": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%0#0",
        "state#0 (copy)"
      ]
    },
    "611": {
      "callsub": "lib_pcg/pcg32.algo.ts::__pcg32Output",
      "op": "callsub __pcg32Output",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "614": {
      "retsub": true,
      "op": "retsub"
    },
    "615": {
      "subroutine": "lib_pcg/pcg32.algo.ts::__pcg32Output",
      "params": {
        "state#0": "uint64"
      },
      "block": "__pcg32Output",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "618": {
      "op": "frame_dig -1",
      "defined_out": [
        "state#0 (copy)"
      ],
      "stack_out": [
        "state#0 (copy)"
      ]
    },
    "620": {
      "op": "pushint 18 // 18",
      "defined_out": [
        "18",
        "state#0 (copy)"
      ],
      "stack_out": [
        "state#0 (copy)",
        "18"
      ]
    },
    "622": {
      "op": "shr",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "623": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%0#0",
        "state#0 (copy)"
      ]
    },
    "625": {
      "op": "^",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "626": {
      "op": "pushint 27 // 27",
      "defined_out": [
        "27",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "27"
      ]
    },
    "628": {
      "op": "shr",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "629": {
      "callsub": "lib_pcg/pcg32.algo.ts::__maskToUint32",
      "op": "callsub __maskToUint32",
      "defined_out": [
        "xorshifted#0"
      ],
      "stack_out": [
        "xorshifted#0"
      ]
    },
    "632": {
      "op": "frame_dig -1",
      "stack_out": [
        "xorshifted#0",
        "state#0 (copy)"
      ]
    },
    "634": {
      "op": "pushint 59 // 59",
      "defined_out": [
        "59",
        "state#0 (copy)",
        "xorshifted#0"
      ],
      "stack_out": [
        "xorshifted#0",
        "state#0 (copy)",
        "59"
      ]
    },
    "636": {
      "op": "shr",
      "defined_out": [
        "rot#0",
        "xorshifted#0"
      ],
      "stack_out": [
        "xorshifted#0",
        "rot#0"
      ]
    },
    "637": {
      "op": "dup2",
      "defined_out": [
        "rot#0",
        "rot#0 (copy)",
        "xorshifted#0",
        "xorshifted#0 (copy)"
      ],
      "stack_out": [
        "xorshifted#0",
        "rot#0",
        "xorshifted#0 (copy)",
        "rot#0 (copy)"
      ]
    },
    "638": {
      "op": "shr",
      "defined_out": [
        "rot#0",
        "tmp%3#0",
        "xorshifted#0"
      ],
      "stack_out": [
        "xorshifted#0",
        "rot#0",
        "tmp%3#0"
      ]
    },
    "639": {
      "op": "swap",
      "stack_out": [
        "xorshifted#0",
        "tmp%3#0",
        "rot#0"
      ]
    },
    "640": {
      "callsub": "lib_pcg/pcg32.algo.ts::__uint64Twos",
      "op": "callsub __uint64Twos",
      "defined_out": [
        "tmp%3#0",
        "tmp%4#0",
        "xorshifted#0"
      ],
      "stack_out": [
        "xorshifted#0",
        "tmp%3#0",
        "tmp%4#0"
      ]
    },
    "643": {
      "op": "pushint 31 // 31",
      "defined_out": [
        "31",
        "tmp%3#0",
        "tmp%4#0",
        "xorshifted#0"
      ],
      "stack_out": [
        "xorshifted#0",
        "tmp%3#0",
        "tmp%4#0",
        "31"
      ]
    },
    "645": {
      "op": "&",
      "defined_out": [
        "tmp%3#0",
        "tmp%5#0",
        "xorshifted#0"
      ],
      "stack_out": [
        "xorshifted#0",
        "tmp%3#0",
        "tmp%5#0"
      ]
    },
    "646": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%3#0",
        "tmp%5#0",
        "xorshifted#0"
      ]
    },
    "648": {
      "op": "swap",
      "stack_out": [
        "tmp%3#0",
        "xorshifted#0",
        "tmp%5#0"
      ]
    },
    "649": {
      "op": "shl",
      "defined_out": [
        "tmp%3#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%6#0"
      ]
    },
    "650": {
      "callsub": "lib_pcg/pcg32.algo.ts::__maskToUint32",
      "op": "callsub __maskToUint32",
      "defined_out": [
        "tmp%3#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%7#0"
      ]
    },
    "653": {
      "op": "|",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "654": {
      "retsub": true,
      "op": "retsub"
    },
    "655": {
      "subroutine": "lib_pcg/pcg32.algo.ts::__maskToUint32",
      "params": {
        "value#0": "uint64"
      },
      "block": "__maskToUint32",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "658": {
      "op": "frame_dig -1",
      "defined_out": [
        "value#0 (copy)"
      ],
      "stack_out": [
        "value#0 (copy)"
      ]
    },
    "660": {
      "op": "pushint 4294967295 // 4294967295",
      "defined_out": [
        "4294967295",
        "value#0 (copy)"
      ],
      "stack_out": [
        "value#0 (copy)",
        "4294967295"
      ]
    },
    "666": {
      "op": "&",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "667": {
      "retsub": true,
      "op": "retsub"
    },
    "668": {
      "subroutine": "lib_pcg/pcg32.algo.ts::__uint64Twos",
      "params": {
        "value#0": "uint64"
      },
      "block": "__uint64Twos",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "671": {
      "op": "frame_dig -1",
      "defined_out": [
        "value#0 (copy)"
      ],
      "stack_out": [
        "value#0 (copy)"
      ]
    },
    "673": {
      "op": "~",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "674": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "1"
      ]
    },
    "675": {
      "op": "addw",
      "defined_out": [
        "_#0",
        "addLow#0"
      ],
      "stack_out": [
        "_#0",
        "addLow#0"
      ]
    },
    "676": {
      "op": "bury 1",
      "stack_out": [
        "addLow#0"
      ]
    },
    "678": {
      "retsub": true,
      "op": "retsub"
    },
    "679": {
      "subroutine": "smart_contracts/lib_pcg32_exposer_ts/contract.algo.ts::LibPcg32ExposerTs.bounded_rand_uint16",
      "params": {
        "seed#0": "bytes",
        "lower_bound#0": "bytes",
        "upper_bound#0": "bytes",
        "length#0": "bytes"
      },
      "block": "bounded_rand_uint16",
      "stack_in": [],
      "op": "proto 4 1"
    },
    "682": {
      "op": "frame_dig -4",
      "defined_out": [
        "seed#0 (copy)"
      ],
      "stack_out": [
        "seed#0 (copy)"
      ]
    },
    "684": {
      "callsub": "lib_pcg/pcg32.algo.ts::pcg16Init",
      "op": "callsub pcg16Init",
      "defined_out": [
        "state#0"
      ],
      "stack_out": [
        "state#0"
      ]
    },
    "687": {
      "op": "frame_dig -3",
      "defined_out": [
        "lower_bound#0 (copy)",
        "state#0"
      ],
      "stack_out": [
        "state#0",
        "lower_bound#0 (copy)"
      ]
    },
    "689": {
      "op": "btoi",
      "defined_out": [
        "state#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "state#0",
        "tmp%0#0"
      ]
    },
    "690": {
      "op": "frame_dig -2",
      "defined_out": [
        "state#0",
        "tmp%0#0",
        "upper_bound#0 (copy)"
      ],
      "stack_out": [
        "state#0",
        "tmp%0#0",
        "upper_bound#0 (copy)"
      ]
    },
    "692": {
      "op": "btoi",
      "defined_out": [
        "state#0",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "state#0",
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "693": {
      "op": "frame_dig -1",
      "defined_out": [
        "length#0 (copy)",
        "state#0",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "state#0",
        "tmp%0#0",
        "tmp%1#0",
        "length#0 (copy)"
      ]
    },
    "695": {
      "op": "btoi",
      "defined_out": [
        "state#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "state#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0"
      ]
    },
    "696": {
      "callsub": "lib_pcg/pcg32.algo.ts::pcg16Random",
      "op": "callsub pcg16Random",
      "defined_out": [
        "newState#0",
        "sequence#0"
      ],
      "stack_out": [
        "newState#0",
        "sequence#0"
      ]
    },
    "699": {
      "op": "bury 1",
      "stack_out": [
        "sequence#0"
      ]
    },
    "701": {
      "retsub": true,
      "op": "retsub"
    },
    "702": {
      "subroutine": "lib_pcg/pcg32.algo.ts::pcg16Init",
      "params": {
        "seed#0": "bytes"
      },
      "block": "pcg16Init",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "705": {
      "op": "frame_dig -1",
      "defined_out": [
        "seed#0 (copy)"
      ],
      "stack_out": [
        "seed#0 (copy)"
      ]
    },
    "707": {
      "callsub": "lib_pcg/pcg32.algo.ts::pcg32Init",
      "op": "callsub pcg32Init",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "710": {
      "retsub": true,
      "op": "retsub"
    },
    "711": {
      "subroutine": "lib_pcg/pcg32.algo.ts::pcg16Random",
      "params": {
        "state#0": "uint64",
        "lowerBound#0": "uint64",
        "upperBound#0": "uint64",
        "length#0": "uint64"
      },
      "block": "pcg16Random",
      "stack_in": [],
      "op": "proto 4 2"
    },
    "714": {
      "op": "bytec_1 // 0x0000"
    },
    "715": {
      "op": "frame_dig -4"
    },
    "717": {
      "op": "pushint 16 // 16"
    },
    "719": {
      "op": "frame_dig -3"
    },
    "721": {
      "op": "frame_dig -2"
    },
    "723": {
      "op": "frame_dig -1",
      "defined_out": [
        "16",
        "length#0 (copy)",
        "lowerBound#0 (copy)",
        "result#0",
        "state#0 (copy)",
        "upperBound#0 (copy)"
      ],
      "stack_out": [
        "result#0",
        "state#0 (copy)",
        "16",
        "lowerBound#0 (copy)",
        "upperBound#0 (copy)",
        "length#0 (copy)"
      ]
    },
    "725": {
      "callsub": "lib_pcg/pcg32.algo.ts::__pcg32BoundedSequence",
      "op": "callsub __pcg32BoundedSequence",
      "defined_out": [
        "newState#0",
        "result#0",
        "sequence#0"
      ],
      "stack_out": [
        "result#0",
        "newState#0",
        "sequence#0"
      ]
    },
    "728": {
      "op": "swap",
      "defined_out": [
        "newState#0",
        "result#0",
        "sequence#0"
      ],
      "stack_out": [
        "result#0",
        "sequence#0",
        "newState#0"
      ]
    },
    "729": {
      "op": "intc_1 // 0",
      "defined_out": [
        "i#0",
        "newState#0",
        "result#0",
        "sequence#0"
      ],
      "stack_out": [
        "result#0",
        "sequence#0",
        "newState#0",
        "i#0"
      ]
    },
    "730": {
      "block": "pcg16Random_while_top@1",
      "stack_in": [
        "result#0",
        "sequence#0",
        "newState#0",
        "i#0"
      ],
      "op": "frame_dig 3",
      "defined_out": [
        "i#0"
      ],
      "stack_out": [
        "result#0",
        "sequence#0",
        "newState#0",
        "i#0",
        "i#0"
      ]
    },
    "732": {
      "op": "frame_dig -1",
      "defined_out": [
        "i#0",
        "length#0 (copy)"
      ],
      "stack_out": [
        "result#0",
        "sequence#0",
        "newState#0",
        "i#0",
        "i#0",
        "length#0 (copy)"
      ]
    },
    "734": {
      "op": "<",
      "defined_out": [
        "i#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "result#0",
        "sequence#0",
        "newState#0",
        "i#0",
        "tmp%0#0"
      ]
    },
    "735": {
      "op": "bz pcg16Random_after_while@4",
      "stack_out": [
        "result#0",
        "sequence#0",
        "newState#0",
        "i#0"
      ]
    },
    "738": {
      "op": "frame_dig 0",
      "defined_out": [
        "i#0",
        "result#0"
      ],
      "stack_out": [
        "result#0",
        "sequence#0",
        "newState#0",
        "i#0",
        "result#0"
      ]
    },
    "740": {
      "op": "extract 2 0",
      "defined_out": [
        "expr_value_trimmed%0#0",
        "i#0",
        "result#0"
      ],
      "stack_out": [
        "result#0",
        "sequence#0",
        "newState#0",
        "i#0",
        "expr_value_trimmed%0#0"
      ]
    },
    "743": {
      "op": "frame_dig 3",
      "stack_out": [
        "result#0",
        "sequence#0",
        "newState#0",
        "i#0",
        "expr_value_trimmed%0#0",
        "i#0"
      ]
    },
    "745": {
      "op": "dup",
      "defined_out": [
        "expr_value_trimmed%0#0",
        "i#0",
        "i#0 (copy)",
        "result#0"
      ],
      "stack_out": [
        "result#0",
        "sequence#0",
        "newState#0",
        "i#0",
        "expr_value_trimmed%0#0",
        "i#0 (copy)",
        "i#0 (copy)"
      ]
    },
    "746": {
      "op": "cover 2",
      "stack_out": [
        "result#0",
        "sequence#0",
        "newState#0",
        "i#0",
        "i#0",
        "expr_value_trimmed%0#0",
        "i#0 (copy)"
      ]
    },
    "748": {
      "op": "intc_2 // 2",
      "defined_out": [
        "2",
        "expr_value_trimmed%0#0",
        "i#0",
        "i#0 (copy)",
        "result#0"
      ],
      "stack_out": [
        "result#0",
        "sequence#0",
        "newState#0",
        "i#0",
        "i#0",
        "expr_value_trimmed%0#0",
        "i#0 (copy)",
        "2"
      ]
    },
    "749": {
      "op": "*",
      "defined_out": [
        "expr_value_trimmed%0#0",
        "i#0",
        "result#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "result#0",
        "sequence#0",
        "newState#0",
        "i#0",
        "i#0",
        "expr_value_trimmed%0#0",
        "tmp%1#0"
      ]
    },
    "750": {
      "op": "intc_2 // 2",
      "stack_out": [
        "result#0",
        "sequence#0",
        "newState#0",
        "i#0",
        "i#0",
        "expr_value_trimmed%0#0",
        "tmp%1#0",
        "2"
      ]
    },
    "751": {
      "op": "+",
      "defined_out": [
        "expr_value_trimmed%0#0",
        "i#0",
        "result#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "result#0",
        "sequence#0",
        "newState#0",
        "i#0",
        "i#0",
        "expr_value_trimmed%0#0",
        "tmp%2#0"
      ]
    },
    "752": {
      "op": "frame_dig 1",
      "defined_out": [
        "expr_value_trimmed%0#0",
        "i#0",
        "result#0",
        "sequence#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "result#0",
        "sequence#0",
        "newState#0",
        "i#0",
        "i#0",
        "expr_value_trimmed%0#0",
        "tmp%2#0",
        "sequence#0"
      ]
    },
    "754": {
      "op": "swap",
      "stack_out": [
        "result#0",
        "sequence#0",
        "newState#0",
        "i#0",
        "i#0",
        "expr_value_trimmed%0#0",
        "sequence#0",
        "tmp%2#0"
      ]
    },
    "755": {
      "op": "extract_uint16",
      "defined_out": [
        "expr_value_trimmed%0#0",
        "i#0",
        "result#0",
        "sequence#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "result#0",
        "sequence#0",
        "newState#0",
        "i#0",
        "i#0",
        "expr_value_trimmed%0#0",
        "to_encode%0#0"
      ]
    },
    "756": {
      "op": "itob",
      "defined_out": [
        "expr_value_trimmed%0#0",
        "i#0",
        "result#0",
        "sequence#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "result#0",
        "sequence#0",
        "newState#0",
        "i#0",
        "i#0",
        "expr_value_trimmed%0#0",
        "val_as_bytes%0#0"
      ]
    },
    "757": {
      "op": "extract 6 2",
      "defined_out": [
        "expr_value_trimmed%0#0",
        "i#0",
        "result#0",
        "sequence#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "result#0",
        "sequence#0",
        "newState#0",
        "i#0",
        "i#0",
        "expr_value_trimmed%0#0",
        "tmp%3#0"
      ]
    },
    "760": {
      "op": "concat",
      "defined_out": [
        "concatenated%0#0",
        "i#0",
        "result#0",
        "sequence#0"
      ],
      "stack_out": [
        "result#0",
        "sequence#0",
        "newState#0",
        "i#0",
        "i#0",
        "concatenated%0#0"
      ]
    },
    "761": {
      "op": "dup",
      "defined_out": [
        "concatenated%0#0",
        "concatenated%0#0 (copy)",
        "i#0",
        "result#0",
        "sequence#0"
      ],
      "stack_out": [
        "result#0",
        "sequence#0",
        "newState#0",
        "i#0",
        "i#0",
        "concatenated%0#0",
        "concatenated%0#0 (copy)"
      ]
    },
    "762": {
      "op": "len",
      "defined_out": [
        "byte_len%0#0",
        "concatenated%0#0",
        "i#0",
        "result#0",
        "sequence#0"
      ],
      "stack_out": [
        "result#0",
        "sequence#0",
        "newState#0",
        "i#0",
        "i#0",
        "concatenated%0#0",
        "byte_len%0#0"
      ]
    },
    "763": {
      "op": "intc_2 // 2",
      "stack_out": [
        "result#0",
        "sequence#0",
        "newState#0",
        "i#0",
        "i#0",
        "concatenated%0#0",
        "byte_len%0#0",
        "2"
      ]
    },
    "764": {
      "op": "/",
      "defined_out": [
        "concatenated%0#0",
        "i#0",
        "len_%0#0",
        "result#0",
        "sequence#0"
      ],
      "stack_out": [
        "result#0",
        "sequence#0",
        "newState#0",
        "i#0",
        "i#0",
        "concatenated%0#0",
        "len_%0#0"
      ]
    },
    "765": {
      "op": "itob",
      "defined_out": [
        "as_bytes%0#0",
        "concatenated%0#0",
        "i#0",
        "result#0",
        "sequence#0"
      ],
      "stack_out": [
        "result#0",
        "sequence#0",
        "newState#0",
        "i#0",
        "i#0",
        "concatenated%0#0",
        "as_bytes%0#0"
      ]
    },
    "766": {
      "op": "extract 6 2",
      "defined_out": [
        "concatenated%0#0",
        "i#0",
        "len_16_bit%0#0",
        "result#0",
        "sequence#0"
      ],
      "stack_out": [
        "result#0",
        "sequence#0",
        "newState#0",
        "i#0",
        "i#0",
        "concatenated%0#0",
        "len_16_bit%0#0"
      ]
    },
    "769": {
      "op": "swap",
      "stack_out": [
        "result#0",
        "sequence#0",
        "newState#0",
        "i#0",
        "i#0",
        "len_16_bit%0#0",
        "concatenated%0#0"
      ]
    },
    "770": {
      "op": "concat",
      "stack_out": [
        "result#0",
        "sequence#0",
        "newState#0",
        "i#0",
        "i#0",
        "result#0"
      ]
    },
    "771": {
      "op": "frame_bury 0",
      "defined_out": [
        "i#0",
        "result#0",
        "sequence#0"
      ],
      "stack_out": [
        "result#0",
        "sequence#0",
        "newState#0",
        "i#0",
        "i#0"
      ]
    },
    "773": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "i#0",
        "result#0",
        "sequence#0"
      ],
      "stack_out": [
        "result#0",
        "sequence#0",
        "newState#0",
        "i#0",
        "i#0",
        "1"
      ]
    },
    "774": {
      "op": "+",
      "stack_out": [
        "result#0",
        "sequence#0",
        "newState#0",
        "i#0",
        "i#0"
      ]
    },
    "775": {
      "op": "frame_bury 3",
      "defined_out": [
        "i#0",
        "result#0",
        "sequence#0"
      ],
      "stack_out": [
        "result#0",
        "sequence#0",
        "newState#0",
        "i#0"
      ]
    },
    "777": {
      "op": "b pcg16Random_while_top@1"
    },
    "780": {
      "block": "pcg16Random_after_while@4",
      "stack_in": [
        "result#0",
        "sequence#0",
        "newState#0",
        "i#0"
      ],
      "op": "frame_dig 2",
      "defined_out": [
        "newState#0"
      ],
      "stack_out": [
        "result#0",
        "sequence#0",
        "newState#0",
        "i#0",
        "newState#0"
      ]
    },
    "782": {
      "op": "frame_dig 0",
      "defined_out": [
        "newState#0",
        "result#0"
      ],
      "stack_out": [
        "result#0",
        "sequence#0",
        "newState#0",
        "i#0",
        "newState#0",
        "result#0"
      ]
    },
    "784": {
      "op": "frame_bury 1"
    },
    "786": {
      "op": "frame_bury 0"
    },
    "788": {
      "retsub": true,
      "op": "retsub"
    },
    "789": {
      "subroutine": "smart_contracts/lib_pcg32_exposer_ts/contract.algo.ts::LibPcg32ExposerTs.bounded_rand_uint8",
      "params": {
        "seed#0": "bytes",
        "lower_bound#0": "bytes",
        "upper_bound#0": "bytes",
        "length#0": "bytes"
      },
      "block": "bounded_rand_uint8",
      "stack_in": [],
      "op": "proto 4 1"
    },
    "792": {
      "op": "frame_dig -4",
      "defined_out": [
        "seed#0 (copy)"
      ],
      "stack_out": [
        "seed#0 (copy)"
      ]
    },
    "794": {
      "callsub": "lib_pcg/pcg32.algo.ts::pcg8Init",
      "op": "callsub pcg8Init",
      "defined_out": [
        "state#0"
      ],
      "stack_out": [
        "state#0"
      ]
    },
    "797": {
      "op": "frame_dig -3",
      "defined_out": [
        "lower_bound#0 (copy)",
        "state#0"
      ],
      "stack_out": [
        "state#0",
        "lower_bound#0 (copy)"
      ]
    },
    "799": {
      "op": "btoi",
      "defined_out": [
        "state#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "state#0",
        "tmp%0#0"
      ]
    },
    "800": {
      "op": "frame_dig -2",
      "defined_out": [
        "state#0",
        "tmp%0#0",
        "upper_bound#0 (copy)"
      ],
      "stack_out": [
        "state#0",
        "tmp%0#0",
        "upper_bound#0 (copy)"
      ]
    },
    "802": {
      "op": "btoi",
      "defined_out": [
        "state#0",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "state#0",
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "803": {
      "op": "frame_dig -1",
      "defined_out": [
        "length#0 (copy)",
        "state#0",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "state#0",
        "tmp%0#0",
        "tmp%1#0",
        "length#0 (copy)"
      ]
    },
    "805": {
      "op": "btoi",
      "defined_out": [
        "state#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "state#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0"
      ]
    },
    "806": {
      "callsub": "lib_pcg/pcg32.algo.ts::pcg8Random",
      "op": "callsub pcg8Random",
      "defined_out": [
        "newState#0",
        "sequence#0"
      ],
      "stack_out": [
        "newState#0",
        "sequence#0"
      ]
    },
    "809": {
      "op": "bury 1",
      "stack_out": [
        "sequence#0"
      ]
    },
    "811": {
      "retsub": true,
      "op": "retsub"
    },
    "812": {
      "subroutine": "lib_pcg/pcg32.algo.ts::pcg8Init",
      "params": {
        "seed#0": "bytes"
      },
      "block": "pcg8Init",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "815": {
      "op": "frame_dig -1",
      "defined_out": [
        "seed#0 (copy)"
      ],
      "stack_out": [
        "seed#0 (copy)"
      ]
    },
    "817": {
      "callsub": "lib_pcg/pcg32.algo.ts::pcg32Init",
      "op": "callsub pcg32Init",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "820": {
      "retsub": true,
      "op": "retsub"
    },
    "821": {
      "subroutine": "lib_pcg/pcg32.algo.ts::pcg8Random",
      "params": {
        "state#0": "uint64",
        "lowerBound#0": "uint64",
        "upperBound#0": "uint64",
        "length#0": "uint64"
      },
      "block": "pcg8Random",
      "stack_in": [],
      "op": "proto 4 2"
    },
    "824": {
      "op": "bytec_1 // 0x0000"
    },
    "825": {
      "op": "frame_dig -4"
    },
    "827": {
      "op": "intc_3 // 8"
    },
    "828": {
      "op": "frame_dig -3"
    },
    "830": {
      "op": "frame_dig -2"
    },
    "832": {
      "op": "frame_dig -1",
      "defined_out": [
        "8",
        "length#0 (copy)",
        "lowerBound#0 (copy)",
        "result#0",
        "state#0 (copy)",
        "upperBound#0 (copy)"
      ],
      "stack_out": [
        "result#0",
        "state#0 (copy)",
        "8",
        "lowerBound#0 (copy)",
        "upperBound#0 (copy)",
        "length#0 (copy)"
      ]
    },
    "834": {
      "callsub": "lib_pcg/pcg32.algo.ts::__pcg32BoundedSequence",
      "op": "callsub __pcg32BoundedSequence",
      "defined_out": [
        "newState#0",
        "result#0",
        "sequence#0"
      ],
      "stack_out": [
        "result#0",
        "newState#0",
        "sequence#0"
      ]
    },
    "837": {
      "op": "swap",
      "defined_out": [
        "newState#0",
        "result#0",
        "sequence#0"
      ],
      "stack_out": [
        "result#0",
        "sequence#0",
        "newState#0"
      ]
    },
    "838": {
      "op": "intc_1 // 0",
      "defined_out": [
        "i#0",
        "newState#0",
        "result#0",
        "sequence#0"
      ],
      "stack_out": [
        "result#0",
        "sequence#0",
        "newState#0",
        "i#0"
      ]
    },
    "839": {
      "block": "pcg8Random_while_top@1",
      "stack_in": [
        "result#0",
        "sequence#0",
        "newState#0",
        "i#0"
      ],
      "op": "frame_dig 3",
      "defined_out": [
        "i#0"
      ],
      "stack_out": [
        "result#0",
        "sequence#0",
        "newState#0",
        "i#0",
        "i#0"
      ]
    },
    "841": {
      "op": "frame_dig -1",
      "defined_out": [
        "i#0",
        "length#0 (copy)"
      ],
      "stack_out": [
        "result#0",
        "sequence#0",
        "newState#0",
        "i#0",
        "i#0",
        "length#0 (copy)"
      ]
    },
    "843": {
      "op": "<",
      "defined_out": [
        "i#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "result#0",
        "sequence#0",
        "newState#0",
        "i#0",
        "tmp%0#0"
      ]
    },
    "844": {
      "op": "bz pcg8Random_after_while@4",
      "stack_out": [
        "result#0",
        "sequence#0",
        "newState#0",
        "i#0"
      ]
    },
    "847": {
      "op": "frame_dig 0",
      "defined_out": [
        "i#0",
        "result#0"
      ],
      "stack_out": [
        "result#0",
        "sequence#0",
        "newState#0",
        "i#0",
        "result#0"
      ]
    },
    "849": {
      "op": "extract 2 0",
      "defined_out": [
        "expr_value_trimmed%0#0",
        "i#0",
        "result#0"
      ],
      "stack_out": [
        "result#0",
        "sequence#0",
        "newState#0",
        "i#0",
        "expr_value_trimmed%0#0"
      ]
    },
    "852": {
      "op": "intc_2 // 2",
      "defined_out": [
        "2",
        "expr_value_trimmed%0#0",
        "i#0",
        "result#0"
      ],
      "stack_out": [
        "result#0",
        "sequence#0",
        "newState#0",
        "i#0",
        "expr_value_trimmed%0#0",
        "2"
      ]
    },
    "853": {
      "op": "frame_dig 3",
      "stack_out": [
        "result#0",
        "sequence#0",
        "newState#0",
        "i#0",
        "expr_value_trimmed%0#0",
        "2",
        "i#0"
      ]
    },
    "855": {
      "op": "dup",
      "defined_out": [
        "2",
        "expr_value_trimmed%0#0",
        "i#0",
        "i#0 (copy)",
        "result#0"
      ],
      "stack_out": [
        "result#0",
        "sequence#0",
        "newState#0",
        "i#0",
        "expr_value_trimmed%0#0",
        "2",
        "i#0 (copy)",
        "i#0 (copy)"
      ]
    },
    "856": {
      "op": "cover 3",
      "stack_out": [
        "result#0",
        "sequence#0",
        "newState#0",
        "i#0",
        "i#0",
        "expr_value_trimmed%0#0",
        "2",
        "i#0 (copy)"
      ]
    },
    "858": {
      "op": "+",
      "defined_out": [
        "expr_value_trimmed%0#0",
        "i#0",
        "result#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "result#0",
        "sequence#0",
        "newState#0",
        "i#0",
        "i#0",
        "expr_value_trimmed%0#0",
        "tmp%1#0"
      ]
    },
    "859": {
      "op": "frame_dig 1",
      "defined_out": [
        "expr_value_trimmed%0#0",
        "i#0",
        "result#0",
        "sequence#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "result#0",
        "sequence#0",
        "newState#0",
        "i#0",
        "i#0",
        "expr_value_trimmed%0#0",
        "tmp%1#0",
        "sequence#0"
      ]
    },
    "861": {
      "op": "swap",
      "stack_out": [
        "result#0",
        "sequence#0",
        "newState#0",
        "i#0",
        "i#0",
        "expr_value_trimmed%0#0",
        "sequence#0",
        "tmp%1#0"
      ]
    },
    "862": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "expr_value_trimmed%0#0",
        "i#0",
        "result#0",
        "sequence#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "result#0",
        "sequence#0",
        "newState#0",
        "i#0",
        "i#0",
        "expr_value_trimmed%0#0",
        "sequence#0",
        "tmp%1#0",
        "1"
      ]
    },
    "863": {
      "op": "extract3",
      "defined_out": [
        "expr_value_trimmed%0#0",
        "i#0",
        "result#0",
        "sequence#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "result#0",
        "sequence#0",
        "newState#0",
        "i#0",
        "i#0",
        "expr_value_trimmed%0#0",
        "tmp%2#0"
      ]
    },
    "864": {
      "op": "btoi",
      "defined_out": [
        "expr_value_trimmed%0#0",
        "i#0",
        "result#0",
        "sequence#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "result#0",
        "sequence#0",
        "newState#0",
        "i#0",
        "i#0",
        "expr_value_trimmed%0#0",
        "to_encode%0#0"
      ]
    },
    "865": {
      "op": "itob",
      "defined_out": [
        "expr_value_trimmed%0#0",
        "i#0",
        "result#0",
        "sequence#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "result#0",
        "sequence#0",
        "newState#0",
        "i#0",
        "i#0",
        "expr_value_trimmed%0#0",
        "val_as_bytes%0#0"
      ]
    },
    "866": {
      "op": "extract 7 1",
      "defined_out": [
        "expr_value_trimmed%0#0",
        "i#0",
        "result#0",
        "sequence#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "result#0",
        "sequence#0",
        "newState#0",
        "i#0",
        "i#0",
        "expr_value_trimmed%0#0",
        "tmp%3#0"
      ]
    },
    "869": {
      "op": "concat",
      "defined_out": [
        "concatenated%0#0",
        "i#0",
        "result#0",
        "sequence#0"
      ],
      "stack_out": [
        "result#0",
        "sequence#0",
        "newState#0",
        "i#0",
        "i#0",
        "concatenated%0#0"
      ]
    },
    "870": {
      "op": "dup",
      "defined_out": [
        "concatenated%0#0",
        "concatenated%0#0 (copy)",
        "i#0",
        "result#0",
        "sequence#0"
      ],
      "stack_out": [
        "result#0",
        "sequence#0",
        "newState#0",
        "i#0",
        "i#0",
        "concatenated%0#0",
        "concatenated%0#0 (copy)"
      ]
    },
    "871": {
      "op": "len",
      "defined_out": [
        "concatenated%0#0",
        "i#0",
        "len_%0#0",
        "result#0",
        "sequence#0"
      ],
      "stack_out": [
        "result#0",
        "sequence#0",
        "newState#0",
        "i#0",
        "i#0",
        "concatenated%0#0",
        "len_%0#0"
      ]
    },
    "872": {
      "op": "itob",
      "defined_out": [
        "as_bytes%0#0",
        "concatenated%0#0",
        "i#0",
        "result#0",
        "sequence#0"
      ],
      "stack_out": [
        "result#0",
        "sequence#0",
        "newState#0",
        "i#0",
        "i#0",
        "concatenated%0#0",
        "as_bytes%0#0"
      ]
    },
    "873": {
      "op": "extract 6 2",
      "defined_out": [
        "concatenated%0#0",
        "i#0",
        "len_16_bit%0#0",
        "result#0",
        "sequence#0"
      ],
      "stack_out": [
        "result#0",
        "sequence#0",
        "newState#0",
        "i#0",
        "i#0",
        "concatenated%0#0",
        "len_16_bit%0#0"
      ]
    },
    "876": {
      "op": "swap",
      "stack_out": [
        "result#0",
        "sequence#0",
        "newState#0",
        "i#0",
        "i#0",
        "len_16_bit%0#0",
        "concatenated%0#0"
      ]
    },
    "877": {
      "op": "concat",
      "stack_out": [
        "result#0",
        "sequence#0",
        "newState#0",
        "i#0",
        "i#0",
        "result#0"
      ]
    },
    "878": {
      "op": "frame_bury 0",
      "defined_out": [
        "i#0",
        "result#0",
        "sequence#0"
      ],
      "stack_out": [
        "result#0",
        "sequence#0",
        "newState#0",
        "i#0",
        "i#0"
      ]
    },
    "880": {
      "op": "intc_0 // 1",
      "stack_out": [
        "result#0",
        "sequence#0",
        "newState#0",
        "i#0",
        "i#0",
        "1"
      ]
    },
    "881": {
      "op": "+",
      "stack_out": [
        "result#0",
        "sequence#0",
        "newState#0",
        "i#0",
        "i#0"
      ]
    },
    "882": {
      "op": "frame_bury 3",
      "defined_out": [
        "i#0",
        "result#0",
        "sequence#0"
      ],
      "stack_out": [
        "result#0",
        "sequence#0",
        "newState#0",
        "i#0"
      ]
    },
    "884": {
      "op": "b pcg8Random_while_top@1"
    },
    "887": {
      "block": "pcg8Random_after_while@4",
      "stack_in": [
        "result#0",
        "sequence#0",
        "newState#0",
        "i#0"
      ],
      "op": "frame_dig 2",
      "defined_out": [
        "newState#0"
      ],
      "stack_out": [
        "result#0",
        "sequence#0",
        "newState#0",
        "i#0",
        "newState#0"
      ]
    },
    "889": {
      "op": "frame_dig 0",
      "defined_out": [
        "newState#0",
        "result#0"
      ],
      "stack_out": [
        "result#0",
        "sequence#0",
        "newState#0",
        "i#0",
        "newState#0",
        "result#0"
      ]
    },
    "891": {
      "op": "frame_bury 1"
    },
    "893": {
      "op": "frame_bury 0"
    },
    "895": {
      "retsub": true,
      "op": "retsub"
    },
    "896": {
      "subroutine": "smart_contracts/lib_pcg32_exposer_ts/contract.algo.ts::LibPcg32ExposerTs.update",
      "params": {},
      "block": "update",
      "stack_in": [],
      "op": "proto 0 0"
    },
    "899": {
      "op": "txn Sender"
    },
    "901": {
      "op": "global CreatorAddress",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "903": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "904": {
      "op": "assert",
      "stack_out": []
    },
    "905": {
      "retsub": true,
      "op": "retsub"
    }
  }
}