#pragma version 10
#pragma typetrack false

// @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram() -> uint64:
main:
    intcblock 6364136223846793005 0 16 1 1442695040888963407 1442695040888963413 1442695040888963411 1442695040888963409 4294967295
    bytecblock 0x 0x01 0x0100000000000000000000000000000000 0xffffffffffffffffffffffffffffffff
    txn NumAppArgs
    bz main_bare_routing@6
    pushbytes 0xc35e095d // method "bounded_rand_uint128(byte[32],uint128,uint128,uint16)uint128[]"
    txna ApplicationArgs 0
    match main_bounded_rand_uint128_route@3

main_after_if_else@11:
    intc_1 // 0
    return

main_bounded_rand_uint128_route@3:
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    txna ApplicationArgs 1
    txna ApplicationArgs 2
    txna ApplicationArgs 3
    txna ApplicationArgs 4
    callsub bounded_rand_uint128
    pushbytes 0x151f7c75
    swap
    concat
    log
    intc_3 // 1
    return

main_bare_routing@6:
    pushint 4 // 4
    intc_1 // 0
    txn OnCompletion
    match main_update@7 main___algots__.defaultCreate@8
    b main_after_if_else@11

main___algots__.defaultCreate@8:
    txn ApplicationID
    !
    assert // can only call when creating
    intc_3 // 1
    return

main_update@7:
    txn ApplicationID
    assert // can only call when not creating
    callsub update
    intc_3 // 1
    return


// lib_pcg/pcg32.algo.ts::__pcg32Output(state: uint64) -> uint64:
__pcg32Output:
    proto 1 1
    frame_dig -1
    pushint 18 // 18
    shr
    frame_dig -1
    ^
    pushint 27 // 27
    shr
    intc 8 // 4294967295
    &
    frame_dig -1
    pushint 59 // 59
    shr
    dup2
    shr
    swap
    ~
    intc_3 // 1
    addw
    bury 1
    pushint 31 // 31
    &
    uncover 2
    swap
    shl
    intc 8 // 4294967295
    &
    |
    retsub


// lib_pcg/pcg128.algo.ts::__pcg128UnboundedRandom(state.0: uint64, state.1: uint64, state.2: uint64, state.3: uint64) -> uint64, uint64, uint64, uint64, bytes:
__pcg128UnboundedRandom:
    proto 4 5
    bytec_0 // ""
    dup
    frame_dig -4
    intc_0 // 6364136223846793005
    mulw
    bury 1
    intc 4 // 1442695040888963407
    addw
    dup
    uncover 2
    pop
    bnz __pcg128UnboundedRandom_ternary_false@2
    pushint 2885390081777926818 // 2885390081777926818

__pcg128UnboundedRandom_ternary_merge@3:
    frame_dig -3
    intc_0 // 6364136223846793005
    mulw
    bury 1
    addw
    dup
    cover 2
    frame_bury 1
    pop
    bnz __pcg128UnboundedRandom_ternary_false@5
    pushint 2885390081777926822 // 2885390081777926822

__pcg128UnboundedRandom_ternary_merge@6:
    frame_dig -2
    intc_0 // 6364136223846793005
    mulw
    bury 1
    addw
    dup
    cover 2
    frame_bury 0
    pop
    bnz __pcg128UnboundedRandom_ternary_false@8
    pushint 2885390081777926826 // 2885390081777926826

__pcg128UnboundedRandom_ternary_merge@9:
    frame_dig -1
    intc_0 // 6364136223846793005
    mulw
    bury 1
    addw
    bury 1
    frame_dig -4
    callsub __pcg32Output
    pushint 32 // 32
    shl
    frame_dig -3
    callsub __pcg32Output
    |
    itob
    frame_dig -2
    callsub __pcg32Output
    pushint 32 // 32
    shl
    frame_dig -1
    callsub __pcg32Output
    |
    itob
    concat
    frame_dig 2
    frame_dig 1
    frame_dig 0
    uncover 4
    uncover 4
    uncover 7
    uncover 7
    uncover 7
    retsub

__pcg128UnboundedRandom_ternary_false@8:
    intc 5 // 1442695040888963413
    b __pcg128UnboundedRandom_ternary_merge@9

__pcg128UnboundedRandom_ternary_false@5:
    intc 6 // 1442695040888963411
    b __pcg128UnboundedRandom_ternary_merge@6

__pcg128UnboundedRandom_ternary_false@2:
    intc 7 // 1442695040888963409
    b __pcg128UnboundedRandom_ternary_merge@3


// smart_contracts/lib_pcg128_exposer_algo_ts/contract.algo.ts::LibPcg128ExposerAlgoTs.bounded_rand_uint128(seed: bytes, lower_bound: bytes, upper_bound: bytes, length: bytes) -> bytes:
bounded_rand_uint128:
    proto 4 1
    intc_1 // 0
    dupn 2
    bytec_0 // ""
    dupn 8
    frame_dig -4
    len
    pushint 32 // 32
    ==
    assert
    frame_dig -4
    intc_1 // 0
    extract_uint64
    intc_1 // 0
    intc_0 // 6364136223846793005
    mulw
    bury 1
    dup
    intc 4 // 1442695040888963407
    addw
    bury 1
    uncover 2
    addw
    bury 1
    intc_0 // 6364136223846793005
    mulw
    bury 1
    intc 4 // 1442695040888963407
    addw
    cover 2
    pop
    frame_dig -4
    pushint 8 // 8
    extract_uint64
    dig 1
    intc 7 // 1442695040888963409
    addw
    bury 1
    addw
    bury 1
    intc_0 // 6364136223846793005
    mulw
    bury 1
    intc 7 // 1442695040888963409
    addw
    cover 2
    pop
    frame_dig -4
    intc_2 // 16
    extract_uint64
    dig 1
    intc 6 // 1442695040888963411
    addw
    bury 1
    addw
    bury 1
    intc_0 // 6364136223846793005
    mulw
    bury 1
    intc 6 // 1442695040888963411
    addw
    cover 2
    pop
    frame_dig -4
    pushint 24 // 24
    extract_uint64
    swap
    intc 5 // 1442695040888963413
    addw
    bury 1
    addw
    bury 1
    intc_0 // 6364136223846793005
    mulw
    bury 1
    intc 5 // 1442695040888963413
    addw
    bury 1
    frame_dig -1
    btoi
    pushbytes 0x0000
    frame_dig -3
    bytec_0 // 0x
    b==
    bz bounded_rand_uint128_else_body@9
    frame_dig -2
    bytec_0 // 0x
    b==
    bz bounded_rand_uint128_else_body@9
    intc_1 // 0
    frame_bury 3
    frame_dig 15
    frame_bury 11
    frame_dig 14
    frame_bury 10
    frame_dig 13
    frame_bury 9
    frame_dig 12
    frame_bury 8

bounded_rand_uint128_while_top@6:
    frame_dig 3
    frame_dig 16
    <
    bz bounded_rand_uint128_after_if_else@20
    frame_dig 8
    frame_dig 9
    frame_dig 10
    frame_dig 11
    callsub __pcg128UnboundedRandom
    frame_dig 17
    extract 2 0
    dig 1
    len
    intc_2 // 16
    <=
    assert // overflow
    intc_2 // 16
    bzero
    uncover 2
    b|
    concat
    dup
    len
    intc_2 // 16
    /
    itob
    extract 6 2
    swap
    concat
    frame_bury 17
    frame_dig 3
    intc_3 // 1
    +
    frame_bury 3
    frame_bury 11
    frame_bury 10
    frame_bury 9
    frame_bury 8
    b bounded_rand_uint128_while_top@6

bounded_rand_uint128_after_if_else@20:
    frame_dig 17
    frame_bury 0
    retsub

bounded_rand_uint128_else_body@9:
    frame_dig -2
    bytec_0 // 0x
    b!=
    bz bounded_rand_uint128_else_body@11
    frame_dig -2
    bytec_1 // 0x01
    b>
    assert
    frame_dig -2
    bytec_2 // 0x0100000000000000000000000000000000
    b<
    assert
    frame_dig -2
    bytec_1 // 0x01
    b-
    frame_dig -3
    b>
    assert
    frame_dig -2
    frame_dig -3
    b-
    frame_bury 0

bounded_rand_uint128_after_if_else@12:
    frame_dig 0
    dup
    b~
    bytec_1 // 0x01
    b+
    bytec_3 // 0xffffffffffffffffffffffffffffffff
    b&
    swap
    b%
    frame_bury 2
    intc_1 // 0
    frame_bury 4
    frame_dig 15
    frame_bury 11
    frame_dig 14
    frame_bury 10
    frame_dig 13
    frame_bury 9
    frame_dig 12
    frame_bury 8

bounded_rand_uint128_while_top@13:
    frame_dig 4
    frame_dig 16
    <
    bz bounded_rand_uint128_after_if_else@20

bounded_rand_uint128_while_top@15:
    frame_dig 8
    frame_dig 9
    frame_dig 10
    frame_dig 11
    callsub __pcg128UnboundedRandom
    dup
    cover 5
    frame_bury 1
    cover 4
    frame_bury 7
    frame_bury 6
    frame_bury 5
    frame_dig 2
    b>=
    bz bounded_rand_uint128_after_if_else@17
    frame_dig 17
    extract 2 0
    frame_dig 1
    frame_dig 0
    b%
    frame_dig -3
    b+
    dup
    len
    intc_2 // 16
    <=
    assert // overflow
    intc_2 // 16
    bzero
    b|
    concat
    dup
    len
    intc_2 // 16
    /
    itob
    extract 6 2
    swap
    concat
    frame_bury 17
    frame_dig 4
    intc_3 // 1
    +
    frame_bury 4
    frame_bury 11
    frame_dig 7
    frame_bury 10
    frame_dig 6
    frame_bury 9
    frame_dig 5
    frame_bury 8
    b bounded_rand_uint128_while_top@13

bounded_rand_uint128_after_if_else@17:
    frame_bury 11
    frame_dig 7
    frame_bury 10
    frame_dig 6
    frame_bury 9
    frame_dig 5
    frame_bury 8
    b bounded_rand_uint128_while_top@15

bounded_rand_uint128_else_body@11:
    frame_dig -3
    bytec_3 // 0xffffffffffffffffffffffffffffffff
    b<
    assert
    bytec_2 // 0x0100000000000000000000000000000000
    frame_dig -3
    b-
    frame_bury 0
    b bounded_rand_uint128_after_if_else@12


// smart_contracts/lib_pcg128_exposer_algo_ts/contract.algo.ts::LibPcg128ExposerAlgoTs.update() -> void:
update:
    txn Sender
    global CreatorAddress
    ==
    assert
    retsub
