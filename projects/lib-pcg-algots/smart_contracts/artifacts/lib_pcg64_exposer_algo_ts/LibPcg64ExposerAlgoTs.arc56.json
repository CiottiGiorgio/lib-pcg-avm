{
    "name": "LibPcg64ExposerAlgoTs",
    "structs": {},
    "methods": [
        {
            "name": "bounded_rand_uint64",
            "args": [
                {
                    "type": "byte[16]",
                    "name": "seed"
                },
                {
                    "type": "uint64",
                    "name": "lower_bound"
                },
                {
                    "type": "uint64",
                    "name": "upper_bound"
                },
                {
                    "type": "uint16",
                    "name": "length"
                }
            ],
            "returns": {
                "type": "uint64[]"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 0
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {},
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": [
            "UpdateApplication"
        ]
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        60
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        107
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        63,
                        112
                    ],
                    "errorMessage": "can only call when not creating"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "byteCode": {
        "approval": "CiAGAQCt/tXk1IX9qFjPgp677+/eghTRgp677+/eghT/////DzEbQQAwgAS6VoLONhoAjgEAAiNDMRkURDEYRDYaATYaAjYaAzYaBIgAkIAEFR98dUxQsCJDgQQjMRmOAgAJAANC/88xGBREIkMxGESIAaQiQ4oBAYv/gRKRi/8bgRuRIQUai/+BO5FKkUwcIh5FAYEfGk8CTJAhBRoZiYoCA4v+JB1FASUeSU8CSEAAKIGihbz23t+9hSiL/yQdRQEeRQGL/oj/rIEgkIv/iP+kGYsATgJPA4khBEL/3YoEAYAARweL/CNbIyQdRQFJJR5FAU8CHkUBJB1FASUeTgJIi/yBCFtMIQQeRQEeRQEkHUUBIQQeRQGL/RdJi/4XTIv/F0yAAgAATEAARosLQABBI4wCiwmMBosIjAWLAosMDEEAKYsFiwaI/1SLDVcCAEwWUEkVgQgKFlcGAkxQjA2LAiIIjAKMBowFQv/Piw2MAImLC0EAfIsLSSINREkiCYsKSU8CDEQJjACLAEkcIh5FAUwYjAcjjAOLCYwGiwiMBYsDiwwMQf/EiwWLBoj+70lOA4wBTgKMBIsHD0EAK4sNVwIAiwGLABiLCggWUEkVgQgKFlcGAkxQjA2LAyIIjAOMBosEjAVC/7eMBosEjAVC/7aLCkmB////////////AQxEFoAJAQAAAAAAAAAATKEXjABC/3MxADIJEkSJ",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 4,
            "minor": 7,
            "patch": 0
        }
    },
    "events": [],
    "templateVariables": {}
}