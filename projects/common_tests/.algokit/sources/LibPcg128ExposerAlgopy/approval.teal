#pragma version 10

smart_contracts.lib_pcg128_exposer.contract.LibPcg128ExposerAlgopy.approval_program:
    // smart_contracts/lib_pcg128_exposer/contract.py:8
    // class LibPcg128ExposerAlgopy(arc4.ARC4Contract):
    txn NumAppArgs
    bz main_bare_routing@5
    method "bounded_rand_uint128(byte[32],uint128,uint128,uint16)uint128[]"
    txna ApplicationArgs 0
    match main_bounded_rand_uint128_route@2
    err // reject transaction

main_bounded_rand_uint128_route@2:
    // smart_contracts/lib_pcg128_exposer/contract.py:9
    // @arc4.abimethod
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // smart_contracts/lib_pcg128_exposer/contract.py:8
    // class LibPcg128ExposerAlgopy(arc4.ARC4Contract):
    txna ApplicationArgs 1
    txna ApplicationArgs 2
    txna ApplicationArgs 3
    txna ApplicationArgs 4
    // smart_contracts/lib_pcg128_exposer/contract.py:9
    // @arc4.abimethod
    callsub bounded_rand_uint128
    byte 0x151f7c75
    swap
    concat
    log
    int 1
    return

main_bare_routing@5:
    // smart_contracts/lib_pcg128_exposer/contract.py:8
    // class LibPcg128ExposerAlgopy(arc4.ARC4Contract):
    int 0
    int 4
    txn OnCompletion
    match main_create@6 main_update@7
    err // reject transaction

main_create@6:
    // smart_contracts/lib_pcg128_exposer/contract.py:8
    // class LibPcg128ExposerAlgopy(arc4.ARC4Contract):
    txn ApplicationID
    !
    assert // is creating
    int 1
    return

main_update@7:
    // smart_contracts/lib_pcg128_exposer/contract.py:25
    // @arc4.baremethod(allow_actions=["UpdateApplication"])
    txn ApplicationID
    assert // is not creating
    // smart_contracts/lib_pcg128_exposer/contract.py:25-26
    // @arc4.baremethod(allow_actions=["UpdateApplication"])
    // def update(self) -> None:
    callsub update
    int 1
    return


// smart_contracts.lib_pcg128_exposer.contract.LibPcg128ExposerAlgopy.bounded_rand_uint128(seed: bytes, lower_bound: bytes, upper_bound: bytes, length: bytes) -> bytes:
bounded_rand_uint128:
    // smart_contracts/lib_pcg128_exposer/contract.py:9-16
    // @arc4.abimethod
    // def bounded_rand_uint128(
    //     self,
    //     seed: arc4.StaticArray[arc4.Byte, Literal[32]],
    //     lower_bound: arc4.UInt128,
    //     upper_bound: arc4.UInt128,
    //     length: arc4.UInt16,
    // ) -> arc4.DynamicArray[arc4.UInt128]:
    proto 4 1
    // smart_contracts/lib_pcg128_exposer/contract.py:17
    // state = pcg128_init(seed.bytes)
    frame_dig -4
    callsub pcg128_init
    cover 3
    cover 2
    swap
    // smart_contracts/lib_pcg128_exposer/contract.py:20
    // pcg128_random(state, lower_bound.native, upper_bound.native, length.native)[
    frame_dig -1
    btoi
    cover 2
    swap
    uncover 3
    uncover 4
    frame_dig -3
    frame_dig -2
    uncover 6
    callsub pcg128_random
    cover 4
    popn 4
    // smart_contracts/lib_pcg128_exposer/contract.py:19-23
    // return arc4.DynamicArray[arc4.UInt128].from_bytes(
    //     pcg128_random(state, lower_bound.native, upper_bound.native, length.native)[
    //         4
    //     ]
    // )
    retsub


// lib_pcg.xsh_rr_quadruple_64_32.pcg128_init(seed: bytes) -> uint64, uint64, uint64, uint64:
pcg128_init:
    // lib_pcg/xsh_rr_quadruple_64_32.py:17-18
    // @subroutine
    // def pcg128_init(seed: Bytes) -> tuple[UInt64, UInt64, UInt64, UInt64]:
    proto 1 4
    // lib_pcg/xsh_rr_quadruple_64_32.py:19
    // assert seed.length == 32
    frame_dig -1
    len
    int 32
    ==
    assert
    // lib_pcg/xsh_rr_quadruple_64_32.py:22
    // __pcg32_init(op.extract_uint64(seed, 0), UInt64(PCG_DEFAULT_INCREMENT)),
    frame_dig -1
    int 0
    extract_uint64
    int 1442695040888963407
    callsub __pcg32_init
    // lib_pcg/xsh_rr_quadruple_64_32.py:23
    // __pcg32_init(op.extract_uint64(seed, 8), UInt64(PCG_SECONDARY_DEFAULT_INCREMENT)),
    frame_dig -1
    int 8
    extract_uint64
    int 1442695040888963409
    callsub __pcg32_init
    // lib_pcg/xsh_rr_quadruple_64_32.py:24
    // __pcg32_init(op.extract_uint64(seed, 16), UInt64(PCG_TERTIARY_DEFAULT_INCREMENT)),
    frame_dig -1
    int 16
    extract_uint64
    int 1442695040888963411
    callsub __pcg32_init
    // lib_pcg/xsh_rr_quadruple_64_32.py:25
    // __pcg32_init(op.extract_uint64(seed, 24), UInt64(PCG_QUATERNARY_DEFAULT_INCREMENT)),
    frame_dig -1
    int 24
    extract_uint64
    int 1442695040888963413
    callsub __pcg32_init
    // lib_pcg/xsh_rr_quadruple_64_32.py:21-26
    // return (
    //     __pcg32_init(op.extract_uint64(seed, 0), UInt64(PCG_DEFAULT_INCREMENT)),
    //     __pcg32_init(op.extract_uint64(seed, 8), UInt64(PCG_SECONDARY_DEFAULT_INCREMENT)),
    //     __pcg32_init(op.extract_uint64(seed, 16), UInt64(PCG_TERTIARY_DEFAULT_INCREMENT)),
    //     __pcg32_init(op.extract_uint64(seed, 24), UInt64(PCG_QUATERNARY_DEFAULT_INCREMENT)),
    // )
    retsub


// lib_pcg.xsh_rr_64_32.__pcg32_init(initial_state: uint64, incr: uint64) -> uint64:
__pcg32_init:
    // lib_pcg/xsh_rr_64_32.py:65-66
    // @subroutine
    // def __pcg32_init(initial_state: PCG32_STATE, incr: UInt64) -> PCG32_STATE:
    proto 2 1
    // lib_pcg/xsh_rr_64_32.py:67
    // state = __pcg32_step(UInt64(0), incr)
    int 0
    frame_dig -1
    callsub __pcg32_step
    // lib_pcg/xsh_rr_64_32.py:68
    // _high_addw, state = op.addw(state, initial_state)
    frame_dig -2
    addw
    bury 1
    // lib_pcg/xsh_rr_64_32.py:70
    // return __pcg32_step(state, incr)
    frame_dig -1
    callsub __pcg32_step
    retsub


// lib_pcg.xsh_rr_64_32.__pcg32_step(state: uint64, incr: uint64) -> uint64:
__pcg32_step:
    // lib_pcg/xsh_rr_64_32.py:73-74
    // @subroutine
    // def __pcg32_step(state: PCG32_STATE, incr: UInt64) -> PCG32_STATE:
    proto 2 1
    // lib_pcg/xsh_rr_64_32.py:75
    // _high_mul, low_mul = op.mulw(state, PCG_DEFAULT_MULTIPLIER)
    frame_dig -2
    int 6364136223846793005
    mulw
    bury 1
    // lib_pcg/xsh_rr_64_32.py:76
    // _high_add, low_add = op.addw(low_mul, incr)
    frame_dig -1
    addw
    bury 1
    // lib_pcg/xsh_rr_64_32.py:78
    // return low_add
    retsub


// lib_pcg.xsh_rr_quadruple_64_32.pcg128_random(state.0: uint64, state.1: uint64, state.2: uint64, state.3: uint64, lower_bound: bytes, upper_bound: bytes, length: uint64) -> uint64, uint64, uint64, uint64, bytes:
pcg128_random:
    // lib_pcg/xsh_rr_quadruple_64_32.py:86-92
    // @subroutine
    // def pcg128_random(
    //     state: tuple[UInt64, UInt64, UInt64, UInt64],
    //     lower_bound: BigUInt,
    //     upper_bound: BigUInt,
    //     length: UInt64,
    // ) -> tuple[UInt64, UInt64, UInt64, UInt64, Bytes]:
    proto 7 5
    int 0
    dup
    byte ""
    dupn 4
    // lib_pcg/xsh_rr_quadruple_64_32.py:95
    // assert length < 2**16
    frame_dig -1
    int 65536
    <
    assert
    // lib_pcg/xsh_rr_quadruple_64_32.py:96
    // result += arc4.UInt16(length).bytes
    frame_dig -1
    itob
    extract 6 2
    // lib_pcg/xsh_rr_quadruple_64_32.py:99
    // if lower_bound == 0 and upper_bound == 0:
    frame_dig -3
    byte 0x
    b==
    bz pcg128_random_else_body@8
    frame_dig -2
    byte 0x
    b==
    bz pcg128_random_else_body@8
    // lib_pcg/xsh_rr_quadruple_64_32.py:100
    // for i in urange(length):  # noqa: B007
    int 0
    frame_dig -4
    frame_bury 6
    frame_dig -5
    frame_bury 5
    frame_dig -6
    frame_bury 4
    frame_dig -7
    frame_bury 3
    frame_bury 2

pcg128_random_for_header@3:
    // lib_pcg/xsh_rr_quadruple_64_32.py:100
    // for i in urange(length):  # noqa: B007
    frame_dig 2
    frame_dig -1
    <
    bz pcg128_random_after_if_else@22
    // lib_pcg/xsh_rr_quadruple_64_32.py:101-103
    // state1, state2, state3, state4, n = __pcg128_random(
    //     (state1, state2, state3, state4)
    // )
    frame_dig 3
    frame_dig 4
    frame_dig 5
    frame_dig 6
    callsub __pcg128_random
    cover 4
    frame_bury 6
    frame_bury 5
    frame_bury 4
    frame_bury 3
    // lib_pcg/xsh_rr_quadruple_64_32.py:105
    // result += n.bytes
    frame_dig 7
    swap
    concat
    frame_bury 7
    // lib_pcg/xsh_rr_quadruple_64_32.py:100
    // for i in urange(length):  # noqa: B007
    frame_dig 2
    int 1
    +
    frame_bury 2
    b pcg128_random_for_header@3

pcg128_random_else_body@8:
    // lib_pcg/xsh_rr_quadruple_64_32.py:107
    // if upper_bound != 0:
    frame_dig -2
    byte 0x
    b!=
    bz pcg128_random_else_body@10
    // lib_pcg/xsh_rr_quadruple_64_32.py:108
    // assert upper_bound > BigUInt(1)
    frame_dig -2
    byte 0x01
    b>
    assert
    // lib_pcg/xsh_rr_quadruple_64_32.py:109
    // assert lower_bound < upper_bound - BigUInt(1)
    frame_dig -2
    byte 0x01
    b-
    frame_dig -3
    b>
    assert
    // lib_pcg/xsh_rr_quadruple_64_32.py:111
    // absolute_bound = upper_bound - lower_bound
    frame_dig -2
    frame_dig -3
    b-
    b pcg128_random_after_if_else@11

pcg128_random_else_body@10:
    // lib_pcg/xsh_rr_quadruple_64_32.py:113
    // assert lower_bound < BigUInt(2**256 - 1)
    frame_dig -3
    byte 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
    b<
    assert
    // lib_pcg/xsh_rr_quadruple_64_32.py:115
    // absolute_bound = BigUInt(2**256) - lower_bound
    byte 0x010000000000000000000000000000000000000000000000000000000000000000
    frame_dig -3
    b-

pcg128_random_after_if_else@11:
    // lib_pcg/xsh_rr_quadruple_64_32.py:117
    // threshold = __pcg128_twos(absolute_bound) % absolute_bound
    dup
    callsub __pcg128_twos
    swap
    b%
    frame_bury 1
    // lib_pcg/xsh_rr_quadruple_64_32.py:119
    // for i in urange(length):  # noqa: B007
    int 0
    frame_dig -4
    frame_bury 6
    frame_dig -5
    frame_bury 5
    frame_dig -6
    frame_bury 4
    frame_dig -7
    frame_bury 3
    frame_bury 2

pcg128_random_for_header@12:
    // lib_pcg/xsh_rr_quadruple_64_32.py:119
    // for i in urange(length):  # noqa: B007
    frame_dig 2
    frame_dig -1
    <
    bz pcg128_random_after_for@21

pcg128_random_while_top@14:
    // lib_pcg/xsh_rr_quadruple_64_32.py:121-123
    // state1, state2, state3, state4, candidate = __pcg128_random(
    //     (state1, state2, state3, state4)
    // )
    frame_dig 3
    frame_dig 4
    frame_dig 5
    frame_dig 6
    callsub __pcg128_random
    dup
    cover 5
    frame_bury 0
    frame_bury 6
    frame_bury 5
    frame_bury 4
    frame_bury 3
    // lib_pcg/xsh_rr_quadruple_64_32.py:124
    // if candidate >= threshold:
    frame_dig 1
    b>=
    bz pcg128_random_while_top@14
    // lib_pcg/xsh_rr_quadruple_64_32.py:126
    // result += candidate.bytes
    frame_dig 7
    frame_dig 0
    concat
    frame_bury 7
    // lib_pcg/xsh_rr_quadruple_64_32.py:119
    // for i in urange(length):  # noqa: B007
    frame_dig 2
    int 1
    +
    frame_bury 2
    b pcg128_random_for_header@12

pcg128_random_after_for@21:

pcg128_random_after_if_else@22:
    // lib_pcg/xsh_rr_quadruple_64_32.py:128
    // return state1, state2, state3, state4, result
    frame_dig 3
    frame_dig 4
    frame_dig 5
    frame_dig 6
    frame_dig 7
    frame_bury 4
    frame_bury 3
    frame_bury 2
    frame_bury 1
    frame_bury 0
    retsub


// lib_pcg.xsh_rr_quadruple_64_32.__pcg128_random(state.0: uint64, state.1: uint64, state.2: uint64, state.3: uint64) -> uint64, uint64, uint64, uint64, bytes:
__pcg128_random:
    // lib_pcg/xsh_rr_quadruple_64_32.py:29-32
    // @subroutine
    // def __pcg128_random(
    //     state: tuple[UInt64, UInt64, UInt64, UInt64]
    // ) -> tuple[UInt64, UInt64, UInt64, UInt64, BigUInt]:
    proto 4 5
    byte ""
    dup
    // lib_pcg/xsh_rr_quadruple_64_32.py:33
    // new_state1, rn1 = __pcg32_random(state[0])
    frame_dig -4
    callsub __pcg32_random
    swap
    dup
    // lib_pcg/xsh_rr_quadruple_64_32.py:36
    // UInt64(0) if new_state1 != 0 else UInt64(1)
    bz __pcg128_random_ternary_false@2
    int 0
    b __pcg128_random_ternary_merge@3

__pcg128_random_ternary_false@2:
    // lib_pcg/xsh_rr_quadruple_64_32.py:36
    // UInt64(0) if new_state1 != 0 else UInt64(1)
    int 1

__pcg128_random_ternary_merge@3:
    // lib_pcg/xsh_rr_quadruple_64_32.py:35
    // cond_incr = PCG_SECONDARY_DEFAULT_INCREMENT << (
    int 1442695040888963409
    // lib_pcg/xsh_rr_quadruple_64_32.py:35-37
    // cond_incr = PCG_SECONDARY_DEFAULT_INCREMENT << (
    //     UInt64(0) if new_state1 != 0 else UInt64(1)
    // )
    swap
    shl
    // lib_pcg/xsh_rr_quadruple_64_32.py:38
    // new_state2 = __pcg32_step(state[1], cond_incr)
    frame_dig -3
    swap
    callsub __pcg32_step
    dup
    frame_bury 0
    // lib_pcg/xsh_rr_quadruple_64_32.py:41
    // UInt64(0) if new_state2 != 0 else UInt64(1)
    bz __pcg128_random_ternary_false@5
    int 0
    b __pcg128_random_ternary_merge@6

__pcg128_random_ternary_false@5:
    // lib_pcg/xsh_rr_quadruple_64_32.py:41
    // UInt64(0) if new_state2 != 0 else UInt64(1)
    int 1

__pcg128_random_ternary_merge@6:
    // lib_pcg/xsh_rr_quadruple_64_32.py:40
    // cond_incr = PCG_TERTIARY_DEFAULT_INCREMENT << (
    int 1442695040888963411
    // lib_pcg/xsh_rr_quadruple_64_32.py:40-42
    // cond_incr = PCG_TERTIARY_DEFAULT_INCREMENT << (
    //     UInt64(0) if new_state2 != 0 else UInt64(1)
    // )
    swap
    shl
    // lib_pcg/xsh_rr_quadruple_64_32.py:43
    // new_state3 = __pcg32_step(state[2], cond_incr)
    frame_dig -2
    swap
    callsub __pcg32_step
    dup
    frame_bury 1
    // lib_pcg/xsh_rr_quadruple_64_32.py:46
    // UInt64(0) if new_state3 != 0 else UInt64(1)
    bz __pcg128_random_ternary_false@8
    int 0
    b __pcg128_random_ternary_merge@9

__pcg128_random_ternary_false@8:
    // lib_pcg/xsh_rr_quadruple_64_32.py:46
    // UInt64(0) if new_state3 != 0 else UInt64(1)
    int 1

__pcg128_random_ternary_merge@9:
    // lib_pcg/xsh_rr_quadruple_64_32.py:45
    // cond_incr = PCG_QUATERNARY_DEFAULT_INCREMENT << (
    int 1442695040888963413
    // lib_pcg/xsh_rr_quadruple_64_32.py:45-47
    // cond_incr = PCG_QUATERNARY_DEFAULT_INCREMENT << (
    //     UInt64(0) if new_state3 != 0 else UInt64(1)
    // )
    swap
    shl
    // lib_pcg/xsh_rr_quadruple_64_32.py:48
    // new_state4 = __pcg32_step(state[3], cond_incr)
    frame_dig -1
    swap
    callsub __pcg32_step
    // lib_pcg/xsh_rr_quadruple_64_32.py:56
    // op.itob(rn1 << 32 | __pcg32_output(state[1]))
    frame_dig 2
    int 32
    shl
    frame_dig -3
    callsub __pcg32_output
    |
    itob
    // lib_pcg/xsh_rr_quadruple_64_32.py:57
    // + op.itob(__pcg32_output(state[2]) << 32 | __pcg32_output(state[3]))
    frame_dig -2
    callsub __pcg32_output
    int 32
    shl
    frame_dig -1
    callsub __pcg32_output
    |
    itob
    // lib_pcg/xsh_rr_quadruple_64_32.py:56-57
    // op.itob(rn1 << 32 | __pcg32_output(state[1]))
    // + op.itob(__pcg32_output(state[2]) << 32 | __pcg32_output(state[3]))
    concat
    // lib_pcg/xsh_rr_quadruple_64_32.py:50-59
    // return (
    //     new_state1,
    //     new_state2,
    //     new_state3,
    //     new_state4,
    //     BigUInt.from_bytes(
    //         op.itob(rn1 << 32 | __pcg32_output(state[1]))
    //         + op.itob(__pcg32_output(state[2]) << 32 | __pcg32_output(state[3]))
    //     ),
    // )
    frame_dig 3
    frame_dig 0
    frame_dig 1
    uncover 4
    uncover 4
    uncover 8
    uncover 8
    uncover 8
    uncover 8
    retsub


// lib_pcg.xsh_rr_64_32.__pcg32_random(state: uint64) -> uint64, uint64:
__pcg32_random:
    // lib_pcg/xsh_rr_64_32.py:81-82
    // @subroutine
    // def __pcg32_random(state: PCG32_STATE) -> tuple[PCG32_STATE, UInt64]:
    proto 1 2
    // lib_pcg/xsh_rr_64_32.py:83
    // return __pcg32_step(state, UInt64(PCG_DEFAULT_INCREMENT)), __pcg32_output(state)
    frame_dig -1
    int 1442695040888963407
    callsub __pcg32_step
    frame_dig -1
    callsub __pcg32_output
    retsub


// lib_pcg.xsh_rr_64_32.__pcg32_output(value: uint64) -> uint64:
__pcg32_output:
    // lib_pcg/xsh_rr_64_32.py:86-87
    // @subroutine
    // def __pcg32_output(value: UInt64) -> UInt64:
    proto 1 1
    // lib_pcg/xsh_rr_64_32.py:89
    // __mask_to_32bits(((value >> 18) ^ value) >> 27), value >> 59
    frame_dig -1
    int 18
    shr
    frame_dig -1
    ^
    int 27
    shr
    callsub __mask_to_32bits
    frame_dig -1
    int 59
    shr
    // lib_pcg/xsh_rr_64_32.py:88-90
    // return __pcg32_rotation(
    //     __mask_to_32bits(((value >> 18) ^ value) >> 27), value >> 59
    // )
    callsub __pcg32_rotation
    retsub


// lib_pcg.xsh_rr_64_32.__mask_to_32bits(value: uint64) -> uint64:
__mask_to_32bits:
    // lib_pcg/xsh_rr_64_32.py:105-106
    // @subroutine
    // def __mask_to_32bits(value: UInt64) -> UInt64:
    proto 1 1
    // lib_pcg/xsh_rr_64_32.py:107
    // return value & ((2**32) - 1)
    frame_dig -1
    int 4294967295
    &
    retsub


// lib_pcg.xsh_rr_64_32.__pcg32_rotation(value: uint64, rot: uint64) -> uint64:
__pcg32_rotation:
    // lib_pcg/xsh_rr_64_32.py:93-94
    // @subroutine
    // def __pcg32_rotation(value: UInt64, rot: UInt64) -> UInt64:
    proto 2 1
    // lib_pcg/xsh_rr_64_32.py:95
    // return (value >> rot) | __mask_to_32bits(value << (__uint64_twos(rot) & 31))
    frame_dig -2
    frame_dig -1
    shr
    frame_dig -1
    callsub __uint64_twos
    int 31
    &
    frame_dig -2
    swap
    shl
    callsub __mask_to_32bits
    |
    retsub


// lib_pcg.xsh_rr_64_32.__uint64_twos(value: uint64) -> uint64:
__uint64_twos:
    // lib_pcg/xsh_rr_64_32.py:98-99
    // @subroutine
    // def __uint64_twos(value: UInt64) -> UInt64:
    proto 1 1
    // lib_pcg/xsh_rr_64_32.py:100
    // addw_high, addw_low = op.addw(~value, 1)
    frame_dig -1
    ~
    int 1
    addw
    bury 1
    // lib_pcg/xsh_rr_64_32.py:102
    // return addw_low
    retsub


// lib_pcg.xsh_rr_quadruple_64_32.__pcg128_twos(value: bytes) -> bytes:
__pcg128_twos:
    // lib_pcg/xsh_rr_quadruple_64_32.py:62-67
    // # There's no way to write a general uint512 two's complement because there's no way to get a larger number than
    // #  an uint512 like we can do for uint64 with wide math.
    // # Fortunately, we don't use uint512. This code works assuming that "value: BigUInt" is an uint256.
    // # This code will prevent a native overflow and return a correctly masked uint256.
    // @subroutine
    // def __pcg128_twos(value: BigUInt) -> BigUInt:
    proto 1 1
    // lib_pcg/xsh_rr_quadruple_64_32.py:69-75
    // value
    // ^ BigUInt.from_bytes(
    //     b"\x00\x00\x00\x00\x00\x00\x00\x00"
    //     + b"\x00\x00\x00\x00\x00\x00\x00\x00"
    //     + b"\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF"
    //     + b"\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF"
    // )
    frame_dig -1
    // lib_pcg/xsh_rr_quadruple_64_32.py:71-74
    // b"\x00\x00\x00\x00\x00\x00\x00\x00"
    // + b"\x00\x00\x00\x00\x00\x00\x00\x00"
    // + b"\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF"
    // + b"\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF"
    byte 0x00000000000000000000000000000000ffffffffffffffffffffffffffffffff
    // lib_pcg/xsh_rr_quadruple_64_32.py:69-75
    // value
    // ^ BigUInt.from_bytes(
    //     b"\x00\x00\x00\x00\x00\x00\x00\x00"
    //     + b"\x00\x00\x00\x00\x00\x00\x00\x00"
    //     + b"\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF"
    //     + b"\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF"
    // )
    b^
    // lib_pcg/xsh_rr_quadruple_64_32.py:76
    // ) + BigUInt(1)
    byte 0x01
    // lib_pcg/xsh_rr_quadruple_64_32.py:68-76
    // wide_value_compl = (
    //     value
    //     ^ BigUInt.from_bytes(
    //         b"\x00\x00\x00\x00\x00\x00\x00\x00"
    //         + b"\x00\x00\x00\x00\x00\x00\x00\x00"
    //         + b"\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF"
    //         + b"\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF"
    //     )
    // ) + BigUInt(1)
    b+
    // lib_pcg/xsh_rr_quadruple_64_32.py:79-82
    // b"\x00\x00\x00\x00\x00\x00\x00\x00"
    // + b"\x00\x00\x00\x00\x00\x00\x00\x00"
    // + b"\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF"
    // + b"\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF"
    byte 0x00000000000000000000000000000000ffffffffffffffffffffffffffffffff
    // lib_pcg/xsh_rr_quadruple_64_32.py:78-83
    // return wide_value_compl & BigUInt.from_bytes(
    //     b"\x00\x00\x00\x00\x00\x00\x00\x00"
    //     + b"\x00\x00\x00\x00\x00\x00\x00\x00"
    //     + b"\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF"
    //     + b"\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF"
    // )
    b&
    retsub


// smart_contracts.lib_pcg128_exposer.contract.LibPcg128ExposerAlgopy.update() -> void:
update:
    // smart_contracts/lib_pcg128_exposer/contract.py:25-26
    // @arc4.baremethod(allow_actions=["UpdateApplication"])
    // def update(self) -> None:
    proto 0 0
    // smart_contracts/lib_pcg128_exposer/contract.py:27
    // assert Txn.sender == Global.creator_address
    txn Sender
    global CreatorAddress
    ==
    assert
    retsub