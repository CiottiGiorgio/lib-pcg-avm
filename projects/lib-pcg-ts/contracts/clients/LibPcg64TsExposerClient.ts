/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^2
 */
import * as algokit from '@algorandfoundation/algokit-utils'
import type {
  ABIAppCallArg,
  AppCallTransactionResult,
  AppCallTransactionResultOfType,
  AppCompilationResult,
  AppReference,
  AppState,
  CoreAppCallArgs,
  RawAppCallArgs,
  TealTemplateParams,
} from '@algorandfoundation/algokit-utils/types/app'
import type {
  AppClientCallCoreParams,
  AppClientCompilationParams,
  AppClientDeployCoreParams,
  AppDetails,
  ApplicationClient,
} from '@algorandfoundation/algokit-utils/types/app-client'
import type { AppSpec } from '@algorandfoundation/algokit-utils/types/app-spec'
import type { SendTransactionResult, TransactionToSign, SendTransactionFrom, SendTransactionParams } from '@algorandfoundation/algokit-utils/types/transaction'
import type { ABIResult, TransactionWithSigner } from 'algosdk'
import { Algodv2, OnApplicationComplete, Transaction, AtomicTransactionComposer, modelsv2 } from 'algosdk'
export const APP_SPEC: AppSpec = {
  "hints": {
    "boundedRandUInt64(byte[16],uint64,uint64,uint64)uint64[]": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "createApplication()void": {
      "call_config": {
        "no_op": "CREATE"
      }
    }
  },
  "bare_call_config": {
    "no_op": "NEVER",
    "opt_in": "NEVER",
    "close_out": "NEVER",
    "update_application": "NEVER",
    "delete_application": "NEVER"
  },
  "schema": {
    "local": {
      "declared": {},
      "reserved": {}
    },
    "global": {
      "declared": {},
      "reserved": {}
    }
  },
  "state": {
    "global": {
      "num_byte_slices": 0,
      "num_uints": 0
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0
    }
  },
  "source": {
    "approval": "I3ByYWdtYSB2ZXJzaW9uIDEwCgovLyBUaGlzIFRFQUwgd2FzIGdlbmVyYXRlZCBieSBURUFMU2NyaXB0IHYwLjg4LjEKLy8gaHR0cHM6Ly9naXRodWIuY29tL2FsZ29yYW5kZm91bmRhdGlvbi9URUFMU2NyaXB0CgovLyBUaGlzIGNvbnRyYWN0IGlzIGNvbXBsaWFudCB3aXRoIGFuZC9vciBpbXBsZW1lbnRzIHRoZSBmb2xsb3dpbmcgQVJDczogWyBBUkM0IF0KCi8vIFRoZSBmb2xsb3dpbmcgdGVuIGxpbmVzIG9mIFRFQUwgaGFuZGxlIGluaXRpYWwgcHJvZ3JhbSBmbG93Ci8vIFRoaXMgcGF0dGVybiBpcyB1c2VkIHRvIG1ha2UgaXQgZWFzeSBmb3IgYW55b25lIHRvIHBhcnNlIHRoZSBzdGFydCBvZiB0aGUgcHJvZ3JhbSBhbmQgZGV0ZXJtaW5lIGlmIGEgc3BlY2lmaWMgYWN0aW9uIGlzIGFsbG93ZWQKLy8gSGVyZSwgYWN0aW9uIHJlZmVycyB0byB0aGUgT25Db21wbGV0ZSBpbiBjb21iaW5hdGlvbiB3aXRoIHdoZXRoZXIgdGhlIGFwcCBpcyBiZWluZyBjcmVhdGVkIG9yIGNhbGxlZAovLyBFdmVyeSBwb3NzaWJsZSBhY3Rpb24gZm9yIHRoaXMgY29udHJhY3QgaXMgcmVwcmVzZW50ZWQgaW4gdGhlIHN3aXRjaCBzdGF0ZW1lbnQKLy8gSWYgdGhlIGFjdGlvbiBpcyBub3QgaW1wbGVtZW50ZWQgaW4gdGhlIGNvbnRyYWN0LCBpdHMgcmVzcGVjdGl2ZSBicmFuY2ggd2lsbCBiZSAiKk5PVF9JTVBMRU1FTlRFRCIgd2hpY2gganVzdCBjb250YWlucyAiZXJyIgp0eG4gQXBwbGljYXRpb25JRAohCmludCA2CioKdHhuIE9uQ29tcGxldGlvbgorCnN3aXRjaCAqY2FsbF9Ob09wICpOT1RfSU1QTEVNRU5URUQgKk5PVF9JTVBMRU1FTlRFRCAqTk9UX0lNUExFTUVOVEVEICpOT1RfSU1QTEVNRU5URUQgKk5PVF9JTVBMRU1FTlRFRCAqY3JlYXRlX05vT3AgKk5PVF9JTVBMRU1FTlRFRCAqTk9UX0lNUExFTUVOVEVEICpOT1RfSU1QTEVNRU5URUQgKk5PVF9JTVBMRU1FTlRFRCAqTk9UX0lNUExFTUVOVEVECgoqTk9UX0lNUExFTUVOVEVEOgoJZXJyCgovLyBfX3R3b3NDb21wbGVtZW50KHZhbHVlOiB1aW50NjQpOiB1aW50NjQKX190d29zQ29tcGxlbWVudDoKCXByb3RvIDEgMQoKCS8vIFB1c2ggZW1wdHkgYnl0ZXMgYWZ0ZXIgdGhlIGZyYW1lIHBvaW50ZXIgdG8gcmVzZXJ2ZSBzcGFjZSBmb3IgbG9jYWwgdmFyaWFibGVzCglieXRlIDB4CglkdXBuIDMKCgkvLyBjb250cmFjdHMvbGliLXBjZzMyLXRzLmFsZ28udHM6NgoJLy8gYWRkd1Jlc3VsdCA9IGFkZHcofnZhbHVlLCAxKQoJZnJhbWVfZGlnIC0xIC8vIHZhbHVlOiB1aW50NjQKCX4KCWludCAxCglhZGR3CglmcmFtZV9idXJ5IDIgLy8gYWRkd1Jlc3VsdCBsb3c6IHVpbnQ2NAoJZnJhbWVfYnVyeSAzIC8vIGFkZHdSZXN1bHQgaGlnaDogdWludDY0CgoJLy8gY29udHJhY3RzL2xpYi1wY2czMi10cy5hbGdvLnRzOjcKCS8vIHJldHVybiBhZGR3UmVzdWx0LmxvdzsKCWZyYW1lX2RpZyAyIC8vIGFkZHdSZXN1bHQgbG93OiB1aW50NjQKCgkvLyBzZXQgdGhlIHN1YnJvdXRpbmUgcmV0dXJuIHZhbHVlCglmcmFtZV9idXJ5IDAKCgkvLyBwb3AgYWxsIGxvY2FsIHZhcmlhYmxlcyBmcm9tIHRoZSBzdGFjawoJcG9wbiAzCglyZXRzdWIKCi8vIF9fbWFza1RvVWludDMyKHZhbHVlOiB1aW50NjQpOiB1aW50NjQKX19tYXNrVG9VaW50MzI6Cglwcm90byAxIDEKCgkvLyBjb250cmFjdHMvbGliLXBjZzMyLXRzLmFsZ28udHM6MTEKCS8vIHJldHVybiB2YWx1ZSAmIDQyOTQ5NjcyOTU7CglmcmFtZV9kaWcgLTEgLy8gdmFsdWU6IHVpbnQ2NAoJaW50IDQyOTQ5NjcyOTUKCSYKCXJldHN1YgoKLy8gX19wY2czMlN0ZXAoc3RhdGU6IHVpbnQ2NCwgaW5jcjogdWludDY0KTogdWludDY0Cl9fcGNnMzJTdGVwOgoJcHJvdG8gMiAxCgoJLy8gUHVzaCBlbXB0eSBieXRlcyBhZnRlciB0aGUgZnJhbWUgcG9pbnRlciB0byByZXNlcnZlIHNwYWNlIGZvciBsb2NhbCB2YXJpYWJsZXMKCWJ5dGUgMHgKCWR1cG4gNwoKCS8vIGNvbnRyYWN0cy9saWItcGNnMzItdHMuYWxnby50czoxNQoJLy8gbXVsd1Jlc3VsdCA9IG11bHcoc3RhdGUsIDYzNjQxMzYyMjM4NDY3OTMwMDUpCglmcmFtZV9kaWcgLTEgLy8gc3RhdGU6IHVpbnQ2NAoJaW50IDYzNjQxMzYyMjM4NDY3OTMwMDUKCW11bHcKCWZyYW1lX2J1cnkgMiAvLyBtdWx3UmVzdWx0IGxvdzogdWludDY0CglmcmFtZV9idXJ5IDMgLy8gbXVsd1Jlc3VsdCBoaWdoOiB1aW50NjQKCgkvLyBjb250cmFjdHMvbGliLXBjZzMyLXRzLmFsZ28udHM6MTYKCS8vIGFkZHdSZXN1bHQgPSBhZGR3KG11bHdSZXN1bHQubG93LCBpbmNyKQoJZnJhbWVfZGlnIDIgLy8gbXVsd1Jlc3VsdCBsb3c6IHVpbnQ2NAoJZnJhbWVfZGlnIC0yIC8vIGluY3I6IHVpbnQ2NAoJYWRkdwoJZnJhbWVfYnVyeSA2IC8vIGFkZHdSZXN1bHQgbG93OiB1aW50NjQKCWZyYW1lX2J1cnkgNyAvLyBhZGR3UmVzdWx0IGhpZ2g6IHVpbnQ2NAoKCS8vIGNvbnRyYWN0cy9saWItcGNnMzItdHMuYWxnby50czoxOAoJLy8gcmV0dXJuIGFkZHdSZXN1bHQubG93OwoJZnJhbWVfZGlnIDYgLy8gYWRkd1Jlc3VsdCBsb3c6IHVpbnQ2NAoKCS8vIHNldCB0aGUgc3Vicm91dGluZSByZXR1cm4gdmFsdWUKCWZyYW1lX2J1cnkgMAoKCS8vIHBvcCBhbGwgbG9jYWwgdmFyaWFibGVzIGZyb20gdGhlIHN0YWNrCglwb3BuIDcKCXJldHN1YgoKLy8gX19wY2czMlJvdGF0aW9uKHZhbHVlOiB1aW50NjQsIHJvdDogdWludDY0KTogdWludDY0Cl9fcGNnMzJSb3RhdGlvbjoKCXByb3RvIDIgMQoKCS8vIGNvbnRyYWN0cy9saWItcGNnMzItdHMuYWxnby50czoyMgoJLy8gcmV0dXJuICh2YWx1ZSA+PiByb3QpIHwgdGhpcy5fX21hc2tUb1VpbnQzMih2YWx1ZSA8PCAodGhpcy5fX3R3b3NDb21wbGVtZW50KHJvdCkgJiAzMSkpOwoJZnJhbWVfZGlnIC0xIC8vIHZhbHVlOiB1aW50NjQKCWZyYW1lX2RpZyAtMiAvLyByb3Q6IHVpbnQ2NAoJc2hyCglmcmFtZV9kaWcgLTEgLy8gdmFsdWU6IHVpbnQ2NAoJZnJhbWVfZGlnIC0yIC8vIHJvdDogdWludDY0CgljYWxsc3ViIF9fdHdvc0NvbXBsZW1lbnQKCWludCAzMQoJJgoJc2hsCgljYWxsc3ViIF9fbWFza1RvVWludDMyCgl8CglyZXRzdWIKCi8vIF9fcGNnMzJPdXRwdXQoc3RhdGU6IHVpbnQ2NCk6IHVpbnQ2NApfX3BjZzMyT3V0cHV0OgoJcHJvdG8gMSAxCgoJLy8gY29udHJhY3RzL2xpYi1wY2czMi10cy5hbGdvLnRzOjI2CgkvLyByZXR1cm4gdGhpcy5fX3BjZzMyUm90YXRpb24odGhpcy5fX21hc2tUb1VpbnQzMigoKHN0YXRlID4+IDE4KSBeIHN0YXRlKSA+PiAyNyksIHN0YXRlID4+IDU5KTsKCWZyYW1lX2RpZyAtMSAvLyBzdGF0ZTogdWludDY0CglpbnQgNTkKCXNocgoJZnJhbWVfZGlnIC0xIC8vIHN0YXRlOiB1aW50NjQKCWludCAxOAoJc2hyCglmcmFtZV9kaWcgLTEgLy8gc3RhdGU6IHVpbnQ2NAoJXgoJaW50IDI3CglzaHIKCWNhbGxzdWIgX19tYXNrVG9VaW50MzIKCWNhbGxzdWIgX19wY2czMlJvdGF0aW9uCglyZXRzdWIKCi8vIF9fcGNnMzJSYW5kb20oc3RhdGU6IHVpbnQ2NCk6IFt1aW50NjQsIHVpbnQ2NF0KX19wY2czMlJhbmRvbToKCXByb3RvIDEgMQoKCS8vIGNvbnRyYWN0cy9saWItcGNnMzItdHMuYWxnby50czozMAoJLy8gcmV0dXJuIFt0aGlzLl9fcGNnMzJTdGVwKHN0YXRlLCAxNDQyNjk1MDQwODg4OTYzNDA3KSwgdGhpcy5fX3BjZzMyT3V0cHV0KHN0YXRlKV07CglpbnQgMTQ0MjY5NTA0MDg4ODk2MzQwNwoJZnJhbWVfZGlnIC0xIC8vIHN0YXRlOiB1aW50NjQKCWNhbGxzdWIgX19wY2czMlN0ZXAKCWl0b2IKCWZyYW1lX2RpZyAtMSAvLyBzdGF0ZTogdWludDY0CgljYWxsc3ViIF9fcGNnMzJPdXRwdXQKCWl0b2IKCWNvbmNhdAoJcmV0c3ViCgovLyBfX3BjZzMySW5pdChpbml0aWFsU3RhdGU6IHVpbnQ2NCwgaW5jcjogdWludDY0KTogdWludDY0Cl9fcGNnMzJJbml0OgoJcHJvdG8gMiAxCgoJLy8gUHVzaCBlbXB0eSBieXRlcyBhZnRlciB0aGUgZnJhbWUgcG9pbnRlciB0byByZXNlcnZlIHNwYWNlIGZvciBsb2NhbCB2YXJpYWJsZXMKCWJ5dGUgMHgKCWR1cG4gNAoKCS8vIGNvbnRyYWN0cy9saWItcGNnMzItdHMuYWxnby50czozNAoJLy8gc3RhdGUgPSB0aGlzLl9fcGNnMzJTdGVwKDAsIGluY3IpCglmcmFtZV9kaWcgLTIgLy8gaW5jcjogdWludDY0CglpbnQgMAoJY2FsbHN1YiBfX3BjZzMyU3RlcAoJZnJhbWVfYnVyeSAwIC8vIHN0YXRlOiB1aW50NjQKCgkvLyBjb250cmFjdHMvbGliLXBjZzMyLXRzLmFsZ28udHM6MzUKCS8vIGFkZHdSZXN1bHQgPSBhZGR3KHN0YXRlLCBpbml0aWFsU3RhdGUpCglmcmFtZV9kaWcgMCAvLyBzdGF0ZTogdWludDY0CglmcmFtZV9kaWcgLTEgLy8gaW5pdGlhbFN0YXRlOiB1aW50NjQKCWFkZHcKCWZyYW1lX2J1cnkgMyAvLyBhZGR3UmVzdWx0IGxvdzogdWludDY0CglmcmFtZV9idXJ5IDQgLy8gYWRkd1Jlc3VsdCBoaWdoOiB1aW50NjQKCgkvLyBjb250cmFjdHMvbGliLXBjZzMyLXRzLmFsZ28udHM6MzcKCS8vIHJldHVybiB0aGlzLl9fcGNnMzJTdGVwKGFkZHdSZXN1bHQubG93LCBpbmNyKTsKCWZyYW1lX2RpZyAtMiAvLyBpbmNyOiB1aW50NjQKCWZyYW1lX2RpZyAzIC8vIGFkZHdSZXN1bHQgbG93OiB1aW50NjQKCWNhbGxzdWIgX19wY2czMlN0ZXAKCgkvLyBzZXQgdGhlIHN1YnJvdXRpbmUgcmV0dXJuIHZhbHVlCglmcmFtZV9idXJ5IDAKCgkvLyBwb3AgYWxsIGxvY2FsIHZhcmlhYmxlcyBmcm9tIHRoZSBzdGFjawoJcG9wbiA0CglyZXRzdWIKCi8vIHBjZzMySW5pdChpbml0aWFsU3RhdGU6IHVpbnQ2NCk6IHVpbnQ2NApwY2czMkluaXQ6Cglwcm90byAxIDEKCgkvLyBjb250cmFjdHMvbGliLXBjZzMyLXRzLmFsZ28udHM6NDEKCS8vIHJldHVybiB0aGlzLl9fcGNnMzJJbml0KGluaXRpYWxTdGF0ZSwgMTQ0MjY5NTA0MDg4ODk2MzQwNyk7CglpbnQgMTQ0MjY5NTA0MDg4ODk2MzQwNwoJZnJhbWVfZGlnIC0xIC8vIGluaXRpYWxTdGF0ZTogdWludDY0CgljYWxsc3ViIF9fcGNnMzJJbml0CglyZXRzdWIKCi8vIHBjZzMyUmFuZG9tKHN0YXRlOiB1aW50NjQsIGJpdFNpemU6IHVpbnQ2NCwgbG93ZXJCb3VuZDogdWludDY0LCB1cHBlckJvdW5kOiB1aW50NjQsIGxlbmd0aDogdWludDY0KTogW3VpbnQ2NCwgYnl0ZXNdCnBjZzMyUmFuZG9tOgoJcHJvdG8gNSAxCgoJLy8gUHVzaCBlbXB0eSBieXRlcyBhZnRlciB0aGUgZnJhbWUgcG9pbnRlciB0byByZXNlcnZlIHNwYWNlIGZvciBsb2NhbCB2YXJpYWJsZXMKCWJ5dGUgMHgKCWR1cG4gOAoKCS8vIGNvbnRyYWN0cy9saWItcGNnMzItdHMuYWxnby50czo1MQoJLy8gcmVzdWx0OiBieXRlcyA9ICcnCglieXRlIDB4IC8vICIiCglmcmFtZV9idXJ5IDAgLy8gcmVzdWx0OiBieXRlcwoKCS8vIGNvbnRyYWN0cy9saWItcGNnMzItdHMuYWxnby50czo1NQoJLy8gYXNzZXJ0KGxlbmd0aCA8IDY1NTM2KQoJZnJhbWVfZGlnIC01IC8vIGxlbmd0aDogdWludDY0CglpbnQgNjU1MzYKCTwKCWFzc2VydAoKCS8vIGNvbnRyYWN0cy9saWItcGNnMzItdHMuYWxnby50czo1NwoJLy8gYXNzZXJ0KGJpdFNpemUgPT09IDggfHwgYml0U2l6ZSA9PT0gMTYgfHwgYml0U2l6ZSA9PT0gMzIpCglmcmFtZV9kaWcgLTIgLy8gYml0U2l6ZTogdWludDY0CglpbnQgOAoJPT0KCWR1cAoJYm56ICpza2lwX29yMAoJZnJhbWVfZGlnIC0yIC8vIGJpdFNpemU6IHVpbnQ2NAoJaW50IDE2Cgk9PQoJfHwKCipza2lwX29yMDoKCWR1cAoJYm56ICpza2lwX29yMQoJZnJhbWVfZGlnIC0yIC8vIGJpdFNpemU6IHVpbnQ2NAoJaW50IDMyCgk9PQoJfHwKCipza2lwX29yMToKCWFzc2VydAoKCS8vIGNvbnRyYWN0cy9saWItcGNnMzItdHMuYWxnby50czo1OAoJLy8gYnl0ZVNpemUgPSBiaXRTaXplID4+IDMKCWZyYW1lX2RpZyAtMiAvLyBiaXRTaXplOiB1aW50NjQKCWludCAzCglzaHIKCWZyYW1lX2J1cnkgMyAvLyBieXRlU2l6ZTogdWludDY0CgoJLy8gY29udHJhY3RzL2xpYi1wY2czMi10cy5hbGdvLnRzOjU5CgkvLyB0cnVuY2F0ZVN0YXJ0Q2FjaGVkID0gOCAtIGJ5dGVTaXplCglpbnQgOAoJZnJhbWVfZGlnIDMgLy8gYnl0ZVNpemU6IHVpbnQ2NAoJLQoJZnJhbWVfYnVyeSA0IC8vIHRydW5jYXRlU3RhcnRDYWNoZWQ6IHVpbnQ2NAoKCS8vICppZjBfY29uZGl0aW9uCgkvLyBjb250cmFjdHMvbGliLXBjZzMyLXRzLmFsZ28udHM6NjEKCS8vIGxvd2VyQm91bmQgPT09IDAgJiYgdXBwZXJCb3VuZCA9PT0gMAoJZnJhbWVfZGlnIC0zIC8vIGxvd2VyQm91bmQ6IHVpbnQ2NAoJaW50IDAKCT09CglkdXAKCWJ6ICpza2lwX2FuZDAKCWZyYW1lX2RpZyAtNCAvLyB1cHBlckJvdW5kOiB1aW50NjQKCWludCAwCgk9PQoJJiYKCipza2lwX2FuZDA6CglieiAqaWYwX2Vsc2UKCgkvLyAqaWYwX2NvbnNlcXVlbnQKCS8vIGNvbnRyYWN0cy9saWItcGNnMzItdHMuYWxnby50czo2MgoJLy8gZm9yIChsZXQgaSA9IDA7IGkgPCBsZW5ndGg7IGkgPSBpICsgMSkKCWludCAwCglmcmFtZV9idXJ5IDUgLy8gaTogdWludDY0CgoqZm9yXzA6CgkvLyBjb250cmFjdHMvbGliLXBjZzMyLXRzLmFsZ28udHM6NjIKCS8vIGkgPCBsZW5ndGgKCWZyYW1lX2RpZyA1IC8vIGk6IHVpbnQ2NAoJZnJhbWVfZGlnIC01IC8vIGxlbmd0aDogdWludDY0Cgk8CglieiAqZm9yXzBfZW5kCgoJLy8gY29udHJhY3RzL2xpYi1wY2czMi10cy5hbGdvLnRzOjYzCgkvLyBwcm4gPSB0aGlzLl9fcGNnMzJSYW5kb20oc3RhdGUpCglmcmFtZV9kaWcgLTEgLy8gc3RhdGU6IHVpbnQ2NAoJY2FsbHN1YiBfX3BjZzMyUmFuZG9tCglmcmFtZV9idXJ5IDYgLy8gcHJuOiAodWludDY0LHVpbnQ2NCkKCgkvLyBjb250cmFjdHMvbGliLXBjZzMyLXRzLmFsZ28udHM6NjQKCS8vIHN0YXRlID0gcHJuWzBdCglmcmFtZV9kaWcgNiAvLyBwcm46ICh1aW50NjQsdWludDY0KQoJZXh0cmFjdCAwIDgKCWJ0b2kKCWZyYW1lX2J1cnkgLTEgLy8gc3RhdGU6IHVpbnQ2NAoKCS8vIGNvbnRyYWN0cy9saWItcGNnMzItdHMuYWxnby50czo2NQoJLy8gcmVzdWx0ICs9IGV4dHJhY3QzKGl0b2IocHJuWzFdKSwgdHJ1bmNhdGVTdGFydENhY2hlZCwgYnl0ZVNpemUpCglmcmFtZV9kaWcgMCAvLyByZXN1bHQ6IGJ5dGVzCglmcmFtZV9kaWcgNiAvLyBwcm46ICh1aW50NjQsdWludDY0KQoJZXh0cmFjdCA4IDgKCWJ0b2kKCWl0b2IKCWZyYW1lX2RpZyA0IC8vIHRydW5jYXRlU3RhcnRDYWNoZWQ6IHVpbnQ2NAoJZnJhbWVfZGlnIDMgLy8gYnl0ZVNpemU6IHVpbnQ2NAoJZXh0cmFjdDMKCWNvbmNhdAoJZnJhbWVfYnVyeSAwIC8vIHJlc3VsdDogYnl0ZXMKCipmb3JfMF9jb250aW51ZToKCS8vIGNvbnRyYWN0cy9saWItcGNnMzItdHMuYWxnby50czo2MgoJLy8gaSA9IGkgKyAxCglmcmFtZV9kaWcgNSAvLyBpOiB1aW50NjQKCWludCAxCgkrCglmcmFtZV9idXJ5IDUgLy8gaTogdWludDY0CgliICpmb3JfMAoKKmZvcl8wX2VuZDoKCWIgKmlmMF9lbmQKCippZjBfZWxzZToKCS8vICppZjFfY29uZGl0aW9uCgkvLyBjb250cmFjdHMvbGliLXBjZzMyLXRzLmFsZ28udHM6NjgKCS8vIHVwcGVyQm91bmQgIT09IDAKCWZyYW1lX2RpZyAtNCAvLyB1cHBlckJvdW5kOiB1aW50NjQKCWludCAwCgkhPQoJYnogKmlmMV9lbHNlCgoJLy8gKmlmMV9jb25zZXF1ZW50CgkvLyBjb250cmFjdHMvbGliLXBjZzMyLXRzLmFsZ28udHM6NjkKCS8vIGFzc2VydCh1cHBlckJvdW5kID4gMSkKCWZyYW1lX2RpZyAtNCAvLyB1cHBlckJvdW5kOiB1aW50NjQKCWludCAxCgk+Cglhc3NlcnQKCgkvLyBjb250cmFjdHMvbGliLXBjZzMyLXRzLmFsZ28udHM6NzAKCS8vIGFzc2VydCh1cHBlckJvdW5kIDwgMSA8PCBiaXRTaXplKQoJZnJhbWVfZGlnIC00IC8vIHVwcGVyQm91bmQ6IHVpbnQ2NAoJaW50IDEKCWZyYW1lX2RpZyAtMiAvLyBiaXRTaXplOiB1aW50NjQKCXNobAoJPAoJYXNzZXJ0CgoJLy8gY29udHJhY3RzL2xpYi1wY2czMi10cy5hbGdvLnRzOjcyCgkvLyBhc3NlcnQobG93ZXJCb3VuZCA8IHVwcGVyQm91bmQgLSAxKQoJZnJhbWVfZGlnIC0zIC8vIGxvd2VyQm91bmQ6IHVpbnQ2NAoJZnJhbWVfZGlnIC00IC8vIHVwcGVyQm91bmQ6IHVpbnQ2NAoJaW50IDEKCS0KCTwKCWFzc2VydAoKCS8vIGNvbnRyYWN0cy9saWItcGNnMzItdHMuYWxnby50czo3NAoJLy8gYWJzb2x1dGVCb3VuZCA9IHVwcGVyQm91bmQgLSBsb3dlckJvdW5kCglmcmFtZV9kaWcgLTQgLy8gdXBwZXJCb3VuZDogdWludDY0CglmcmFtZV9kaWcgLTMgLy8gbG93ZXJCb3VuZDogdWludDY0CgktCglmcmFtZV9idXJ5IDEgLy8gYWJzb2x1dGVCb3VuZDogdWludDY0CgliICppZjFfZW5kCgoqaWYxX2Vsc2U6CgkvLyBjb250cmFjdHMvbGliLXBjZzMyLXRzLmFsZ28udHM6NzYKCS8vIGFzc2VydChsb3dlckJvdW5kIDwgKDEgPDwgYml0U2l6ZSkgLSAxKQoJZnJhbWVfZGlnIC0zIC8vIGxvd2VyQm91bmQ6IHVpbnQ2NAoJaW50IDEKCWZyYW1lX2RpZyAtMiAvLyBiaXRTaXplOiB1aW50NjQKCXNobAoJaW50IDEKCS0KCTwKCWFzc2VydAoKCS8vIGNvbnRyYWN0cy9saWItcGNnMzItdHMuYWxnby50czo3OAoJLy8gYWJzb2x1dGVCb3VuZCA9ICgxIDw8IGJpdFNpemUpIC0gbG93ZXJCb3VuZAoJaW50IDEKCWZyYW1lX2RpZyAtMiAvLyBiaXRTaXplOiB1aW50NjQKCXNobAoJZnJhbWVfZGlnIC0zIC8vIGxvd2VyQm91bmQ6IHVpbnQ2NAoJLQoJZnJhbWVfYnVyeSAxIC8vIGFic29sdXRlQm91bmQ6IHVpbnQ2NAoKKmlmMV9lbmQ6CgkvLyBjb250cmFjdHMvbGliLXBjZzMyLXRzLmFsZ28udHM6ODEKCS8vIHRocmVzaG9sZCA9IHRoaXMuX190d29zQ29tcGxlbWVudChhYnNvbHV0ZUJvdW5kKSAlIGFic29sdXRlQm91bmQKCWZyYW1lX2RpZyAxIC8vIGFic29sdXRlQm91bmQ6IHVpbnQ2NAoJY2FsbHN1YiBfX3R3b3NDb21wbGVtZW50CglmcmFtZV9kaWcgMSAvLyBhYnNvbHV0ZUJvdW5kOiB1aW50NjQKCSUKCWZyYW1lX2J1cnkgMiAvLyB0aHJlc2hvbGQ6IHVpbnQ2NAoKCS8vIGNvbnRyYWN0cy9saWItcGNnMzItdHMuYWxnby50czo4MwoJLy8gZm9yIChsZXQgaSA9IDA7IGkgPCBsZW5ndGg7IGkgPSBpICsgMSkKCWludCAwCglmcmFtZV9idXJ5IDcgLy8gaTogdWludDY0CgoqZm9yXzE6CgkvLyBjb250cmFjdHMvbGliLXBjZzMyLXRzLmFsZ28udHM6ODMKCS8vIGkgPCBsZW5ndGgKCWZyYW1lX2RpZyA3IC8vIGk6IHVpbnQ2NAoJZnJhbWVfZGlnIC01IC8vIGxlbmd0aDogdWludDY0Cgk8CglieiAqZm9yXzFfZW5kCgoqd2hpbGVfMDoKCip3aGlsZV8wX2NvbnRpbnVlOgoJLy8gY29udHJhY3RzL2xpYi1wY2czMi10cy5hbGdvLnRzOjg2CgkvLyB0cnVlCglpbnQgMQoJYnogKndoaWxlXzBfZW5kCgoJLy8gY29udHJhY3RzL2xpYi1wY2czMi10cy5hbGdvLnRzOjg3CgkvLyBwcm4gPSB0aGlzLl9fcGNnMzJSYW5kb20oc3RhdGUpCglmcmFtZV9kaWcgLTEgLy8gc3RhdGU6IHVpbnQ2NAoJY2FsbHN1YiBfX3BjZzMyUmFuZG9tCglmcmFtZV9idXJ5IDggLy8gcHJuOiBbdWludDY0LCB1aW50NjRdCgoJLy8gY29udHJhY3RzL2xpYi1wY2czMi10cy5hbGdvLnRzOjg4CgkvLyBzdGF0ZSA9IHByblswXQoJZnJhbWVfZGlnIDggLy8gcHJuOiBbdWludDY0LCB1aW50NjRdCglleHRyYWN0IDAgOAoJYnRvaQoJZnJhbWVfYnVyeSAtMSAvLyBzdGF0ZTogdWludDY0CgoJLy8gKmlmMl9jb25kaXRpb24KCS8vIGNvbnRyYWN0cy9saWItcGNnMzItdHMuYWxnby50czo4OQoJLy8gcHJuWzFdID49IHRocmVzaG9sZAoJZnJhbWVfZGlnIDggLy8gcHJuOiBbdWludDY0LCB1aW50NjRdCglleHRyYWN0IDggOAoJYnRvaQoJZnJhbWVfZGlnIDIgLy8gdGhyZXNob2xkOiB1aW50NjQKCT49CglieiAqaWYyX2VuZAoKCS8vICppZjJfY29uc2VxdWVudAoJYiAqd2hpbGVfMF9lbmQKCippZjJfZW5kOgoJYiAqd2hpbGVfMAoKKndoaWxlXzBfZW5kOgoJLy8gY29udHJhY3RzL2xpYi1wY2czMi10cy5hbGdvLnRzOjk0CgkvLyByZXN1bHQgKz0gZXh0cmFjdDMoaXRvYigocHJuWzFdICUgYWJzb2x1dGVCb3VuZCkgKyBsb3dlckJvdW5kKSwgdHJ1bmNhdGVTdGFydENhY2hlZCwgYnl0ZVNpemUpCglmcmFtZV9kaWcgMCAvLyByZXN1bHQ6IGJ5dGVzCglmcmFtZV9kaWcgOCAvLyBwcm46IFt1aW50NjQsIHVpbnQ2NF0KCWV4dHJhY3QgOCA4CglidG9pCglmcmFtZV9kaWcgMSAvLyBhYnNvbHV0ZUJvdW5kOiB1aW50NjQKCSUKCWZyYW1lX2RpZyAtMyAvLyBsb3dlckJvdW5kOiB1aW50NjQKCSsKCWl0b2IKCWZyYW1lX2RpZyA0IC8vIHRydW5jYXRlU3RhcnRDYWNoZWQ6IHVpbnQ2NAoJZnJhbWVfZGlnIDMgLy8gYnl0ZVNpemU6IHVpbnQ2NAoJZXh0cmFjdDMKCWNvbmNhdAoJZnJhbWVfYnVyeSAwIC8vIHJlc3VsdDogYnl0ZXMKCipmb3JfMV9jb250aW51ZToKCS8vIGNvbnRyYWN0cy9saWItcGNnMzItdHMuYWxnby50czo4MwoJLy8gaSA9IGkgKyAxCglmcmFtZV9kaWcgNyAvLyBpOiB1aW50NjQKCWludCAxCgkrCglmcmFtZV9idXJ5IDcgLy8gaTogdWludDY0CgliICpmb3JfMQoKKmZvcl8xX2VuZDoKCippZjBfZW5kOgoJLy8gY29udHJhY3RzL2xpYi1wY2czMi10cy5hbGdvLnRzOjk4CgkvLyByZXR1cm4gW3N0YXRlLCByZXN1bHRdOwoJYnl0ZSAweCAvLyBpbml0aWFsIGhlYWQKCWJ5dGUgMHggLy8gaW5pdGlhbCB0YWlsCglieXRlIDB4MDAwYSAvLyBpbml0aWFsIGhlYWQgb2Zmc2V0CglmcmFtZV9kaWcgLTEgLy8gc3RhdGU6IHVpbnQ2NAoJaXRvYgoJY2FsbHN1YiAqcHJvY2Vzc19zdGF0aWNfdHVwbGVfZWxlbWVudAoJZnJhbWVfZGlnIDAgLy8gcmVzdWx0OiBieXRlcwoJZHVwCglsZW4KCWl0b2IKCWV4dHJhY3QgNiAyCglzd2FwCgljb25jYXQKCWNhbGxzdWIgKnByb2Nlc3NfZHluYW1pY190dXBsZV9lbGVtZW50Cglwb3AgLy8gcG9wIGhlYWQgb2Zmc2V0Cgljb25jYXQgLy8gY29uY2F0IGhlYWQgYW5kIHRhaWwKCgkvLyBzZXQgdGhlIHN1YnJvdXRpbmUgcmV0dXJuIHZhbHVlCglmcmFtZV9idXJ5IDAKCgkvLyBwb3AgYWxsIGxvY2FsIHZhcmlhYmxlcyBmcm9tIHRoZSBzdGFjawoJcG9wbiA4CglyZXRzdWIKCi8vIF9fcGNnNjRSYW5kb20oc3RhdGU6IFt1aW50NjQsIHVpbnQ2NF0pOiBbW3VpbnQ2NCwgdWludDY0XSwgdWludDY0XQpfX3BjZzY0UmFuZG9tOgoJcHJvdG8gMSAxCgoJLy8gUHVzaCBlbXB0eSBieXRlcyBhZnRlciB0aGUgZnJhbWUgcG9pbnRlciB0byByZXNlcnZlIHNwYWNlIGZvciBsb2NhbCB2YXJpYWJsZXMKCWJ5dGUgMHgKCWR1cAoKCS8vIGNvbnRyYWN0cy9saWItcGNnNjQtdHMuYWxnby50czo2CgkvLyBwcm4xID0gdGhpcy5fX3BjZzMyUmFuZG9tKHN0YXRlWzBdKQoJZnJhbWVfZGlnIC0xIC8vIHN0YXRlOiBbdWludDY0LCB1aW50NjRdCglleHRyYWN0IDAgOAoJYnRvaQoJY2FsbHN1YiBfX3BjZzMyUmFuZG9tCglmcmFtZV9idXJ5IDAgLy8gcHJuMTogKHVpbnQ2NCx1aW50NjQpCgoJLy8gKmlmM19jb25kaXRpb24KCS8vIGNvbnRyYWN0cy9saWItcGNnNjQtdHMuYWxnby50czo4CgkvLyBwcm4xWzBdID09PSAwCglmcmFtZV9kaWcgMCAvLyBwcm4xOiAodWludDY0LHVpbnQ2NCkKCWV4dHJhY3QgMCA4CglidG9pCglpbnQgMAoJPT0KCWJ6ICppZjNfZWxzZQoKCS8vICppZjNfY29uc2VxdWVudAoJLy8gY29udHJhY3RzL2xpYi1wY2c2NC10cy5hbGdvLnRzOjkKCS8vIHBybjIgPSB0aGlzLl9fcGNnMzJTdGVwKHN0YXRlWzFdLCAxNDQyNjk1MDQwODg4OTYzNDA5IDw8IDEpCglpbnQgMTQ0MjY5NTA0MDg4ODk2MzQwOQoJaW50IDEKCXNobAoJZnJhbWVfZGlnIC0xIC8vIHN0YXRlOiBbdWludDY0LCB1aW50NjRdCglleHRyYWN0IDggOAoJYnRvaQoJY2FsbHN1YiBfX3BjZzMyU3RlcAoJZnJhbWVfYnVyeSAxIC8vIHBybjI6IHVpbnQ2NAoJYiAqaWYzX2VuZAoKKmlmM19lbHNlOgoJLy8gY29udHJhY3RzL2xpYi1wY2c2NC10cy5hbGdvLnRzOjExCgkvLyBwcm4yID0gdGhpcy5fX3BjZzMyU3RlcChzdGF0ZVsxXSwgMTQ0MjY5NTA0MDg4ODk2MzQwOSkKCWludCAxNDQyNjk1MDQwODg4OTYzNDA5CglmcmFtZV9kaWcgLTEgLy8gc3RhdGU6IFt1aW50NjQsIHVpbnQ2NF0KCWV4dHJhY3QgOCA4CglidG9pCgljYWxsc3ViIF9fcGNnMzJTdGVwCglmcmFtZV9idXJ5IDEgLy8gcHJuMjogdWludDY0CgoqaWYzX2VuZDoKCS8vIGNvbnRyYWN0cy9saWItcGNnNjQtdHMuYWxnby50czoxNAoJLy8gcmV0dXJuIFtbcHJuMVswXSwgcHJuMl0sIChwcm4xWzFdIDw8IDMyKSB8IHRoaXMuX19wY2czMk91dHB1dChzdGF0ZVsxXSldOwoJZnJhbWVfZGlnIDAgLy8gcHJuMTogKHVpbnQ2NCx1aW50NjQpCglleHRyYWN0IDAgOAoJYnRvaQoJaXRvYgoJZnJhbWVfZGlnIDEgLy8gcHJuMjogdWludDY0CglpdG9iCgljb25jYXQKCWZyYW1lX2RpZyAwIC8vIHBybjE6ICh1aW50NjQsdWludDY0KQoJZXh0cmFjdCA4IDgKCWJ0b2kKCWludCAzMgoJc2hsCglmcmFtZV9kaWcgLTEgLy8gc3RhdGU6IFt1aW50NjQsIHVpbnQ2NF0KCWV4dHJhY3QgOCA4CglidG9pCgljYWxsc3ViIF9fcGNnMzJPdXRwdXQKCXwKCWl0b2IKCWNvbmNhdAoKCS8vIHNldCB0aGUgc3Vicm91dGluZSByZXR1cm4gdmFsdWUKCWZyYW1lX2J1cnkgMAoKCS8vIHBvcCBhbGwgbG9jYWwgdmFyaWFibGVzIGZyb20gdGhlIHN0YWNrCglwb3BuIDEKCXJldHN1YgoKLy8gcGNnNjRJbml0KHN0YXRlOiBbdWludDY0LCB1aW50NjRdKTogW3VpbnQ2NCwgdWludDY0XQpwY2c2NEluaXQ6Cglwcm90byAxIDEKCgkvLyBjb250cmFjdHMvbGliLXBjZzY0LXRzLmFsZ28udHM6MTgKCS8vIHJldHVybiBbdGhpcy5fX3BjZzMySW5pdChzdGF0ZVswXSwgMTQ0MjY5NTA0MDg4ODk2MzQwNyksIHRoaXMuX19wY2czMkluaXQoc3RhdGVbMV0sIDE0NDI2OTUwNDA4ODg5NjM0MDkpXTsKCWludCAxNDQyNjk1MDQwODg4OTYzNDA3CglmcmFtZV9kaWcgLTEgLy8gc3RhdGU6IFt1aW50NjQsIHVpbnQ2NF0KCWV4dHJhY3QgMCA4CglidG9pCgljYWxsc3ViIF9fcGNnMzJJbml0CglpdG9iCglpbnQgMTQ0MjY5NTA0MDg4ODk2MzQwOQoJZnJhbWVfZGlnIC0xIC8vIHN0YXRlOiBbdWludDY0LCB1aW50NjRdCglleHRyYWN0IDggOAoJYnRvaQoJY2FsbHN1YiBfX3BjZzMySW5pdAoJaXRvYgoJY29uY2F0CglyZXRzdWIKCi8vIHBjZzY0UmFuZG9tKHN0YXRlOiBbdWludDY0LCB1aW50NjRdLCBsb3dlckJvdW5kOiB1aW50NjQsIHVwcGVyQm91bmQ6IHVpbnQ2NCwgbGVuZ3RoOiB1aW50NjQpOiBbW3VpbnQ2NCwgdWludDY0XSwgdWludDY0W11dCnBjZzY0UmFuZG9tOgoJcHJvdG8gNCAxCgoJLy8gUHVzaCBlbXB0eSBieXRlcyBhZnRlciB0aGUgZnJhbWUgcG9pbnRlciB0byByZXNlcnZlIHNwYWNlIGZvciBsb2NhbCB2YXJpYWJsZXMKCWJ5dGUgMHgKCWR1cG4gOAoKCS8vIGNvbnRyYWN0cy9saWItcGNnNjQtdHMuYWxnby50czoyNwoJLy8gcmVzdWx0OiB1aW50NjRbXSA9IFtdCglieXRlIDB4CglmcmFtZV9idXJ5IDAgLy8gcmVzdWx0OiB1aW50NjRbXQoKCS8vIGNvbnRyYWN0cy9saWItcGNnNjQtdHMuYWxnby50czozMQoJLy8gYXNzZXJ0KGxlbmd0aCA8IDY1NTM2KQoJZnJhbWVfZGlnIC00IC8vIGxlbmd0aDogdWludDY0CglpbnQgNjU1MzYKCTwKCWFzc2VydAoKCS8vIGNvbnRyYWN0cy9saWItcGNnNjQtdHMuYWxnby50czozNQoJLy8gbmV3U3RhdGUgPSBzdGF0ZQoJZnJhbWVfZGlnIC0xIC8vIHN0YXRlOiBbdWludDY0LCB1aW50NjRdCglmcmFtZV9idXJ5IDMgLy8gbmV3U3RhdGU6IFt1aW50NjQsIHVpbnQ2NF0KCgkvLyAqaWY0X2NvbmRpdGlvbgoJLy8gY29udHJhY3RzL2xpYi1wY2c2NC10cy5hbGdvLnRzOjM3CgkvLyBsb3dlckJvdW5kID09PSAwICYmIHVwcGVyQm91bmQgPT09IDAKCWZyYW1lX2RpZyAtMiAvLyBsb3dlckJvdW5kOiB1aW50NjQKCWludCAwCgk9PQoJZHVwCglieiAqc2tpcF9hbmQxCglmcmFtZV9kaWcgLTMgLy8gdXBwZXJCb3VuZDogdWludDY0CglpbnQgMAoJPT0KCSYmCgoqc2tpcF9hbmQxOgoJYnogKmlmNF9lbHNlCgoJLy8gKmlmNF9jb25zZXF1ZW50CgkvLyBjb250cmFjdHMvbGliLXBjZzY0LXRzLmFsZ28udHM6MzgKCS8vIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuZ3RoOyBpID0gaSArIDEpCglpbnQgMAoJZnJhbWVfYnVyeSA1IC8vIGk6IHVpbnQ2NAoKKmZvcl8yOgoJLy8gY29udHJhY3RzL2xpYi1wY2c2NC10cy5hbGdvLnRzOjM4CgkvLyBpIDwgbGVuZ3RoCglmcmFtZV9kaWcgNSAvLyBpOiB1aW50NjQKCWZyYW1lX2RpZyAtNCAvLyBsZW5ndGg6IHVpbnQ2NAoJPAoJYnogKmZvcl8yX2VuZAoKCS8vIGNvbnRyYWN0cy9saWItcGNnNjQtdHMuYWxnby50czozOQoJLy8gdGVtcCA9IHRoaXMuX19wY2c2NFJhbmRvbShuZXdTdGF0ZSkKCWZyYW1lX2RpZyAzIC8vIG5ld1N0YXRlOiBbdWludDY0LCB1aW50NjRdCgljYWxsc3ViIF9fcGNnNjRSYW5kb20KCWZyYW1lX2J1cnkgNiAvLyB0ZW1wOiAoKHVpbnQ2NCx1aW50NjQpLHVpbnQ2NCkKCgkvLyBjb250cmFjdHMvbGliLXBjZzY0LXRzLmFsZ28udHM6NDAKCS8vIG5ld1N0YXRlID0gdGVtcFswXQoJZnJhbWVfZGlnIDYgLy8gdGVtcDogKCh1aW50NjQsdWludDY0KSx1aW50NjQpCglleHRyYWN0IDAgMTYKCWZyYW1lX2J1cnkgMyAvLyBuZXdTdGF0ZTogW3VpbnQ2NCwgdWludDY0XQoKCS8vIGNvbnRyYWN0cy9saWItcGNnNjQtdHMuYWxnby50czo0MQoJLy8gbiA9IHRlbXBbMV0KCWZyYW1lX2RpZyA2IC8vIHRlbXA6ICgodWludDY0LHVpbnQ2NCksdWludDY0KQoJZXh0cmFjdCAxNiA4CglidG9pCglmcmFtZV9idXJ5IDQgLy8gbjogdWludDY0CgoJLy8gY29udHJhY3RzL2xpYi1wY2c2NC10cy5hbGdvLnRzOjQyCgkvLyByZXN1bHQucHVzaChuKQoJZnJhbWVfZGlnIDAgLy8gcmVzdWx0OiB1aW50NjRbXQoJZnJhbWVfZGlnIDQgLy8gbjogdWludDY0CglpdG9iCgljb25jYXQKCWZyYW1lX2J1cnkgMCAvLyByZXN1bHQ6IHVpbnQ2NFtdCgoqZm9yXzJfY29udGludWU6CgkvLyBjb250cmFjdHMvbGliLXBjZzY0LXRzLmFsZ28udHM6MzgKCS8vIGkgPSBpICsgMQoJZnJhbWVfZGlnIDUgLy8gaTogdWludDY0CglpbnQgMQoJKwoJZnJhbWVfYnVyeSA1IC8vIGk6IHVpbnQ2NAoJYiAqZm9yXzIKCipmb3JfMl9lbmQ6CgliICppZjRfZW5kCgoqaWY0X2Vsc2U6CgkvLyAqaWY1X2NvbmRpdGlvbgoJLy8gY29udHJhY3RzL2xpYi1wY2c2NC10cy5hbGdvLnRzOjQ1CgkvLyB1cHBlckJvdW5kICE9PSAwCglmcmFtZV9kaWcgLTMgLy8gdXBwZXJCb3VuZDogdWludDY0CglpbnQgMAoJIT0KCWJ6ICppZjVfZWxzZQoKCS8vICppZjVfY29uc2VxdWVudAoJLy8gY29udHJhY3RzL2xpYi1wY2c2NC10cy5hbGdvLnRzOjQ2CgkvLyBhc3NlcnQodXBwZXJCb3VuZCA+IDEpCglmcmFtZV9kaWcgLTMgLy8gdXBwZXJCb3VuZDogdWludDY0CglpbnQgMQoJPgoJYXNzZXJ0CgoJLy8gY29udHJhY3RzL2xpYi1wY2c2NC10cy5hbGdvLnRzOjQ3CgkvLyBhc3NlcnQobG93ZXJCb3VuZCA8IHVwcGVyQm91bmQgLSAxKQoJZnJhbWVfZGlnIC0yIC8vIGxvd2VyQm91bmQ6IHVpbnQ2NAoJZnJhbWVfZGlnIC0zIC8vIHVwcGVyQm91bmQ6IHVpbnQ2NAoJaW50IDEKCS0KCTwKCWFzc2VydAoKCS8vIGNvbnRyYWN0cy9saWItcGNnNjQtdHMuYWxnby50czo0OQoJLy8gYWJzb2x1dGVCb3VuZCA9IHVwcGVyQm91bmQgLSBsb3dlckJvdW5kCglmcmFtZV9kaWcgLTMgLy8gdXBwZXJCb3VuZDogdWludDY0CglmcmFtZV9kaWcgLTIgLy8gbG93ZXJCb3VuZDogdWludDY0CgktCglmcmFtZV9idXJ5IDEgLy8gYWJzb2x1dGVCb3VuZDogdWludDY0CgliICppZjVfZW5kCgoqaWY1X2Vsc2U6CgkvLyBjb250cmFjdHMvbGliLXBjZzY0LXRzLmFsZ28udHM6NTEKCS8vIGFzc2VydChsb3dlckJvdW5kIDwgMTg0NDY3NDQwNzM3MDk1NTE2MTUpCglmcmFtZV9kaWcgLTIgLy8gbG93ZXJCb3VuZDogdWludDY0CglpbnQgMTg0NDY3NDQwNzM3MDk1NTE2MTUKCTwKCWFzc2VydAoKCS8vIGNvbnRyYWN0cy9saWItcGNnNjQtdHMuYWxnby50czo1MwoJLy8gYWJzb2x1dGVCb3VuZCA9ICgoMTg0NDY3NDQwNzM3MDk1NTE2MTYgYXMgdWludDEyOCkgLSAobG93ZXJCb3VuZCBhcyB1aW50MTI4KSkgYXMgdWludDY0CglieXRlIDB4MDAwMDAwMDAwMDAwMDAwMTAwMDAwMDAwMDAwMDAwMDAKCWZyYW1lX2RpZyAtMiAvLyBsb3dlckJvdW5kOiB1aW50NjQKCWl0b2IKCWItCglkdXAKCWJpdGxlbgoJaW50IDY0Cgk8PQoJYXNzZXJ0CglieXRlIDB4RkZGRkZGRkZGRkZGRkZGRgoJYiYKCWR1cAoJbGVuCglkdXAKCWludCA4CgktCglzd2FwCglzdWJzdHJpbmczCglidG9pCglmcmFtZV9idXJ5IDEgLy8gYWJzb2x1dGVCb3VuZDogdWludDY0CgoqaWY1X2VuZDoKCS8vIGNvbnRyYWN0cy9saWItcGNnNjQtdHMuYWxnby50czo1NgoJLy8gdGhyZXNob2xkID0gdGhpcy5fX3R3b3NDb21wbGVtZW50KGFic29sdXRlQm91bmQpICUgYWJzb2x1dGVCb3VuZAoJZnJhbWVfZGlnIDEgLy8gYWJzb2x1dGVCb3VuZDogdWludDY0CgljYWxsc3ViIF9fdHdvc0NvbXBsZW1lbnQKCWZyYW1lX2RpZyAxIC8vIGFic29sdXRlQm91bmQ6IHVpbnQ2NAoJJQoJZnJhbWVfYnVyeSAyIC8vIHRocmVzaG9sZDogdWludDY0CgoJLy8gY29udHJhY3RzL2xpYi1wY2c2NC10cy5hbGdvLnRzOjU4CgkvLyBmb3IgKGxldCBpID0gMDsgaSA8IGxlbmd0aDsgaSA9IGkgKyAxKQoJaW50IDAKCWZyYW1lX2J1cnkgNyAvLyBpOiB1aW50NjQKCipmb3JfMzoKCS8vIGNvbnRyYWN0cy9saWItcGNnNjQtdHMuYWxnby50czo1OAoJLy8gaSA8IGxlbmd0aAoJZnJhbWVfZGlnIDcgLy8gaTogdWludDY0CglmcmFtZV9kaWcgLTQgLy8gbGVuZ3RoOiB1aW50NjQKCTwKCWJ6ICpmb3JfM19lbmQKCip3aGlsZV8xOgoKKndoaWxlXzFfY29udGludWU6CgkvLyBjb250cmFjdHMvbGliLXBjZzY0LXRzLmFsZ28udHM6NjAKCS8vIHRydWUKCWludCAxCglieiAqd2hpbGVfMV9lbmQKCgkvLyBjb250cmFjdHMvbGliLXBjZzY0LXRzLmFsZ28udHM6NjEKCS8vIHRlbXAgPSB0aGlzLl9fcGNnNjRSYW5kb20obmV3U3RhdGUpCglmcmFtZV9kaWcgMyAvLyBuZXdTdGF0ZTogW3VpbnQ2NCwgdWludDY0XQoJY2FsbHN1YiBfX3BjZzY0UmFuZG9tCglmcmFtZV9idXJ5IDggLy8gdGVtcDogKCh1aW50NjQsdWludDY0KSx1aW50NjQpCgoJLy8gY29udHJhY3RzL2xpYi1wY2c2NC10cy5hbGdvLnRzOjYyCgkvLyBuZXdTdGF0ZSA9IHRlbXBbMF0KCWZyYW1lX2RpZyA4IC8vIHRlbXA6ICgodWludDY0LHVpbnQ2NCksdWludDY0KQoJZXh0cmFjdCAwIDE2CglmcmFtZV9idXJ5IDMgLy8gbmV3U3RhdGU6IFt1aW50NjQsIHVpbnQ2NF0KCgkvLyBjb250cmFjdHMvbGliLXBjZzY0LXRzLmFsZ28udHM6NjMKCS8vIG4gPSB0ZW1wWzFdCglmcmFtZV9kaWcgOCAvLyB0ZW1wOiAoKHVpbnQ2NCx1aW50NjQpLHVpbnQ2NCkKCWV4dHJhY3QgMTYgOAoJYnRvaQoJZnJhbWVfYnVyeSA0IC8vIG46IHVpbnQ2NAoKCS8vICppZjZfY29uZGl0aW9uCgkvLyBjb250cmFjdHMvbGliLXBjZzY0LXRzLmFsZ28udHM6NjQKCS8vIG4gPj0gdGhyZXNob2xkCglmcmFtZV9kaWcgNCAvLyBuOiB1aW50NjQKCWZyYW1lX2RpZyAyIC8vIHRocmVzaG9sZDogdWludDY0Cgk+PQoJYnogKmlmNl9lbmQKCgkvLyAqaWY2X2NvbnNlcXVlbnQKCWIgKndoaWxlXzFfZW5kCgoqaWY2X2VuZDoKCWIgKndoaWxlXzEKCip3aGlsZV8xX2VuZDoKCS8vIGNvbnRyYWN0cy9saWItcGNnNjQtdHMuYWxnby50czo2OAoJLy8gcmVzdWx0LnB1c2gobikKCWZyYW1lX2RpZyAwIC8vIHJlc3VsdDogdWludDY0W10KCWZyYW1lX2RpZyA0IC8vIG46IHVpbnQ2NAoJaXRvYgoJY29uY2F0CglmcmFtZV9idXJ5IDAgLy8gcmVzdWx0OiB1aW50NjRbXQoKKmZvcl8zX2NvbnRpbnVlOgoJLy8gY29udHJhY3RzL2xpYi1wY2c2NC10cy5hbGdvLnRzOjU4CgkvLyBpID0gaSArIDEKCWZyYW1lX2RpZyA3IC8vIGk6IHVpbnQ2NAoJaW50IDEKCSsKCWZyYW1lX2J1cnkgNyAvLyBpOiB1aW50NjQKCWIgKmZvcl8zCgoqZm9yXzNfZW5kOgoKKmlmNF9lbmQ6CgkvLyBjb250cmFjdHMvbGliLXBjZzY0LXRzLmFsZ28udHM6NzIKCS8vIHJldHVybiBbbmV3U3RhdGUsIHJlc3VsdF07CglieXRlIDB4IC8vIGluaXRpYWwgaGVhZAoJYnl0ZSAweCAvLyBpbml0aWFsIHRhaWwKCWJ5dGUgMHgwMDEyIC8vIGluaXRpYWwgaGVhZCBvZmZzZXQKCWZyYW1lX2RpZyAzIC8vIG5ld1N0YXRlOiBbdWludDY0LCB1aW50NjRdCgljYWxsc3ViICpwcm9jZXNzX3N0YXRpY190dXBsZV9lbGVtZW50CglmcmFtZV9kaWcgMCAvLyByZXN1bHQ6IHVpbnQ2NFtdCglkdXAKCWxlbgoJaW50IDgKCS8KCWl0b2IKCWV4dHJhY3QgNiAyCglzd2FwCgljb25jYXQKCWNhbGxzdWIgKnByb2Nlc3NfZHluYW1pY190dXBsZV9lbGVtZW50Cglwb3AgLy8gcG9wIGhlYWQgb2Zmc2V0Cgljb25jYXQgLy8gY29uY2F0IGhlYWQgYW5kIHRhaWwKCgkvLyBzZXQgdGhlIHN1YnJvdXRpbmUgcmV0dXJuIHZhbHVlCglmcmFtZV9idXJ5IDAKCgkvLyBwb3AgYWxsIGxvY2FsIHZhcmlhYmxlcyBmcm9tIHRoZSBzdGFjawoJcG9wbiA4CglyZXRzdWIKCi8vIGJvdW5kZWRSYW5kVUludDY0KGJ5dGVbMTZdLHVpbnQ2NCx1aW50NjQsdWludDY0KXVpbnQ2NFtdCiphYmlfcm91dGVfYm91bmRlZFJhbmRVSW50NjQ6CgkvLyBUaGUgQUJJIHJldHVybiBwcmVmaXgKCWJ5dGUgMHgxNTFmN2M3NQoKCS8vIGxlbmd0aDogdWludDY0Cgl0eG5hIEFwcGxpY2F0aW9uQXJncyA0CglidG9pCgoJLy8gdXBwZXJCb3VuZDogdWludDY0Cgl0eG5hIEFwcGxpY2F0aW9uQXJncyAzCglidG9pCgoJLy8gbG93ZXJCb3VuZDogdWludDY0Cgl0eG5hIEFwcGxpY2F0aW9uQXJncyAyCglidG9pCgoJLy8gc2VlZDogYnl0ZVsxNl0KCXR4bmEgQXBwbGljYXRpb25BcmdzIDEKCWR1cAoJbGVuCglpbnQgMTYKCT09Cglhc3NlcnQKCgkvLyBleGVjdXRlIGJvdW5kZWRSYW5kVUludDY0KGJ5dGVbMTZdLHVpbnQ2NCx1aW50NjQsdWludDY0KXVpbnQ2NFtdCgljYWxsc3ViIGJvdW5kZWRSYW5kVUludDY0CglkdXAKCWxlbgoJaW50IDgKCS8KCWl0b2IKCWV4dHJhY3QgNiAyCglzd2FwCgljb25jYXQKCWNvbmNhdAoJbG9nCglpbnQgMQoJcmV0dXJuCgovLyBib3VuZGVkUmFuZFVJbnQ2NChzZWVkOiBieXRlczwxNj4sIGxvd2VyQm91bmQ6IHVpbnQ2NCwgdXBwZXJCb3VuZDogdWludDY0LCBsZW5ndGg6IHVpbnQ2NCk6IHVpbnQ2NFtdCmJvdW5kZWRSYW5kVUludDY0OgoJcHJvdG8gNCAxCgoJLy8gUHVzaCBlbXB0eSBieXRlcyBhZnRlciB0aGUgZnJhbWUgcG9pbnRlciB0byByZXNlcnZlIHNwYWNlIGZvciBsb2NhbCB2YXJpYWJsZXMKCWJ5dGUgMHgKCgkvLyBjb250cmFjdHMvbGliLXBjZzY0LXRzLWV4cG9zZXIuYWxnby50czo1CgkvLyBybmdTdGF0ZSA9IHRoaXMucGNnNjRJbml0KFtleHRyYWN0VWludDY0KHNlZWQsIDApLCBleHRyYWN0VWludDY0KHNlZWQsIDgpXSkKCWZyYW1lX2RpZyAtMSAvLyBzZWVkOiBieXRlczwxNj4KCWludCAwCglleHRyYWN0X3VpbnQ2NAoJaXRvYgoJZnJhbWVfZGlnIC0xIC8vIHNlZWQ6IGJ5dGVzPDE2PgoJaW50IDgKCWV4dHJhY3RfdWludDY0CglpdG9iCgljb25jYXQKCWNhbGxzdWIgcGNnNjRJbml0CglmcmFtZV9idXJ5IDAgLy8gcm5nU3RhdGU6ICh1aW50NjQsdWludDY0KQoKCS8vIGNvbnRyYWN0cy9saWItcGNnNjQtdHMtZXhwb3Nlci5hbGdvLnRzOjcKCS8vIHJldHVybiB0aGlzLnBjZzY0UmFuZG9tKHJuZ1N0YXRlLCBsb3dlckJvdW5kLCB1cHBlckJvdW5kLCBsZW5ndGgpWzFdOwoJZnJhbWVfZGlnIC00IC8vIGxlbmd0aDogdWludDY0CglmcmFtZV9kaWcgLTMgLy8gdXBwZXJCb3VuZDogdWludDY0CglmcmFtZV9kaWcgLTIgLy8gbG93ZXJCb3VuZDogdWludDY0CglmcmFtZV9kaWcgMCAvLyBybmdTdGF0ZTogKHVpbnQ2NCx1aW50NjQpCgljYWxsc3ViIHBjZzY0UmFuZG9tCglzdG9yZSAyNTUgLy8gZnVsbCBhcnJheQoJaW50IDE2Cglsb2FkIDI1NSAvLyBmdWxsIGFycmF5Cglsb2FkIDI1NSAvLyBmdWxsIGFycmF5Cgl1bmNvdmVyIDIKCWV4dHJhY3RfdWludDE2CglkdXAgLy8gZHVwbGljYXRlIHN0YXJ0IG9mIGVsZW1lbnQKCWxvYWQgMjU1IC8vIGZ1bGwgYXJyYXkKCXN3YXAKCWV4dHJhY3RfdWludDE2IC8vIGdldCBudW1iZXIgb2YgZWxlbWVudHMKCWludCA4IC8vIGdldCB0eXBlIGxlbmd0aAoJKiAvLyBtdWx0aXBseSBieSB0eXBlIGxlbmd0aAoJaW50IDIKCSsgLy8gYWRkIHR3byBmb3IgbGVuZ3RoCglleHRyYWN0MwoJZXh0cmFjdCAyIDAKCgkvLyBzZXQgdGhlIHN1YnJvdXRpbmUgcmV0dXJuIHZhbHVlCglmcmFtZV9idXJ5IDAKCXJldHN1YgoKKmFiaV9yb3V0ZV9jcmVhdGVBcHBsaWNhdGlvbjoKCWludCAxCglyZXR1cm4KCipjcmVhdGVfTm9PcDoKCW1ldGhvZCAiY3JlYXRlQXBwbGljYXRpb24oKXZvaWQiCgl0eG5hIEFwcGxpY2F0aW9uQXJncyAwCgltYXRjaCAqYWJpX3JvdXRlX2NyZWF0ZUFwcGxpY2F0aW9uCgllcnIKCipjYWxsX05vT3A6CgltZXRob2QgImJvdW5kZWRSYW5kVUludDY0KGJ5dGVbMTZdLHVpbnQ2NCx1aW50NjQsdWludDY0KXVpbnQ2NFtdIgoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMAoJbWF0Y2ggKmFiaV9yb3V0ZV9ib3VuZGVkUmFuZFVJbnQ2NAoJZXJyCgoqcHJvY2Vzc19zdGF0aWNfdHVwbGVfZWxlbWVudDoKCXByb3RvIDQgMwoJZnJhbWVfZGlnIC00IC8vIHR1cGxlIGhlYWQKCWZyYW1lX2RpZyAtMSAvLyBlbGVtZW50Cgljb25jYXQKCWZyYW1lX2RpZyAtMyAvLyB0dXBsZSB0YWlsCglmcmFtZV9kaWcgLTIgLy8gaGVhZCBvZmZzZXQKCXJldHN1YgoKKnByb2Nlc3NfZHluYW1pY190dXBsZV9lbGVtZW50OgoJcHJvdG8gNCAzCglmcmFtZV9kaWcgLTQgLy8gdHVwbGUgaGVhZAoJZnJhbWVfZGlnIC0yIC8vIGhlYWQgb2Zmc2V0Cgljb25jYXQKCWZyYW1lX2J1cnkgLTQgLy8gdHVwbGUgaGVhZAoJZnJhbWVfZGlnIC0xIC8vIGVsZW1lbnQKCWR1cAoJbGVuCglmcmFtZV9kaWcgLTIgLy8gaGVhZCBvZmZzZXQKCWJ0b2kKCSsKCWl0b2IKCWV4dHJhY3QgNiAyCglmcmFtZV9idXJ5IC0yIC8vIGhlYWQgb2Zmc2V0CglmcmFtZV9kaWcgLTMgLy8gdHVwbGUgdGFpbAoJc3dhcAoJY29uY2F0CglmcmFtZV9idXJ5IC0zIC8vIHR1cGxlIHRhaWwKCWZyYW1lX2RpZyAtNCAvLyB0dXBsZSBoZWFkCglmcmFtZV9kaWcgLTMgLy8gdHVwbGUgdGFpbAoJZnJhbWVfZGlnIC0yIC8vIGhlYWQgb2Zmc2V0CglyZXRzdWI=",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDEw"
  },
  "contract": {
    "name": "LibPcg64TsExposer",
    "desc": "",
    "methods": [
      {
        "name": "boundedRandUInt64",
        "args": [
          {
            "name": "seed",
            "type": "byte[16]"
          },
          {
            "name": "lowerBound",
            "type": "uint64"
          },
          {
            "name": "upperBound",
            "type": "uint64"
          },
          {
            "name": "length",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "uint64[]"
        }
      },
      {
        "name": "createApplication",
        "args": [],
        "returns": {
          "type": "void"
        }
      }
    ]
  }
}

/**
 * Defines an onCompletionAction of 'no_op'
 */
export type OnCompleteNoOp =  { onCompleteAction?: 'no_op' | OnApplicationComplete.NoOpOC }
/**
 * Defines an onCompletionAction of 'opt_in'
 */
export type OnCompleteOptIn =  { onCompleteAction: 'opt_in' | OnApplicationComplete.OptInOC }
/**
 * Defines an onCompletionAction of 'close_out'
 */
export type OnCompleteCloseOut =  { onCompleteAction: 'close_out' | OnApplicationComplete.CloseOutOC }
/**
 * Defines an onCompletionAction of 'delete_application'
 */
export type OnCompleteDelApp =  { onCompleteAction: 'delete_application' | OnApplicationComplete.DeleteApplicationOC }
/**
 * Defines an onCompletionAction of 'update_application'
 */
export type OnCompleteUpdApp =  { onCompleteAction: 'update_application' | OnApplicationComplete.UpdateApplicationOC }
/**
 * A state record containing a single unsigned integer
 */
export type IntegerState = {
  /**
   * Gets the state value as a BigInt.
   */
  asBigInt(): bigint
  /**
   * Gets the state value as a number.
   */
  asNumber(): number
}
/**
 * A state record containing binary data
 */
export type BinaryState = {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array
  /**
   * Gets the state value as a string
   */
  asString(): string
}

export type AppCreateCallTransactionResult = AppCallTransactionResult & Partial<AppCompilationResult> & AppReference
export type AppUpdateCallTransactionResult = AppCallTransactionResult & Partial<AppCompilationResult>

export type AppClientComposeCallCoreParams = Omit<AppClientCallCoreParams, 'sendParams'> & {
  sendParams?: Omit<SendTransactionParams, 'skipSending' | 'atc' | 'skipWaiting' | 'maxRoundsToWaitForConfirmation' | 'populateAppCallResources'>
}
export type AppClientComposeExecuteParams = Pick<SendTransactionParams, 'skipWaiting' | 'maxRoundsToWaitForConfirmation' | 'populateAppCallResources' | 'suppressLog'>

/**
 * Defines the types of available calls and state of the LibPcg64TsExposer smart contract.
 */
export type LibPcg64TsExposer = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'boundedRandUInt64(byte[16],uint64,uint64,uint64)uint64[]' | 'boundedRandUInt64', {
      argsObj: {
        seed: Uint8Array
        lowerBound: bigint | number
        upperBound: bigint | number
        length: bigint | number
      }
      argsTuple: [seed: Uint8Array, lowerBound: bigint | number, upperBound: bigint | number, length: bigint | number]
      returns: bigint[]
    }>
    & Record<'createApplication()void' | 'createApplication', {
      argsObj: {
      }
      argsTuple: []
      returns: void
    }>
}
/**
 * Defines the possible abi call signatures
 */
export type LibPcg64TsExposerSig = keyof LibPcg64TsExposer['methods']
/**
 * Defines an object containing all relevant parameters for a single call to the contract. Where TSignature is undefined, a bare call is made
 */
export type TypedCallParams<TSignature extends LibPcg64TsExposerSig | undefined> = {
  method: TSignature
  methodArgs: TSignature extends undefined ? undefined : Array<ABIAppCallArg | undefined>
} & AppClientCallCoreParams & CoreAppCallArgs
/**
 * Defines the arguments required for a bare call
 */
export type BareCallArgs = Omit<RawAppCallArgs, keyof CoreAppCallArgs>
/**
 * Maps a method signature from the LibPcg64TsExposer smart contract to the method's arguments in either tuple of struct form
 */
export type MethodArgs<TSignature extends LibPcg64TsExposerSig> = LibPcg64TsExposer['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the LibPcg64TsExposer smart contract to the method's return type
 */
export type MethodReturn<TSignature extends LibPcg64TsExposerSig> = LibPcg64TsExposer['methods'][TSignature]['returns']

/**
 * A factory for available 'create' calls
 */
export type LibPcg64TsExposerCreateCalls = (typeof LibPcg64TsExposerCallFactory)['create']
/**
 * Defines supported create methods for this smart contract
 */
export type LibPcg64TsExposerCreateCallParams =
  | (TypedCallParams<'createApplication()void'> & (OnCompleteNoOp))
/**
 * Defines arguments required for the deploy method.
 */
export type LibPcg64TsExposerDeployArgs = {
  deployTimeParams?: TealTemplateParams
  /**
   * A delegate which takes a create call factory and returns the create call params for this smart contract
   */
  createCall?: (callFactory: LibPcg64TsExposerCreateCalls) => LibPcg64TsExposerCreateCallParams
}


/**
 * Exposes methods for constructing all available smart contract calls
 */
export abstract class LibPcg64TsExposerCallFactory {
  /**
   * Gets available create call factories
   */
  static get create() {
    return {
      /**
       * Constructs a create call for the LibPcg64TsExposer smart contract using the createApplication()void ABI method
       *
       * @param args Any args for the contract call
       * @param params Any additional parameters for the call
       * @returns A TypedCallParams object for the call
       */
      createApplication(args: MethodArgs<'createApplication()void'>, params: AppClientCallCoreParams & CoreAppCallArgs & AppClientCompilationParams & (OnCompleteNoOp) = {}) {
        return {
          method: 'createApplication()void' as const,
          methodArgs: Array.isArray(args) ? args : [],
          ...params,
        }
      },
    }
  }

  /**
   * Constructs a no op call for the boundedRandUInt64(byte[16],uint64,uint64,uint64)uint64[] ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static boundedRandUInt64(args: MethodArgs<'boundedRandUInt64(byte[16],uint64,uint64,uint64)uint64[]'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'boundedRandUInt64(byte[16],uint64,uint64,uint64)uint64[]' as const,
      methodArgs: Array.isArray(args) ? args : [args.seed, args.lowerBound, args.upperBound, args.length],
      ...params,
    }
  }
}

/**
 * A client to make calls to the LibPcg64TsExposer smart contract
 */
export class LibPcg64TsExposerClient {
  /**
   * The underlying `ApplicationClient` for when you want to have more flexibility
   */
  public readonly appClient: ApplicationClient

  private readonly sender: SendTransactionFrom | undefined

  /**
   * Creates a new instance of `LibPcg64TsExposerClient`
   *
   * @param appDetails appDetails The details to identify the app to deploy
   * @param algod An algod client instance
   */
  constructor(appDetails: AppDetails, private algod: Algodv2) {
    this.sender = appDetails.sender
    this.appClient = algokit.getAppClient({
      ...appDetails,
      app: APP_SPEC
    }, algod)
  }

  /**
   * Checks for decode errors on the AppCallTransactionResult and maps the return value to the specified generic type
   *
   * @param result The AppCallTransactionResult to be mapped
   * @param returnValueFormatter An optional delegate to format the return value if required
   * @returns The smart contract response with an updated return value
   */
  protected mapReturnValue<TReturn, TResult extends AppCallTransactionResult = AppCallTransactionResult>(result: AppCallTransactionResult, returnValueFormatter?: (value: any) => TReturn): AppCallTransactionResultOfType<TReturn> & TResult {
    if(result.return?.decodeError) {
      throw result.return.decodeError
    }
    const returnValue = result.return?.returnValue !== undefined && returnValueFormatter !== undefined
      ? returnValueFormatter(result.return.returnValue)
      : result.return?.returnValue as TReturn | undefined
      return { ...result, return: returnValue } as AppCallTransactionResultOfType<TReturn> & TResult
  }

  /**
   * Calls the ABI method with the matching signature using an onCompletion code of NO_OP
   *
   * @param typedCallParams An object containing the method signature, args, and any other relevant parameters
   * @param returnValueFormatter An optional delegate which when provided will be used to map non-undefined return values to the target type
   * @returns The result of the smart contract call
   */
  public async call<TSignature extends keyof LibPcg64TsExposer['methods']>(typedCallParams: TypedCallParams<TSignature>, returnValueFormatter?: (value: any) => MethodReturn<TSignature>) {
    return this.mapReturnValue<MethodReturn<TSignature>>(await this.appClient.call(typedCallParams), returnValueFormatter)
  }

  /**
   * Idempotently deploys the LibPcg64TsExposer smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public deploy(params: LibPcg64TsExposerDeployArgs & AppClientDeployCoreParams = {}): ReturnType<ApplicationClient['deploy']> {
    const createArgs = params.createCall?.(LibPcg64TsExposerCallFactory.create)
    return this.appClient.deploy({
      ...params,
      createArgs,
      createOnCompleteAction: createArgs?.onCompleteAction,
    })
  }

  /**
   * Gets available create methods
   */
  public get create() {
    const $this = this
    return {
      /**
       * Creates a new instance of the LibPcg64TsExposer smart contract using the createApplication()void ABI method.
       *
       * @param args The arguments for the smart contract call
       * @param params Any additional parameters for the call
       * @returns The create result
       */
      async createApplication(args: MethodArgs<'createApplication()void'>, params: AppClientCallCoreParams & AppClientCompilationParams & (OnCompleteNoOp) = {}) {
        return $this.mapReturnValue<MethodReturn<'createApplication()void'>, AppCreateCallTransactionResult>(await $this.appClient.create(LibPcg64TsExposerCallFactory.create.createApplication(args, params)))
      },
    }
  }

  /**
   * Makes a clear_state call to an existing instance of the LibPcg64TsExposer smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The clear_state result
   */
  public clearState(args: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.appClient.clearState(args)
  }

  /**
   * Calls the boundedRandUInt64(byte[16],uint64,uint64,uint64)uint64[] ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public boundedRandUInt64(args: MethodArgs<'boundedRandUInt64(byte[16],uint64,uint64,uint64)uint64[]'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(LibPcg64TsExposerCallFactory.boundedRandUInt64(args, params))
  }

  public compose(): LibPcg64TsExposerComposer {
    const client = this
    const atc = new AtomicTransactionComposer()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: any) => any)> = []
    return {
      boundedRandUInt64(args: MethodArgs<'boundedRandUInt64(byte[16],uint64,uint64,uint64)uint64[]'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.boundedRandUInt64(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      clearState(args?: BareCallArgs & AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.clearState({...args, sendParams: {...args?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom) {
        promiseChain = promiseChain.then(async () => atc.addTransaction(await algokit.getTransactionWithSigner(txn, defaultSender ?? client.sender)))
        return this
      },
      async atc() {
        await promiseChain
        return atc
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await atc.simulate(client.algod, new modelsv2.SimulateRequest({ txnGroups: [], ...options }))
        return {
          ...result,
          returns: result.methodResults?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue)
        }
      },
      async execute(sendParams?: AppClientComposeExecuteParams) {
        await promiseChain
        const result = await algokit.sendAtomicTransactionComposer({ atc, sendParams }, client.algod)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue)
        }
      }
    } as unknown as LibPcg64TsExposerComposer
  }
}
export type LibPcg64TsExposerComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the boundedRandUInt64(byte[16],uint64,uint64,uint64)uint64[] ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  boundedRandUInt64(args: MethodArgs<'boundedRandUInt64(byte[16],uint64,uint64,uint64)uint64[]'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): LibPcg64TsExposerComposer<[...TReturns, MethodReturn<'boundedRandUInt64(byte[16],uint64,uint64,uint64)uint64[]'>]>

  /**
   * Makes a clear_state call to an existing instance of the LibPcg64TsExposer smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(args?: BareCallArgs & AppClientComposeCallCoreParams & CoreAppCallArgs): LibPcg64TsExposerComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn One of: A TransactionWithSigner object (returned as is), a TransactionToSign object (signer is obtained from the signer property), a Transaction object (signer is extracted from the defaultSender parameter), an async SendTransactionResult returned by one of algokit utils helpers (signer is obtained from the defaultSender parameter)
   * @param defaultSender The default sender to be used to obtain a signer where the object provided to the transaction parameter does not include a signer.
   */
  addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom): LibPcg64TsExposerComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  atc(): Promise<AtomicTransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(options?: SimulateOptions): Promise<LibPcg64TsExposerComposerSimulateResult<TReturns>>
  /**
   * Executes the transaction group and returns the results
   */
  execute(sendParams?: AppClientComposeExecuteParams): Promise<LibPcg64TsExposerComposerResults<TReturns>>
}
export type SimulateOptions = Omit<ConstructorParameters<typeof modelsv2.SimulateRequest>[0], 'txnGroups'>
export type LibPcg64TsExposerComposerSimulateResult<TReturns extends [...any[]]> = {
  returns: TReturns
  methodResults: ABIResult[]
  simulateResponse: modelsv2.SimulateResponse
}
export type LibPcg64TsExposerComposerResults<TReturns extends [...any[]]> = {
  returns: TReturns
  groupId: string
  txIds: string[]
  transactions: Transaction[]
}
