#pragma version 10
intcblock 1 0 8 2 4 16 32 1442695040888963407 6
bytecblock 0x 0x151f7c75 0x000a

// This TEAL was generated by TEALScript v0.105.5
// https://github.com/algorandfoundation/TEALScript

// This contract is compliant with and/or implements the following ARCs: [ ARC4 ]

// The following ten lines of TEAL handle initial program flow
// This pattern is used to make it easy for anyone to parse the start of the program and determine if a specific action is allowed
// Here, action refers to the OnComplete in combination with whether the app is being created or called
// Every possible action for this contract is represented in the switch statement
// If the action is not implemented in the contract, its respective branch will be "*NOT_IMPLEMENTED" which just contains "err"
txn ApplicationID
!
intc 8 // 6
*
txn OnCompletion
+
switch *call_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *call_UpdateApplication *NOT_IMPLEMENTED *create_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED

*NOT_IMPLEMENTED:
	// The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?
	err

// bounded_rand_uint32(byte[8],uint32,uint32,uint16)uint32[]
*abi_route_bounded_rand_uint32:
	// The ABI return prefix
	bytec 1 // 0x151f7c75

	// length: uint16
	txna ApplicationArgs 4
	dup
	len
	intc 3 // 2
	==

	// argument 0 (length) for bounded_rand_uint32 must be a uint16
	assert
	btoi

	// upper_bound: uint32
	txna ApplicationArgs 3
	dup
	len
	intc 4 // 4
	==

	// argument 1 (upper_bound) for bounded_rand_uint32 must be a uint32
	assert
	btoi

	// lower_bound: uint32
	txna ApplicationArgs 2
	dup
	len
	intc 4 // 4
	==

	// argument 2 (lower_bound) for bounded_rand_uint32 must be a uint32
	assert
	btoi

	// seed: byte[8]
	txna ApplicationArgs 1
	dup
	len
	intc 2 // 8
	==

	// argument 3 (seed) for bounded_rand_uint32 must be a byte[8]
	assert

	// execute bounded_rand_uint32(byte[8],uint32,uint32,uint16)uint32[]
	callsub bounded_rand_uint32
	dup
	len
	intc 4 // 4
	/
	itob
	extract 6 2
	swap
	concat
	concat
	log
	intc 0 // 1
	return

// bounded_rand_uint32(seed: bytes<8>, lower_bound: uint32, upper_bound: uint32, length: uint16): uint32[]
bounded_rand_uint32:
	proto 4 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 0 // 0x
	dup

	// contracts\lib-pcg32-exposer-ts.algo.ts:7
	// state = pcg32Init(seed)
	frame_dig -1 // seed: bytes<8>
	callsub pcg32Init
	frame_bury 0 // state: uint64

	// contracts\lib-pcg32-exposer-ts.algo.ts:10
	// result = pcg32Random(state, lower_bound as uint64, upper_bound as uint64, length as uint64)
	frame_dig -4 // length: uint16
	frame_dig -3 // upper_bound: uint32
	frame_dig -2 // lower_bound: uint32
	frame_dig 0 // state: uint64
	callsub pcg32Random
	frame_bury 1 // result: (uint64,uint32[])

	// contracts\lib-pcg32-exposer-ts.algo.ts:11
	// state = result[0]
	frame_dig 1 // result: (uint64,uint32[])
	store 255 // full array
	load 255 // full array
	extract 0 8
	btoi
	frame_bury 0 // state: uint64

	// contracts\lib-pcg32-exposer-ts.algo.ts:13
	// return result[1];
	frame_dig 1 // result: (uint64,uint32[])
	store 255 // full array
	intc 2 // 8
	load 255 // full array
	load 255 // full array
	uncover 2
	extract_uint16
	dup // duplicate start of element
	load 255 // full array
	swap
	extract_uint16 // get number of elements
	intc 4 //  get type length
	* // multiply by type length
	intc 3 // 2
	+ // add two for length
	extract3
	extract 2 0

	// set the subroutine return value
	frame_bury 0

	// pop all local variables from the stack
	popn 1
	retsub

// bounded_rand_uint16(byte[8],uint16,uint16,uint16)uint16[]
*abi_route_bounded_rand_uint16:
	// The ABI return prefix
	bytec 1 // 0x151f7c75

	// length: uint16
	txna ApplicationArgs 4
	dup
	len
	intc 3 // 2
	==

	// argument 0 (length) for bounded_rand_uint16 must be a uint16
	assert
	btoi

	// upper_bound: uint16
	txna ApplicationArgs 3
	dup
	len
	intc 3 // 2
	==

	// argument 1 (upper_bound) for bounded_rand_uint16 must be a uint16
	assert
	btoi

	// lower_bound: uint16
	txna ApplicationArgs 2
	dup
	len
	intc 3 // 2
	==

	// argument 2 (lower_bound) for bounded_rand_uint16 must be a uint16
	assert
	btoi

	// seed: byte[8]
	txna ApplicationArgs 1
	dup
	len
	intc 2 // 8
	==

	// argument 3 (seed) for bounded_rand_uint16 must be a byte[8]
	assert

	// execute bounded_rand_uint16(byte[8],uint16,uint16,uint16)uint16[]
	callsub bounded_rand_uint16
	dup
	len
	intc 3 // 2
	/
	itob
	extract 6 2
	swap
	concat
	concat
	log
	intc 0 // 1
	return

// bounded_rand_uint16(seed: bytes<8>, lower_bound: uint16, upper_bound: uint16, length: uint16): uint16[]
bounded_rand_uint16:
	proto 4 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 0 // 0x
	dup

	// contracts\lib-pcg32-exposer-ts.algo.ts:18
	// state = pcg16Init(seed)
	frame_dig -1 // seed: bytes<8>
	callsub pcg16Init
	frame_bury 0 // state: uint64

	// contracts\lib-pcg32-exposer-ts.algo.ts:21
	// result = pcg16Random(state, lower_bound as uint64, upper_bound as uint64, length as uint64)
	frame_dig -4 // length: uint16
	frame_dig -3 // upper_bound: uint16
	frame_dig -2 // lower_bound: uint16
	frame_dig 0 // state: uint64
	callsub pcg16Random
	frame_bury 1 // result: (uint64,uint16[])

	// contracts\lib-pcg32-exposer-ts.algo.ts:22
	// state = result[0]
	frame_dig 1 // result: (uint64,uint16[])
	store 255 // full array
	load 255 // full array
	extract 0 8
	btoi
	frame_bury 0 // state: uint64

	// contracts\lib-pcg32-exposer-ts.algo.ts:24
	// return result[1];
	frame_dig 1 // result: (uint64,uint16[])
	store 255 // full array
	intc 2 // 8
	load 255 // full array
	load 255 // full array
	uncover 2
	extract_uint16
	dup // duplicate start of element
	load 255 // full array
	swap
	extract_uint16 // get number of elements
	intc 3 //  get type length
	* // multiply by type length
	intc 3 // 2
	+ // add two for length
	extract3
	extract 2 0

	// set the subroutine return value
	frame_bury 0

	// pop all local variables from the stack
	popn 1
	retsub

// bounded_rand_uint8(byte[8],uint8,uint8,uint16)uint8[]
*abi_route_bounded_rand_uint8:
	// The ABI return prefix
	bytec 1 // 0x151f7c75

	// length: uint16
	txna ApplicationArgs 4
	dup
	len
	intc 3 // 2
	==

	// argument 0 (length) for bounded_rand_uint8 must be a uint16
	assert
	btoi

	// upper_bound: uint8
	txna ApplicationArgs 3
	dup
	len
	intc 0 // 1
	==

	// argument 1 (upper_bound) for bounded_rand_uint8 must be a uint8
	assert
	btoi

	// lower_bound: uint8
	txna ApplicationArgs 2
	dup
	len
	intc 0 // 1
	==

	// argument 2 (lower_bound) for bounded_rand_uint8 must be a uint8
	assert
	btoi

	// seed: byte[8]
	txna ApplicationArgs 1
	dup
	len
	intc 2 // 8
	==

	// argument 3 (seed) for bounded_rand_uint8 must be a byte[8]
	assert

	// execute bounded_rand_uint8(byte[8],uint8,uint8,uint16)uint8[]
	callsub bounded_rand_uint8
	dup
	len
	itob
	extract 6 2
	swap
	concat
	concat
	log
	intc 0 // 1
	return

// bounded_rand_uint8(seed: bytes<8>, lower_bound: uint8, upper_bound: uint8, length: uint16): uint8[]
bounded_rand_uint8:
	proto 4 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 0 // 0x
	dup

	// contracts\lib-pcg32-exposer-ts.algo.ts:29
	// state = pcg8Init(seed)
	frame_dig -1 // seed: bytes<8>
	callsub pcg8Init
	frame_bury 0 // state: uint64

	// contracts\lib-pcg32-exposer-ts.algo.ts:32
	// result = pcg8Random(state, lower_bound as uint64, upper_bound as uint64, length as uint64)
	frame_dig -4 // length: uint16
	frame_dig -3 // upper_bound: uint8
	frame_dig -2 // lower_bound: uint8
	frame_dig 0 // state: uint64
	callsub pcg8Random
	frame_bury 1 // result: (uint64,uint8[])

	// contracts\lib-pcg32-exposer-ts.algo.ts:33
	// state = result[0]
	frame_dig 1 // result: (uint64,uint8[])
	store 255 // full array
	load 255 // full array
	extract 0 8
	btoi
	frame_bury 0 // state: uint64

	// contracts\lib-pcg32-exposer-ts.algo.ts:35
	// return result[1];
	frame_dig 1 // result: (uint64,uint8[])
	store 255 // full array
	intc 2 // 8
	load 255 // full array
	load 255 // full array
	uncover 2
	extract_uint16
	dup // duplicate start of element
	load 255 // full array
	swap
	extract_uint16 // get number of elements
	intc 0 //  get type length
	* // multiply by type length
	intc 3 // 2
	+ // add two for length
	extract3
	extract 2 0

	// set the subroutine return value
	frame_bury 0

	// pop all local variables from the stack
	popn 1
	retsub

// updateApplication()void
*abi_route_updateApplication:
	// execute updateApplication()void
	callsub updateApplication
	intc 0 // 1
	return

// updateApplication(): void
updateApplication:
	proto 0 0

	// contracts\lib-pcg32-exposer-ts.algo.ts:39
	// assert(globals.creatorAddress === this.txn.sender)
	global CreatorAddress
	txn Sender
	==
	assert
	retsub

*abi_route_createApplication:
	intc 0 // 1
	return

*create_NoOp:
	pushbytes 0xb8447b36 // method "createApplication()void"
	txna ApplicationArgs 0
	match *abi_route_createApplication

	// this contract does not implement the given ABI method for create NoOp
	err

*call_NoOp:
	pushbytes 0xed06f70a // method "bounded_rand_uint32(byte[8],uint32,uint32,uint16)uint32[]"
	pushbytes 0x8d7cce79 // method "bounded_rand_uint16(byte[8],uint16,uint16,uint16)uint16[]"
	pushbytes 0xd0a35e1e // method "bounded_rand_uint8(byte[8],uint8,uint8,uint16)uint8[]"
	txna ApplicationArgs 0
	match *abi_route_bounded_rand_uint32 *abi_route_bounded_rand_uint16 *abi_route_bounded_rand_uint8

	// this contract does not implement the given ABI method for call NoOp
	err

*call_UpdateApplication:
	pushbytes 0x46f76533 // method "updateApplication()void"
	txna ApplicationArgs 0
	match *abi_route_updateApplication

	// this contract does not implement the given ABI method for call UpdateApplication
	err

// pcg8Random(state: PCG32STATE, lowerBound: uint64, upperBound: uint64, length: uint64): [PCG32STATE, uint8[]]
pcg8Random:
	proto 4 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 0 // 0x
	dupn 6

	// lib_pcg\pcg32.algo.ts:153
	// result: uint8[] = []
	bytec 0 // 0x
	frame_bury 0 // result: uint8[]

	// *if0_condition
	// lib_pcg\pcg32.algo.ts:157
	// lowerBound === 0 && upperBound === 0
	frame_dig -2 // lowerBound: uint64
	intc 1 // 0
	==
	dup
	bz *skip_and0
	frame_dig -3 // upperBound: uint64
	intc 1 // 0
	==
	&&

*skip_and0:
	bz *if0_else

	// *if0_consequent
	// lib_pcg\pcg32.algo.ts:158
	// for (let i = 0; i < length; i = i + 1)
	intc 1 // 0
	frame_bury 3 // i: uint64

*for_0:
	// lib_pcg\pcg32.algo.ts:158
	// i < length
	frame_dig 3 // i: uint64
	frame_dig -4 // length: uint64
	<
	bz *for_0_end

	// lib_pcg\pcg32.algo.ts:159
	// stepResult = __pcg32Random(state)
	frame_dig -1 // state: PCG32STATE
	callsub __pcg32Random
	frame_bury 4 // stepResult: (uint64,uint64)

	// lib_pcg\pcg32.algo.ts:160
	// state = stepResult[0]
	frame_dig 4 // stepResult: (uint64,uint64)
	extract 0 8
	btoi
	frame_bury -1 // state: PCG32STATE

	// lib_pcg\pcg32.algo.ts:161
	// result.push(btoi(extract3(itob(stepResult[1]), 7, 1)) as uint8)
	frame_dig 0 // result: uint8[]
	frame_dig 4 // stepResult: (uint64,uint64)
	extract 8 8
	btoi
	itob
	extract 7 1
	btoi
	itob
	dup
	bitlen
	intc 2 // 8
	<=

	// btoi(extract3(itob(stepResult[1]), 7, 1)) as uint8 overflowed 8 bits
	assert
	extract 7 1
	concat
	frame_bury 0 // result: uint8[]

*for_0_continue:
	// lib_pcg\pcg32.algo.ts:158
	// i = i + 1
	frame_dig 3 // i: uint64
	intc 0 // 1
	+
	frame_bury 3 // i: uint64
	b *for_0

*for_0_end:
	b *if0_end

*if0_else:
	// *if1_condition
	// lib_pcg\pcg32.algo.ts:164
	// upperBound !== 0
	frame_dig -3 // upperBound: uint64
	intc 1 // 0
	!=
	bz *if1_else

	// *if1_consequent
	// lib_pcg\pcg32.algo.ts:165
	// assert(upperBound > 1)
	frame_dig -3 // upperBound: uint64
	intc 0 // 1
	>
	assert

	// lib_pcg\pcg32.algo.ts:166
	// assert(upperBound < 1 << 8)
	frame_dig -3 // upperBound: uint64
	intc 0 // 1
	intc 2 // 8
	shl
	<
	assert

	// lib_pcg\pcg32.algo.ts:167
	// assert(lowerBound < upperBound - 1)
	frame_dig -2 // lowerBound: uint64
	frame_dig -3 // upperBound: uint64
	intc 0 // 1
	-
	<
	assert

	// lib_pcg\pcg32.algo.ts:169
	// absoluteBound = upperBound - lowerBound
	frame_dig -3 // upperBound: uint64
	frame_dig -2 // lowerBound: uint64
	-
	frame_bury 1 // absoluteBound: uint64
	b *if1_end

*if1_else:
	// lib_pcg\pcg32.algo.ts:171
	// assert(lowerBound < (1 << 8) - 1)
	frame_dig -2 // lowerBound: uint64
	intc 0 // 1
	intc 2 // 8
	shl
	intc 0 // 1
	-
	<
	assert

	// lib_pcg\pcg32.algo.ts:173
	// absoluteBound = (1 << 8) - lowerBound
	intc 0 // 1
	intc 2 // 8
	shl
	frame_dig -2 // lowerBound: uint64
	-
	frame_bury 1 // absoluteBound: uint64

*if1_end:
	// lib_pcg\pcg32.algo.ts:176
	// threshold = __maskToUint32(__uint64Twos(absoluteBound)) % absoluteBound
	frame_dig 1 // absoluteBound: uint64
	callsub __uint64Twos
	callsub __maskToUint32
	frame_dig 1 // absoluteBound: uint64
	%
	frame_bury 2 // threshold: uint64

	// lib_pcg\pcg32.algo.ts:178
	// for (let i = 0; i < length; i = i + 1)
	intc 1 // 0
	frame_bury 5 // i: uint64

*for_1:
	// lib_pcg\pcg32.algo.ts:178
	// i < length
	frame_dig 5 // i: uint64
	frame_dig -4 // length: uint64
	<
	bz *for_1_end

*while_0:

*while_0_continue:
	// lib_pcg\pcg32.algo.ts:180
	// true
	intc 0 // 1
	bz *while_0_end

	// lib_pcg\pcg32.algo.ts:181
	// stepResult = __pcg32Random(state)
	frame_dig -1 // state: PCG32STATE
	callsub __pcg32Random
	frame_bury 6 // stepResult: (uint64,uint64)

	// lib_pcg\pcg32.algo.ts:182
	// state = stepResult[0]
	frame_dig 6 // stepResult: (uint64,uint64)
	extract 0 8
	btoi
	frame_bury -1 // state: PCG32STATE

	// *if2_condition
	// lib_pcg\pcg32.algo.ts:183
	// stepResult[1] >= threshold
	frame_dig 6 // stepResult: (uint64,uint64)
	extract 8 8
	btoi
	frame_dig 2 // threshold: uint64
	>=
	bz *if2_end

	// *if2_consequent
	// lib_pcg\pcg32.algo.ts:184
	// result.push(((stepResult[1] % absoluteBound) + lowerBound) as uint8)
	frame_dig 0 // result: uint8[]
	frame_dig 6 // stepResult: (uint64,uint64)
	extract 8 8
	btoi
	frame_dig 1 // absoluteBound: uint64
	%
	frame_dig -2 // lowerBound: uint64
	+
	itob
	dup
	bitlen
	intc 2 // 8
	<=

	// ((stepResult[1] % absoluteBound) + lowerBound) as uint8 overflowed 8 bits
	assert
	extract 7 1
	concat
	frame_bury 0 // result: uint8[]
	b *while_0_end

*if2_end:
	b *while_0

*while_0_end:

*for_1_continue:
	// lib_pcg\pcg32.algo.ts:178
	// i = i + 1
	frame_dig 5 // i: uint64
	intc 0 // 1
	+
	frame_bury 5 // i: uint64
	b *for_1

*for_1_end:

*if0_end:
	// lib_pcg\pcg32.algo.ts:191
	// return [state, result];
	bytec 0 //  initial head
	bytec 0 //  initial tail
	bytec 2 //  initial head offset
	frame_dig -1 // state: PCG32STATE
	itob
	callsub *process_static_tuple_element
	frame_dig 0 // result: uint8[]
	dup
	len
	itob
	extract 6 2
	swap
	concat
	callsub *process_dynamic_tuple_element
	pop // pop head offset
	concat // concat head and tail

	// set the subroutine return value
	frame_bury 0

	// pop all local variables from the stack
	popn 6
	retsub

// __uint64Twos(value: uint64): uint64
__uint64Twos:
	proto 1 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 0 // 0x
	dup

	// lib_pcg\pcg32.algo.ts:6
	// addwResult = addw(~value, 1)
	frame_dig -1 // value: uint64
	~
	intc 0 // 1
	addw
	frame_bury 0 // addwResult low: uint64
	frame_bury 1 // addwResult high: uint64

	// lib_pcg\pcg32.algo.ts:7
	// return addwResult.low;
	frame_dig 0 // addwResult low: uint64

	// set the subroutine return value
	frame_bury 0

	// pop all local variables from the stack
	popn 1
	retsub

// __maskToUint32(value: uint64): uint64
__maskToUint32:
	proto 1 1

	// lib_pcg\pcg32.algo.ts:12
	// return value & 4294967295;
	frame_dig -1 // value: uint64
	pushint 4294967295
	&
	retsub

// __pcg32Random(state: PCG32STATE): [PCG32STATE, uint64]
__pcg32Random:
	proto 1 1

	// lib_pcg\pcg32.algo.ts:29
	// return [__pcg32Step(state, pcgFirstIncrement), __pcg32Output(state)];
	// lib_pcg\consts.algo.ts:3
	// Uint<64>('1442695040888963407')
	intc 7 // 1442695040888963407
	frame_dig -1 // state: PCG32STATE
	callsub __pcg32Step
	itob

	// lib_pcg\pcg32.algo.ts:29
	// __pcg32Output(state)
	frame_dig -1 // state: PCG32STATE
	callsub __pcg32Output
	itob
	concat
	retsub

// __pcg32Output(state: PCG32STATE): uint64
__pcg32Output:
	proto 1 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 0 // 0x
	dup

	// lib_pcg\pcg32.algo.ts:23
	// xorshifted = __maskToUint32(((state >> 18) ^ state) >> 27)
	frame_dig -1 // state: PCG32STATE
	pushint 18
	shr
	frame_dig -1 // state: PCG32STATE
	^
	pushint 27
	shr
	callsub __maskToUint32
	frame_bury 0 // xorshifted: uint64

	// lib_pcg\pcg32.algo.ts:24
	// rot = state >> 59
	frame_dig -1 // state: PCG32STATE
	pushint 59
	shr
	frame_bury 1 // rot: uint64

	// lib_pcg\pcg32.algo.ts:25
	// return (xorshifted >> rot) | __maskToUint32(xorshifted << (__uint64Twos(rot) & 31));
	frame_dig 0 // xorshifted: uint64
	frame_dig 1 // rot: uint64
	shr
	frame_dig 0 // xorshifted: uint64
	frame_dig 1 // rot: uint64
	callsub __uint64Twos
	pushint 31
	&
	shl
	callsub __maskToUint32
	|

	// set the subroutine return value
	frame_bury 0

	// pop all local variables from the stack
	popn 1
	retsub

// __pcg32Step(state: PCG32STATE, incr: uint64): uint64
__pcg32Step:
	proto 2 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 0 // 0x
	dupn 3

	// lib_pcg\pcg32.algo.ts:16
	// mulwResult = mulw(state, pcgMultiplier)
	frame_dig -1 // state: PCG32STATE

	// lib_pcg\consts.algo.ts:1
	// Uint<64>('6364136223846793005')
	pushint 6364136223846793005
	mulw
	frame_bury 0 // mulwResult low: uint64
	frame_bury 1 // mulwResult high: uint64

	// lib_pcg\pcg32.algo.ts:17
	// addwResult = addw(mulwResult.low, incr)
	frame_dig 0 // mulwResult low: uint64
	frame_dig -2 // incr: uint64
	addw
	frame_bury 2 // addwResult low: uint64
	frame_bury 3 // addwResult high: uint64

	// lib_pcg\pcg32.algo.ts:19
	// return addwResult.low;
	frame_dig 2 // addwResult low: uint64

	// set the subroutine return value
	frame_bury 0

	// pop all local variables from the stack
	popn 3
	retsub

// pcg8Init(seed: bytes<8>): PCG32STATE
pcg8Init:
	proto 1 1

	// lib_pcg\pcg32.algo.ts:50
	// return pcg32Init(seed);
	frame_dig -1 // seed: bytes<8>
	callsub pcg32Init
	retsub

// pcg16Random(state: PCG32STATE, lowerBound: uint64, upperBound: uint64, length: uint64): [PCG32STATE, uint16[]]
pcg16Random:
	proto 4 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 0 // 0x
	dupn 6

	// lib_pcg\pcg32.algo.ts:106
	// result: uint16[] = []
	bytec 0 // 0x
	frame_bury 0 // result: uint16[]

	// *if3_condition
	// lib_pcg\pcg32.algo.ts:110
	// lowerBound === 0 && upperBound === 0
	frame_dig -2 // lowerBound: uint64
	intc 1 // 0
	==
	dup
	bz *skip_and1
	frame_dig -3 // upperBound: uint64
	intc 1 // 0
	==
	&&

*skip_and1:
	bz *if3_else

	// *if3_consequent
	// lib_pcg\pcg32.algo.ts:111
	// for (let i = 0; i < length; i = i + 1)
	intc 1 // 0
	frame_bury 3 // i: uint64

*for_2:
	// lib_pcg\pcg32.algo.ts:111
	// i < length
	frame_dig 3 // i: uint64
	frame_dig -4 // length: uint64
	<
	bz *for_2_end

	// lib_pcg\pcg32.algo.ts:112
	// stepResult = __pcg32Random(state)
	frame_dig -1 // state: PCG32STATE
	callsub __pcg32Random
	frame_bury 4 // stepResult: (uint64,uint64)

	// lib_pcg\pcg32.algo.ts:113
	// state = stepResult[0]
	frame_dig 4 // stepResult: (uint64,uint64)
	extract 0 8
	btoi
	frame_bury -1 // state: PCG32STATE

	// lib_pcg\pcg32.algo.ts:114
	// result.push(extractUint16(itob(stepResult[1]), 6) as uint16)
	frame_dig 0 // result: uint16[]
	frame_dig 4 // stepResult: (uint64,uint64)
	extract 8 8
	btoi
	itob
	intc 8 // 6
	extract_uint16
	itob
	dup
	bitlen
	intc 5 // 16
	<=

	// extractUint16(itob(stepResult[1]), 6) as uint16 overflowed 16 bits
	assert
	extract 6 2
	concat
	frame_bury 0 // result: uint16[]

*for_2_continue:
	// lib_pcg\pcg32.algo.ts:111
	// i = i + 1
	frame_dig 3 // i: uint64
	intc 0 // 1
	+
	frame_bury 3 // i: uint64
	b *for_2

*for_2_end:
	b *if3_end

*if3_else:
	// *if4_condition
	// lib_pcg\pcg32.algo.ts:117
	// upperBound !== 0
	frame_dig -3 // upperBound: uint64
	intc 1 // 0
	!=
	bz *if4_else

	// *if4_consequent
	// lib_pcg\pcg32.algo.ts:118
	// assert(upperBound > 1)
	frame_dig -3 // upperBound: uint64
	intc 0 // 1
	>
	assert

	// lib_pcg\pcg32.algo.ts:119
	// assert(upperBound < 1 << 16)
	frame_dig -3 // upperBound: uint64
	intc 0 // 1
	intc 5 // 16
	shl
	<
	assert

	// lib_pcg\pcg32.algo.ts:120
	// assert(lowerBound < upperBound - 1)
	frame_dig -2 // lowerBound: uint64
	frame_dig -3 // upperBound: uint64
	intc 0 // 1
	-
	<
	assert

	// lib_pcg\pcg32.algo.ts:122
	// absoluteBound = upperBound - lowerBound
	frame_dig -3 // upperBound: uint64
	frame_dig -2 // lowerBound: uint64
	-
	frame_bury 1 // absoluteBound: uint64
	b *if4_end

*if4_else:
	// lib_pcg\pcg32.algo.ts:124
	// assert(lowerBound < (1 << 16) - 1)
	frame_dig -2 // lowerBound: uint64
	intc 0 // 1
	intc 5 // 16
	shl
	intc 0 // 1
	-
	<
	assert

	// lib_pcg\pcg32.algo.ts:126
	// absoluteBound = (1 << 16) - lowerBound
	intc 0 // 1
	intc 5 // 16
	shl
	frame_dig -2 // lowerBound: uint64
	-
	frame_bury 1 // absoluteBound: uint64

*if4_end:
	// lib_pcg\pcg32.algo.ts:129
	// threshold = __maskToUint32(__uint64Twos(absoluteBound)) % absoluteBound
	frame_dig 1 // absoluteBound: uint64
	callsub __uint64Twos
	callsub __maskToUint32
	frame_dig 1 // absoluteBound: uint64
	%
	frame_bury 2 // threshold: uint64

	// lib_pcg\pcg32.algo.ts:131
	// for (let i = 0; i < length; i = i + 1)
	intc 1 // 0
	frame_bury 5 // i: uint64

*for_3:
	// lib_pcg\pcg32.algo.ts:131
	// i < length
	frame_dig 5 // i: uint64
	frame_dig -4 // length: uint64
	<
	bz *for_3_end

*while_1:

*while_1_continue:
	// lib_pcg\pcg32.algo.ts:133
	// true
	intc 0 // 1
	bz *while_1_end

	// lib_pcg\pcg32.algo.ts:134
	// stepResult = __pcg32Random(state)
	frame_dig -1 // state: PCG32STATE
	callsub __pcg32Random
	frame_bury 6 // stepResult: (uint64,uint64)

	// lib_pcg\pcg32.algo.ts:135
	// state = stepResult[0]
	frame_dig 6 // stepResult: (uint64,uint64)
	extract 0 8
	btoi
	frame_bury -1 // state: PCG32STATE

	// *if5_condition
	// lib_pcg\pcg32.algo.ts:136
	// stepResult[1] >= threshold
	frame_dig 6 // stepResult: (uint64,uint64)
	extract 8 8
	btoi
	frame_dig 2 // threshold: uint64
	>=
	bz *if5_end

	// *if5_consequent
	// lib_pcg\pcg32.algo.ts:137
	// result.push(((stepResult[1] % absoluteBound) + lowerBound) as uint16)
	frame_dig 0 // result: uint16[]
	frame_dig 6 // stepResult: (uint64,uint64)
	extract 8 8
	btoi
	frame_dig 1 // absoluteBound: uint64
	%
	frame_dig -2 // lowerBound: uint64
	+
	itob
	dup
	bitlen
	intc 5 // 16
	<=

	// ((stepResult[1] % absoluteBound) + lowerBound) as uint16 overflowed 16 bits
	assert
	extract 6 2
	concat
	frame_bury 0 // result: uint16[]
	b *while_1_end

*if5_end:
	b *while_1

*while_1_end:

*for_3_continue:
	// lib_pcg\pcg32.algo.ts:131
	// i = i + 1
	frame_dig 5 // i: uint64
	intc 0 // 1
	+
	frame_bury 5 // i: uint64
	b *for_3

*for_3_end:

*if3_end:
	// lib_pcg\pcg32.algo.ts:144
	// return [state, result];
	bytec 0 //  initial head
	bytec 0 //  initial tail
	bytec 2 //  initial head offset
	frame_dig -1 // state: PCG32STATE
	itob
	callsub *process_static_tuple_element
	frame_dig 0 // result: uint16[]
	dup
	len
	intc 3 // 2
	/
	itob
	extract 6 2
	swap
	concat
	callsub *process_dynamic_tuple_element
	pop // pop head offset
	concat // concat head and tail

	// set the subroutine return value
	frame_bury 0

	// pop all local variables from the stack
	popn 6
	retsub

// pcg16Init(seed: bytes<8>): PCG32STATE
pcg16Init:
	proto 1 1

	// lib_pcg\pcg32.algo.ts:46
	// return pcg32Init(seed);
	frame_dig -1 // seed: bytes<8>
	callsub pcg32Init
	retsub

// pcg32Random(state: PCG32STATE, lowerBound: uint64, upperBound: uint64, length: uint64): [PCG32STATE, uint32[]]
pcg32Random:
	proto 4 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 0 // 0x
	dupn 6

	// lib_pcg\pcg32.algo.ts:59
	// result: uint32[] = []
	bytec 0 // 0x
	frame_bury 0 // result: uint32[]

	// *if6_condition
	// lib_pcg\pcg32.algo.ts:63
	// lowerBound === 0 && upperBound === 0
	frame_dig -2 // lowerBound: uint64
	intc 1 // 0
	==
	dup
	bz *skip_and2
	frame_dig -3 // upperBound: uint64
	intc 1 // 0
	==
	&&

*skip_and2:
	bz *if6_else

	// *if6_consequent
	// lib_pcg\pcg32.algo.ts:64
	// for (let i = 0; i < length; i = i + 1)
	intc 1 // 0
	frame_bury 3 // i: uint64

*for_4:
	// lib_pcg\pcg32.algo.ts:64
	// i < length
	frame_dig 3 // i: uint64
	frame_dig -4 // length: uint64
	<
	bz *for_4_end

	// lib_pcg\pcg32.algo.ts:65
	// stepResult = __pcg32Random(state)
	frame_dig -1 // state: PCG32STATE
	callsub __pcg32Random
	frame_bury 4 // stepResult: (uint64,uint64)

	// lib_pcg\pcg32.algo.ts:66
	// state = stepResult[0]
	frame_dig 4 // stepResult: (uint64,uint64)
	extract 0 8
	btoi
	frame_bury -1 // state: PCG32STATE

	// lib_pcg\pcg32.algo.ts:67
	// result.push(stepResult[1] as uint32)
	frame_dig 0 // result: uint32[]
	frame_dig 4 // stepResult: (uint64,uint64)
	extract 8 8
	btoi
	itob
	dup
	bitlen
	intc 6 // 32
	<=

	// stepResult[1] as uint32 overflowed 32 bits
	assert
	extract 4 4
	concat
	frame_bury 0 // result: uint32[]

*for_4_continue:
	// lib_pcg\pcg32.algo.ts:64
	// i = i + 1
	frame_dig 3 // i: uint64
	intc 0 // 1
	+
	frame_bury 3 // i: uint64
	b *for_4

*for_4_end:
	b *if6_end

*if6_else:
	// *if7_condition
	// lib_pcg\pcg32.algo.ts:70
	// upperBound !== 0
	frame_dig -3 // upperBound: uint64
	intc 1 // 0
	!=
	bz *if7_else

	// *if7_consequent
	// lib_pcg\pcg32.algo.ts:71
	// assert(upperBound > 1)
	frame_dig -3 // upperBound: uint64
	intc 0 // 1
	>
	assert

	// lib_pcg\pcg32.algo.ts:72
	// assert(upperBound < 1 << 32)
	frame_dig -3 // upperBound: uint64
	intc 0 // 1
	intc 6 // 32
	shl
	<
	assert

	// lib_pcg\pcg32.algo.ts:73
	// assert(lowerBound < upperBound - 1)
	frame_dig -2 // lowerBound: uint64
	frame_dig -3 // upperBound: uint64
	intc 0 // 1
	-
	<
	assert

	// lib_pcg\pcg32.algo.ts:75
	// absoluteBound = upperBound - lowerBound
	frame_dig -3 // upperBound: uint64
	frame_dig -2 // lowerBound: uint64
	-
	frame_bury 1 // absoluteBound: uint64
	b *if7_end

*if7_else:
	// lib_pcg\pcg32.algo.ts:77
	// assert(lowerBound < (1 << 32) - 1)
	frame_dig -2 // lowerBound: uint64
	intc 0 // 1
	intc 6 // 32
	shl
	intc 0 // 1
	-
	<
	assert

	// lib_pcg\pcg32.algo.ts:79
	// absoluteBound = (1 << 32) - lowerBound
	intc 0 // 1
	intc 6 // 32
	shl
	frame_dig -2 // lowerBound: uint64
	-
	frame_bury 1 // absoluteBound: uint64

*if7_end:
	// lib_pcg\pcg32.algo.ts:82
	// threshold = __maskToUint32(__uint64Twos(absoluteBound)) % absoluteBound
	frame_dig 1 // absoluteBound: uint64
	callsub __uint64Twos
	callsub __maskToUint32
	frame_dig 1 // absoluteBound: uint64
	%
	frame_bury 2 // threshold: uint64

	// lib_pcg\pcg32.algo.ts:84
	// for (let i = 0; i < length; i = i + 1)
	intc 1 // 0
	frame_bury 5 // i: uint64

*for_5:
	// lib_pcg\pcg32.algo.ts:84
	// i < length
	frame_dig 5 // i: uint64
	frame_dig -4 // length: uint64
	<
	bz *for_5_end

*while_2:

*while_2_continue:
	// lib_pcg\pcg32.algo.ts:86
	// true
	intc 0 // 1
	bz *while_2_end

	// lib_pcg\pcg32.algo.ts:87
	// stepResult = __pcg32Random(state)
	frame_dig -1 // state: PCG32STATE
	callsub __pcg32Random
	frame_bury 6 // stepResult: (uint64,uint64)

	// lib_pcg\pcg32.algo.ts:88
	// state = stepResult[0]
	frame_dig 6 // stepResult: (uint64,uint64)
	extract 0 8
	btoi
	frame_bury -1 // state: PCG32STATE

	// *if8_condition
	// lib_pcg\pcg32.algo.ts:89
	// stepResult[1] >= threshold
	frame_dig 6 // stepResult: (uint64,uint64)
	extract 8 8
	btoi
	frame_dig 2 // threshold: uint64
	>=
	bz *if8_end

	// *if8_consequent
	// lib_pcg\pcg32.algo.ts:90
	// result.push(((stepResult[1] % absoluteBound) + lowerBound) as uint32)
	frame_dig 0 // result: uint32[]
	frame_dig 6 // stepResult: (uint64,uint64)
	extract 8 8
	btoi
	frame_dig 1 // absoluteBound: uint64
	%
	frame_dig -2 // lowerBound: uint64
	+
	itob
	dup
	bitlen
	intc 6 // 32
	<=

	// ((stepResult[1] % absoluteBound) + lowerBound) as uint32 overflowed 32 bits
	assert
	extract 4 4
	concat
	frame_bury 0 // result: uint32[]
	b *while_2_end

*if8_end:
	b *while_2

*while_2_end:

*for_5_continue:
	// lib_pcg\pcg32.algo.ts:84
	// i = i + 1
	frame_dig 5 // i: uint64
	intc 0 // 1
	+
	frame_bury 5 // i: uint64
	b *for_5

*for_5_end:

*if6_end:
	// lib_pcg\pcg32.algo.ts:97
	// return [state, result];
	bytec 0 //  initial head
	bytec 0 //  initial tail
	bytec 2 //  initial head offset
	frame_dig -1 // state: PCG32STATE
	itob
	callsub *process_static_tuple_element
	frame_dig 0 // result: uint32[]
	dup
	len
	intc 4 // 4
	/
	itob
	extract 6 2
	swap
	concat
	callsub *process_dynamic_tuple_element
	pop // pop head offset
	concat // concat head and tail

	// set the subroutine return value
	frame_bury 0

	// pop all local variables from the stack
	popn 6
	retsub

// pcg32Init(seed: bytes<8>): PCG32STATE
pcg32Init:
	proto 1 1

	// lib_pcg\pcg32.algo.ts:40
	// assert(seed.length === 8)
	intc 2 // 8
	dup
	==
	assert

	// lib_pcg\pcg32.algo.ts:42
	// return __pcg32Init(btoi(seed), pcgFirstIncrement);
	// lib_pcg\consts.algo.ts:3
	// Uint<64>('1442695040888963407')
	intc 7 // 1442695040888963407

	// lib_pcg\pcg32.algo.ts:42
	// btoi(seed)
	frame_dig -1 // seed: bytes<8>
	btoi
	callsub __pcg32Init
	retsub

// __pcg32Init(initialState: PCG32STATE, incr: uint64): PCG32STATE
__pcg32Init:
	proto 2 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 0 // 0x
	dupn 2

	// lib_pcg\pcg32.algo.ts:33
	// state = __pcg32Step(0, incr)
	frame_dig -2 // incr: uint64
	intc 1 // 0
	callsub __pcg32Step
	frame_bury 0 // state: uint64

	// lib_pcg\pcg32.algo.ts:34
	// addwResult = addw(state, initialState)
	frame_dig 0 // state: uint64
	frame_dig -1 // initialState: PCG32STATE
	addw
	frame_bury 1 // addwResult low: uint64
	frame_bury 2 // addwResult high: uint64

	// lib_pcg\pcg32.algo.ts:36
	// return __pcg32Step(addwResult.low, incr);
	frame_dig -2 // incr: uint64
	frame_dig 1 // addwResult low: uint64
	callsub __pcg32Step

	// set the subroutine return value
	frame_bury 0

	// pop all local variables from the stack
	popn 2
	retsub

*process_static_tuple_element:
	proto 4 3
	frame_dig -4 // tuple head
	frame_dig -1 // element
	concat
	frame_dig -3 // tuple tail
	frame_dig -2 // head offset
	retsub

*process_dynamic_tuple_element:
	proto 4 3
	frame_dig -4 // tuple head
	frame_dig -2 // head offset
	concat
	frame_bury -4 // tuple head
	frame_dig -1 // element
	dup
	len
	frame_dig -2 // head offset
	btoi
	+
	itob
	extract 6 2
	frame_bury -2 // head offset
	frame_dig -3 // tuple tail
	swap
	concat
	frame_bury -3 // tuple tail
	frame_dig -4 // tuple head
	frame_dig -3 // tuple tail
	frame_dig -2 // head offset
	retsub