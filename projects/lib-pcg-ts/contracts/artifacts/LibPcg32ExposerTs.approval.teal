#pragma version 10
intcblock 1 2 8 0 4 16 1442695040888963407 32
bytecblock 0x 0x000a 0x151f7c75

// This TEAL was generated by TEALScript v0.106.2
// https://github.com/algorandfoundation/TEALScript

// This contract is compliant with and/or implements the following ARCs: [ ARC4 ]

// The following ten lines of TEAL handle initial program flow
// This pattern is used to make it easy for anyone to parse the start of the program and determine if a specific action is allowed
// Here, action refers to the OnComplete in combination with whether the app is being created or called
// Every possible action for this contract is represented in the switch statement
// If the action is not implemented in the contract, its respective branch will be "*NOT_IMPLEMENTED" which just contains "err"
txn ApplicationID
!
pushint 6
*
txn OnCompletion
+
switch *call_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *call_UpdateApplication *NOT_IMPLEMENTED *create_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED

*NOT_IMPLEMENTED:
	// The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?
	err

// bounded_rand_uint32(byte[8],uint32,uint32,uint16)uint32[]
*abi_route_bounded_rand_uint32:
	// The ABI return prefix
	bytec 2 // 0x151f7c75

	// length: uint16
	txna ApplicationArgs 4
	dup
	len
	intc 1 // 2
	==

	// argument 0 (length) for bounded_rand_uint32 must be a uint16
	assert
	btoi

	// upper_bound: uint32
	txna ApplicationArgs 3
	dup
	len
	intc 4 // 4
	==

	// argument 1 (upper_bound) for bounded_rand_uint32 must be a uint32
	assert
	btoi

	// lower_bound: uint32
	txna ApplicationArgs 2
	dup
	len
	intc 4 // 4
	==

	// argument 2 (lower_bound) for bounded_rand_uint32 must be a uint32
	assert
	btoi

	// seed: byte[8]
	txna ApplicationArgs 1
	dup
	len
	intc 2 // 8
	==

	// argument 3 (seed) for bounded_rand_uint32 must be a byte[8]
	assert

	// execute bounded_rand_uint32(byte[8],uint32,uint32,uint16)uint32[]
	callsub bounded_rand_uint32
	dup
	len
	intc 4 // 4
	/
	itob
	extract 6 2
	swap
	concat
	concat
	log
	intc 0 // 1
	return

// bounded_rand_uint32(seed: bytes<8>, lower_bound: uint32, upper_bound: uint32, length: uint16): uint32[]
bounded_rand_uint32:
	proto 4 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 0 // 0x
	dup

	// contracts\lib-pcg32-exposer-ts.algo.ts:7
	// state = pcg32Init(castBytes<bytes>(seed))
	frame_dig -1 // seed: bytes<8>
	callsub pcg32Init
	frame_bury 0 // state: uint64

	// contracts\lib-pcg32-exposer-ts.algo.ts:10
	// result = pcg32Random(state, lower_bound as uint64, upper_bound as uint64, length as uint64)
	frame_dig -4 // length: uint16
	frame_dig -3 // upper_bound: uint32
	frame_dig -2 // lower_bound: uint32
	frame_dig 0 // state: uint64
	callsub pcg32Random
	frame_bury 1 // result: (uint64,uint32[])

	// contracts\lib-pcg32-exposer-ts.algo.ts:11
	// state = result[0]
	frame_dig 1 // result: (uint64,uint32[])
	store 255 // full array
	load 255 // full array
	extract 0 8
	btoi
	frame_bury 0 // state: uint64

	// contracts\lib-pcg32-exposer-ts.algo.ts:13
	// return result[1];
	frame_dig 1 // result: (uint64,uint32[])
	store 255 // full array
	intc 2 // 8
	load 255 // full array
	load 255 // full array
	uncover 2
	extract_uint16
	dup // duplicate start of element
	load 255 // full array
	swap
	extract_uint16 // get number of elements
	intc 4 //  get type length
	* // multiply by type length
	intc 1 // 2
	+ // add two for length
	extract3
	extract 2 0

	// set the subroutine return value
	frame_bury 0

	// pop all local variables from the stack
	popn 1
	retsub

// bounded_rand_uint16(byte[8],uint16,uint16,uint16)uint16[]
*abi_route_bounded_rand_uint16:
	// The ABI return prefix
	bytec 2 // 0x151f7c75

	// length: uint16
	txna ApplicationArgs 4
	dup
	len
	intc 1 // 2
	==

	// argument 0 (length) for bounded_rand_uint16 must be a uint16
	assert
	btoi

	// upper_bound: uint16
	txna ApplicationArgs 3
	dup
	len
	intc 1 // 2
	==

	// argument 1 (upper_bound) for bounded_rand_uint16 must be a uint16
	assert
	btoi

	// lower_bound: uint16
	txna ApplicationArgs 2
	dup
	len
	intc 1 // 2
	==

	// argument 2 (lower_bound) for bounded_rand_uint16 must be a uint16
	assert
	btoi

	// seed: byte[8]
	txna ApplicationArgs 1
	dup
	len
	intc 2 // 8
	==

	// argument 3 (seed) for bounded_rand_uint16 must be a byte[8]
	assert

	// execute bounded_rand_uint16(byte[8],uint16,uint16,uint16)uint16[]
	callsub bounded_rand_uint16
	dup
	len
	intc 1 // 2
	/
	itob
	extract 6 2
	swap
	concat
	concat
	log
	intc 0 // 1
	return

// bounded_rand_uint16(seed: bytes<8>, lower_bound: uint16, upper_bound: uint16, length: uint16): uint16[]
bounded_rand_uint16:
	proto 4 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 0 // 0x
	dup

	// contracts\lib-pcg32-exposer-ts.algo.ts:18
	// state = pcg16Init(castBytes<bytes>(seed))
	frame_dig -1 // seed: bytes<8>
	callsub pcg16Init
	frame_bury 0 // state: uint64

	// contracts\lib-pcg32-exposer-ts.algo.ts:21
	// result = pcg16Random(state, lower_bound as uint64, upper_bound as uint64, length as uint64)
	frame_dig -4 // length: uint16
	frame_dig -3 // upper_bound: uint16
	frame_dig -2 // lower_bound: uint16
	frame_dig 0 // state: uint64
	callsub pcg16Random
	frame_bury 1 // result: (uint64,uint16[])

	// contracts\lib-pcg32-exposer-ts.algo.ts:22
	// state = result[0]
	frame_dig 1 // result: (uint64,uint16[])
	store 255 // full array
	load 255 // full array
	extract 0 8
	btoi
	frame_bury 0 // state: uint64

	// contracts\lib-pcg32-exposer-ts.algo.ts:24
	// return result[1];
	frame_dig 1 // result: (uint64,uint16[])
	store 255 // full array
	intc 2 // 8
	load 255 // full array
	load 255 // full array
	uncover 2
	extract_uint16
	dup // duplicate start of element
	load 255 // full array
	swap
	extract_uint16 // get number of elements
	intc 1 //  get type length
	* // multiply by type length
	intc 1 // 2
	+ // add two for length
	extract3
	extract 2 0

	// set the subroutine return value
	frame_bury 0

	// pop all local variables from the stack
	popn 1
	retsub

// bounded_rand_uint8(byte[8],uint8,uint8,uint16)uint8[]
*abi_route_bounded_rand_uint8:
	// The ABI return prefix
	bytec 2 // 0x151f7c75

	// length: uint16
	txna ApplicationArgs 4
	dup
	len
	intc 1 // 2
	==

	// argument 0 (length) for bounded_rand_uint8 must be a uint16
	assert
	btoi

	// upper_bound: uint8
	txna ApplicationArgs 3
	dup
	len
	intc 0 // 1
	==

	// argument 1 (upper_bound) for bounded_rand_uint8 must be a uint8
	assert
	btoi

	// lower_bound: uint8
	txna ApplicationArgs 2
	dup
	len
	intc 0 // 1
	==

	// argument 2 (lower_bound) for bounded_rand_uint8 must be a uint8
	assert
	btoi

	// seed: byte[8]
	txna ApplicationArgs 1
	dup
	len
	intc 2 // 8
	==

	// argument 3 (seed) for bounded_rand_uint8 must be a byte[8]
	assert

	// execute bounded_rand_uint8(byte[8],uint8,uint8,uint16)uint8[]
	callsub bounded_rand_uint8
	dup
	len
	itob
	extract 6 2
	swap
	concat
	concat
	log
	intc 0 // 1
	return

// bounded_rand_uint8(seed: bytes<8>, lower_bound: uint8, upper_bound: uint8, length: uint16): uint8[]
bounded_rand_uint8:
	proto 4 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 0 // 0x
	dup

	// contracts\lib-pcg32-exposer-ts.algo.ts:29
	// state = pcg8Init(castBytes<bytes>(seed))
	frame_dig -1 // seed: bytes<8>
	callsub pcg8Init
	frame_bury 0 // state: uint64

	// contracts\lib-pcg32-exposer-ts.algo.ts:32
	// result = pcg8Random(state, lower_bound as uint64, upper_bound as uint64, length as uint64)
	frame_dig -4 // length: uint16
	frame_dig -3 // upper_bound: uint8
	frame_dig -2 // lower_bound: uint8
	frame_dig 0 // state: uint64
	callsub pcg8Random
	frame_bury 1 // result: (uint64,uint8[])

	// contracts\lib-pcg32-exposer-ts.algo.ts:33
	// state = result[0]
	frame_dig 1 // result: (uint64,uint8[])
	store 255 // full array
	load 255 // full array
	extract 0 8
	btoi
	frame_bury 0 // state: uint64

	// contracts\lib-pcg32-exposer-ts.algo.ts:35
	// return result[1];
	frame_dig 1 // result: (uint64,uint8[])
	store 255 // full array
	intc 2 // 8
	load 255 // full array
	load 255 // full array
	uncover 2
	extract_uint16
	dup // duplicate start of element
	load 255 // full array
	swap
	extract_uint16 // get number of elements
	intc 0 //  get type length
	* // multiply by type length
	intc 1 // 2
	+ // add two for length
	extract3
	extract 2 0

	// set the subroutine return value
	frame_bury 0

	// pop all local variables from the stack
	popn 1
	retsub

// createApplication()void
*abi_route_createApplication:
	// execute createApplication()void
	callsub createApplication
	intc 0 // 1
	return

// createApplication(): void
createApplication:
	proto 0 0

	// contracts\lib-pcg32-exposer-ts.algo.ts:40
	// assert(globals.creatorAddress === this.txn.sender)
	global CreatorAddress
	txn Sender
	==
	assert
	retsub

// updateApplication()void
*abi_route_updateApplication:
	// execute updateApplication()void
	callsub updateApplication
	intc 0 // 1
	return

// updateApplication(): void
updateApplication:
	proto 0 0

	// contracts\lib-pcg32-exposer-ts.algo.ts:45
	// assert(globals.creatorAddress === this.txn.sender)
	global CreatorAddress
	txn Sender
	==
	assert
	retsub

*create_NoOp:
	txn NumAppArgs
	bz *abi_route_createApplication
	pushbytes 0xb8447b36 // method "createApplication()void"
	txna ApplicationArgs 0
	match *abi_route_createApplication

	// this contract does not implement the given ABI method for create NoOp
	err

*call_NoOp:
	pushbytes 0xed06f70a // method "bounded_rand_uint32(byte[8],uint32,uint32,uint16)uint32[]"
	pushbytes 0x8d7cce79 // method "bounded_rand_uint16(byte[8],uint16,uint16,uint16)uint16[]"
	pushbytes 0xd0a35e1e // method "bounded_rand_uint8(byte[8],uint8,uint8,uint16)uint8[]"
	txna ApplicationArgs 0
	match *abi_route_bounded_rand_uint32 *abi_route_bounded_rand_uint16 *abi_route_bounded_rand_uint8

	// this contract does not implement the given ABI method for call NoOp
	err

*create_UpdateApplication:
	// this contract does not implement any ABI methods for UpdateApplication create
	err

*call_UpdateApplication:
	txn NumAppArgs
	bz *abi_route_updateApplication
	pushbytes 0x46f76533 // method "updateApplication()void"
	txna ApplicationArgs 0
	match *abi_route_updateApplication

	// this contract does not implement the given ABI method for call UpdateApplication
	err

// pcg8Random(state: PCG32STATE, lowerBound: uint64, upperBound: uint64, length: uint64): [PCG32STATE, uint8[]]
pcg8Random:
	proto 4 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 0 // 0x

	// lib_pcg\pcg32.algo.ts:136
	// result = __pcg32BoundedSequence(state, 8, lowerBound, upperBound, length)
	frame_dig -4 // length: uint64
	frame_dig -3 // upperBound: uint64
	frame_dig -2 // lowerBound: uint64
	intc 2 // 8
	frame_dig -1 // state: PCG32STATE
	callsub __pcg32BoundedSequence
	frame_bury 0 // result: (uint64,byte[])

	// lib_pcg\pcg32.algo.ts:137
	// return [result[0], castBytes<uint8[]>(result[1])];
	bytec 0 //  initial head
	bytec 0 //  initial tail
	bytec 1 //  initial head offset
	frame_dig 0 // result: (uint64,byte[])
	store 255 // full array
	load 255 // full array
	extract 0 8
	btoi
	itob
	callsub *process_static_tuple_element
	frame_dig 0 // result: (uint64,byte[])
	store 255 // full array
	intc 2 // 8
	load 255 // full array
	load 255 // full array
	uncover 2
	extract_uint16
	dup // duplicate start of element
	load 255 // full array
	swap
	extract_uint16 // get number of elements
	intc 0 //  get type length
	* // multiply by type length
	intc 1 // 2
	+ // add two for length
	extract3
	extract 2 0
	dup
	len
	itob
	extract 6 2
	swap
	concat
	callsub *process_dynamic_tuple_element
	pop // pop head offset
	concat // concat head and tail

	// set the subroutine return value
	frame_bury 0
	retsub

// __pcg32BoundedSequence(state: PCG32STATE, bitSize: uint64, lowerBound: uint64, upperBound: uint64, length: uint64): [PCG32STATE, bytes]
__pcg32BoundedSequence:
	proto 5 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 0 // 0x
	dupn 8

	// lib_pcg\pcg32.algo.ts:39
	// result: bytes = ''
	bytec 0 //  ""
	frame_bury 0 // result: bytes

	// lib_pcg\pcg32.algo.ts:41
	// assert(length < 2 ** 16)
	frame_dig -5 // length: uint64
	intc 1 // 2
	intc 5 // 16
	exp
	<
	assert

	// lib_pcg\pcg32.algo.ts:45
	// assert(bitSize === 8 || bitSize === 16 || bitSize === 32)
	frame_dig -2 // bitSize: uint64
	intc 2 // 8
	==
	dup
	bnz *skip_or0
	frame_dig -2 // bitSize: uint64
	intc 5 // 16
	==
	||

*skip_or0:
	dup
	bnz *skip_or1
	frame_dig -2 // bitSize: uint64
	intc 7 // 32
	==
	||

*skip_or1:
	assert

	// lib_pcg\pcg32.algo.ts:46
	// byteSize = bitSize >> 3
	frame_dig -2 // bitSize: uint64
	pushint 3
	shr
	frame_bury 1 // byteSize: uint64

	// lib_pcg\pcg32.algo.ts:47
	// truncatedStartCached = 8 - byteSize
	intc 2 // 8
	frame_dig 1 // byteSize: uint64
	-
	frame_bury 2 // truncatedStartCached: uint64

	// *if0_condition
	// lib_pcg\pcg32.algo.ts:51
	// lowerBound === 0 && upperBound === 0
	frame_dig -3 // lowerBound: uint64
	intc 3 // 0
	==
	dup
	bz *skip_and0
	frame_dig -4 // upperBound: uint64
	intc 3 // 0
	==
	&&

*skip_and0:
	bz *if0_else

	// *if0_consequent
	// lib_pcg\pcg32.algo.ts:52
	// for (let i = 0; i < length; i = i + 1)
	intc 3 // 0
	frame_bury 4 // i: uint64

*for_0:
	// lib_pcg\pcg32.algo.ts:52
	// i < length
	frame_dig 4 // i: uint64
	frame_dig -5 // length: uint64
	<
	bz *for_0_end

	// lib_pcg\pcg32.algo.ts:53
	// stepResult = __pcg32UnboundedRandom(state)
	frame_dig -1 // state: PCG32STATE
	callsub __pcg32UnboundedRandom
	frame_bury 5 // stepResult: (uint64,uint64)

	// lib_pcg\pcg32.algo.ts:54
	// state = stepResult[0]
	frame_dig 5 // stepResult: (uint64,uint64)
	extract 0 8
	btoi
	frame_bury -1 // state: PCG32STATE

	// lib_pcg\pcg32.algo.ts:56
	// result += extract3(itob(stepResult[1]), truncatedStartCached, byteSize)
	frame_dig 0 // result: bytes
	frame_dig 5 // stepResult: (uint64,uint64)
	extract 8 8
	btoi
	itob
	frame_dig 2 // truncatedStartCached: uint64
	frame_dig 1 // byteSize: uint64
	extract3
	concat
	frame_bury 0 // result: bytes

*for_0_continue:
	// lib_pcg\pcg32.algo.ts:52
	// i = i + 1
	frame_dig 4 // i: uint64
	intc 0 // 1
	+
	frame_bury 4 // i: uint64
	b *for_0

*for_0_end:
	b *if0_end

*if0_else:
	// *if1_condition
	// lib_pcg\pcg32.algo.ts:59
	// upperBound !== 0
	frame_dig -4 // upperBound: uint64
	intc 3 // 0
	!=
	bz *if1_else

	// *if1_consequent
	// lib_pcg\pcg32.algo.ts:60
	// assert(upperBound > 1)
	frame_dig -4 // upperBound: uint64
	intc 0 // 1
	>
	assert

	// lib_pcg\pcg32.algo.ts:61
	// assert(upperBound < 1 << bitSize)
	frame_dig -4 // upperBound: uint64
	intc 0 // 1
	frame_dig -2 // bitSize: uint64
	shl
	<
	assert

	// lib_pcg\pcg32.algo.ts:62
	// assert(lowerBound < upperBound - 1)
	frame_dig -3 // lowerBound: uint64
	frame_dig -4 // upperBound: uint64
	intc 0 // 1
	-
	<
	assert

	// lib_pcg\pcg32.algo.ts:64
	// absoluteBound = upperBound - lowerBound
	frame_dig -4 // upperBound: uint64
	frame_dig -3 // lowerBound: uint64
	-
	frame_bury 3 // absoluteBound: uint64
	b *if1_end

*if1_else:
	// lib_pcg\pcg32.algo.ts:66
	// assert(lowerBound < (1 << bitSize) - 1)
	frame_dig -3 // lowerBound: uint64
	intc 0 // 1
	frame_dig -2 // bitSize: uint64
	shl
	intc 0 // 1
	-
	<
	assert

	// lib_pcg\pcg32.algo.ts:68
	// absoluteBound = (1 << bitSize) - lowerBound
	intc 0 // 1
	frame_dig -2 // bitSize: uint64
	shl
	frame_dig -3 // lowerBound: uint64
	-
	frame_bury 3 // absoluteBound: uint64

*if1_end:
	// lib_pcg\pcg32.algo.ts:71
	// threshold = __maskToUint32(__uint64Twos(absoluteBound)) % absoluteBound
	frame_dig 3 // absoluteBound: uint64
	callsub __uint64Twos
	callsub __maskToUint32
	frame_dig 3 // absoluteBound: uint64
	%
	frame_bury 6 // threshold: uint64

	// lib_pcg\pcg32.algo.ts:73
	// for (let i = 0; i < length; i = i + 1)
	intc 3 // 0
	frame_bury 7 // i: uint64

*for_1:
	// lib_pcg\pcg32.algo.ts:73
	// i < length
	frame_dig 7 // i: uint64
	frame_dig -5 // length: uint64
	<
	bz *for_1_end

*while_0:

*while_0_continue:
	// lib_pcg\pcg32.algo.ts:75
	// true
	intc 0 // 1
	bz *while_0_end

	// lib_pcg\pcg32.algo.ts:76
	// stepResult = __pcg32UnboundedRandom(state)
	frame_dig -1 // state: PCG32STATE
	callsub __pcg32UnboundedRandom
	frame_bury 8 // stepResult: (uint64,uint64)

	// lib_pcg\pcg32.algo.ts:77
	// state = stepResult[0]
	frame_dig 8 // stepResult: (uint64,uint64)
	extract 0 8
	btoi
	frame_bury -1 // state: PCG32STATE

	// *if2_condition
	// lib_pcg\pcg32.algo.ts:78
	// stepResult[1] >= threshold
	frame_dig 8 // stepResult: (uint64,uint64)
	extract 8 8
	btoi
	frame_dig 6 // threshold: uint64
	>=
	bz *if2_end

	// *if2_consequent
	// lib_pcg\pcg32.algo.ts:79
	// result += extract3(itob((stepResult[1] % absoluteBound) + lowerBound), truncatedStartCached, byteSize)
	frame_dig 0 // result: bytes
	frame_dig 8 // stepResult: (uint64,uint64)
	extract 8 8
	btoi
	frame_dig 3 // absoluteBound: uint64
	%
	frame_dig -3 // lowerBound: uint64
	+
	itob
	frame_dig 2 // truncatedStartCached: uint64
	frame_dig 1 // byteSize: uint64
	extract3
	concat
	frame_bury 0 // result: bytes
	b *while_0_end

*if2_end:
	b *while_0

*while_0_end:

*for_1_continue:
	// lib_pcg\pcg32.algo.ts:73
	// i = i + 1
	frame_dig 7 // i: uint64
	intc 0 // 1
	+
	frame_bury 7 // i: uint64
	b *for_1

*for_1_end:

*if0_end:
	// lib_pcg\pcg32.algo.ts:86
	// return [state, result];
	bytec 0 //  initial head
	bytec 0 //  initial tail
	bytec 1 //  initial head offset
	frame_dig -1 // state: PCG32STATE
	itob
	callsub *process_static_tuple_element
	frame_dig 0 // result: bytes
	dup
	len
	itob
	extract 6 2
	swap
	concat
	callsub *process_dynamic_tuple_element
	pop // pop head offset
	concat // concat head and tail

	// set the subroutine return value
	frame_bury 0

	// pop all local variables from the stack
	popn 8
	retsub

// __uint64Twos(value: uint64): uint64
__uint64Twos:
	proto 1 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 0 // 0x
	dup

	// lib_pcg\pcg32.algo.ts:6
	// addwResult = addw(~value, 1)
	frame_dig -1 // value: uint64
	~
	intc 0 // 1
	addw
	frame_bury 0 // addwResult low: uint64
	frame_bury 1 // addwResult high: uint64

	// lib_pcg\pcg32.algo.ts:7
	// return addwResult.low;
	frame_dig 0 // addwResult low: uint64

	// set the subroutine return value
	frame_bury 0

	// pop all local variables from the stack
	popn 1
	retsub

// __maskToUint32(value: uint64): uint64
__maskToUint32:
	proto 1 1

	// lib_pcg\pcg32.algo.ts:12
	// return value & 4294967295;
	frame_dig -1 // value: uint64
	pushint 4294967295
	&
	retsub

// __pcg32UnboundedRandom(state: PCG32STATE): [PCG32STATE, uint64]
__pcg32UnboundedRandom:
	proto 1 1

	// lib_pcg\pcg32.algo.ts:29
	// return [__pcg32Step(state, pcgFirstIncrement), __pcg32Output(state)];
	// lib_pcg\consts.algo.ts:3
	// Uint<64>('1442695040888963407')
	intc 6 // 1442695040888963407
	frame_dig -1 // state: PCG32STATE
	callsub __pcg32Step
	itob

	// lib_pcg\pcg32.algo.ts:29
	// __pcg32Output(state)
	frame_dig -1 // state: PCG32STATE
	callsub __pcg32Output
	itob
	concat
	retsub

// __pcg32Output(state: PCG32STATE): uint64
__pcg32Output:
	proto 1 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 0 // 0x
	dup

	// lib_pcg\pcg32.algo.ts:23
	// xorshifted = __maskToUint32(((state >> 18) ^ state) >> 27)
	frame_dig -1 // state: PCG32STATE
	pushint 18
	shr
	frame_dig -1 // state: PCG32STATE
	^
	pushint 27
	shr
	callsub __maskToUint32
	frame_bury 0 // xorshifted: uint64

	// lib_pcg\pcg32.algo.ts:24
	// rot = state >> 59
	frame_dig -1 // state: PCG32STATE
	pushint 59
	shr
	frame_bury 1 // rot: uint64

	// lib_pcg\pcg32.algo.ts:25
	// return (xorshifted >> rot) | __maskToUint32(xorshifted << (__uint64Twos(rot) & 31));
	frame_dig 0 // xorshifted: uint64
	frame_dig 1 // rot: uint64
	shr
	frame_dig 0 // xorshifted: uint64
	frame_dig 1 // rot: uint64
	callsub __uint64Twos
	pushint 31
	&
	shl
	callsub __maskToUint32
	|

	// set the subroutine return value
	frame_bury 0

	// pop all local variables from the stack
	popn 1
	retsub

// __pcg32Step(state: PCG32STATE, incr: uint64): uint64
__pcg32Step:
	proto 2 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 0 // 0x
	dupn 3

	// lib_pcg\pcg32.algo.ts:16
	// mulwResult = mulw(state, pcgMultiplier)
	frame_dig -1 // state: PCG32STATE

	// lib_pcg\consts.algo.ts:1
	// Uint<64>('6364136223846793005')
	pushint 6364136223846793005
	mulw
	frame_bury 0 // mulwResult low: uint64
	frame_bury 1 // mulwResult high: uint64

	// lib_pcg\pcg32.algo.ts:17
	// addwResult = addw(mulwResult.low, incr)
	frame_dig 0 // mulwResult low: uint64
	frame_dig -2 // incr: uint64
	addw
	frame_bury 2 // addwResult low: uint64
	frame_bury 3 // addwResult high: uint64

	// lib_pcg\pcg32.algo.ts:19
	// return addwResult.low;
	frame_dig 2 // addwResult low: uint64

	// set the subroutine return value
	frame_bury 0

	// pop all local variables from the stack
	popn 3
	retsub

// pcg8Init(seed: bytes): PCG32STATE
pcg8Init:
	proto 1 1

	// lib_pcg\pcg32.algo.ts:107
	// return pcg32Init(seed);
	frame_dig -1 // seed: bytes
	callsub pcg32Init
	retsub

// pcg16Random(state: PCG32STATE, lowerBound: uint64, upperBound: uint64, length: uint64): [PCG32STATE, uint16[]]
pcg16Random:
	proto 4 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 0 // 0x

	// lib_pcg\pcg32.algo.ts:126
	// result = __pcg32BoundedSequence(state, 16, lowerBound, upperBound, length)
	frame_dig -4 // length: uint64
	frame_dig -3 // upperBound: uint64
	frame_dig -2 // lowerBound: uint64
	intc 5 // 16
	frame_dig -1 // state: PCG32STATE
	callsub __pcg32BoundedSequence
	frame_bury 0 // result: (uint64,byte[])

	// lib_pcg\pcg32.algo.ts:127
	// return [result[0], castBytes<uint16[]>(result[1])];
	bytec 0 //  initial head
	bytec 0 //  initial tail
	bytec 1 //  initial head offset
	frame_dig 0 // result: (uint64,byte[])
	store 255 // full array
	load 255 // full array
	extract 0 8
	btoi
	itob
	callsub *process_static_tuple_element
	frame_dig 0 // result: (uint64,byte[])
	store 255 // full array
	intc 2 // 8
	load 255 // full array
	load 255 // full array
	uncover 2
	extract_uint16
	dup // duplicate start of element
	load 255 // full array
	swap
	extract_uint16 // get number of elements
	intc 0 //  get type length
	* // multiply by type length
	intc 1 // 2
	+ // add two for length
	extract3
	extract 2 0
	dup
	len
	intc 1 // 2
	/
	itob
	extract 6 2
	swap
	concat
	callsub *process_dynamic_tuple_element
	pop // pop head offset
	concat // concat head and tail

	// set the subroutine return value
	frame_bury 0
	retsub

// pcg16Init(seed: bytes): PCG32STATE
pcg16Init:
	proto 1 1

	// lib_pcg\pcg32.algo.ts:103
	// return pcg32Init(seed);
	frame_dig -1 // seed: bytes
	callsub pcg32Init
	retsub

// pcg32Random(state: PCG32STATE, lowerBound: uint64, upperBound: uint64, length: uint64): [PCG32STATE, uint32[]]
pcg32Random:
	proto 4 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 0 // 0x

	// lib_pcg\pcg32.algo.ts:116
	// result = __pcg32BoundedSequence(state, 32, lowerBound, upperBound, length)
	frame_dig -4 // length: uint64
	frame_dig -3 // upperBound: uint64
	frame_dig -2 // lowerBound: uint64
	intc 7 // 32
	frame_dig -1 // state: PCG32STATE
	callsub __pcg32BoundedSequence
	frame_bury 0 // result: (uint64,byte[])

	// lib_pcg\pcg32.algo.ts:117
	// return [result[0], castBytes<uint32[]>(result[1])];
	bytec 0 //  initial head
	bytec 0 //  initial tail
	bytec 1 //  initial head offset
	frame_dig 0 // result: (uint64,byte[])
	store 255 // full array
	load 255 // full array
	extract 0 8
	btoi
	itob
	callsub *process_static_tuple_element
	frame_dig 0 // result: (uint64,byte[])
	store 255 // full array
	intc 2 // 8
	load 255 // full array
	load 255 // full array
	uncover 2
	extract_uint16
	dup // duplicate start of element
	load 255 // full array
	swap
	extract_uint16 // get number of elements
	intc 0 //  get type length
	* // multiply by type length
	intc 1 // 2
	+ // add two for length
	extract3
	extract 2 0
	dup
	len
	intc 4 // 4
	/
	itob
	extract 6 2
	swap
	concat
	callsub *process_dynamic_tuple_element
	pop // pop head offset
	concat // concat head and tail

	// set the subroutine return value
	frame_bury 0
	retsub

// pcg32Init(seed: bytes): PCG32STATE
pcg32Init:
	proto 1 1

	// lib_pcg\pcg32.algo.ts:97
	// assert(seed.length === 8)
	frame_dig -1 // seed: bytes
	len
	intc 2 // 8
	==
	assert

	// lib_pcg\pcg32.algo.ts:99
	// return __pcg32Init(btoi(seed), pcgFirstIncrement);
	// lib_pcg\consts.algo.ts:3
	// Uint<64>('1442695040888963407')
	intc 6 // 1442695040888963407

	// lib_pcg\pcg32.algo.ts:99
	// btoi(seed)
	frame_dig -1 // seed: bytes
	btoi
	callsub __pcg32Init
	retsub

// __pcg32Init(initialState: PCG32STATE, incr: uint64): PCG32STATE
__pcg32Init:
	proto 2 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 0 // 0x
	dupn 2

	// lib_pcg\pcg32.algo.ts:90
	// state = __pcg32Step(0, incr)
	frame_dig -2 // incr: uint64
	intc 3 // 0
	callsub __pcg32Step
	frame_bury 0 // state: uint64

	// lib_pcg\pcg32.algo.ts:91
	// addwResult = addw(state, initialState)
	frame_dig 0 // state: uint64
	frame_dig -1 // initialState: PCG32STATE
	addw
	frame_bury 1 // addwResult low: uint64
	frame_bury 2 // addwResult high: uint64

	// lib_pcg\pcg32.algo.ts:93
	// return __pcg32Step(addwResult.low, incr);
	frame_dig -2 // incr: uint64
	frame_dig 1 // addwResult low: uint64
	callsub __pcg32Step

	// set the subroutine return value
	frame_bury 0

	// pop all local variables from the stack
	popn 2
	retsub

*process_static_tuple_element:
	proto 4 3
	frame_dig -4 // tuple head
	frame_dig -1 // element
	concat
	frame_dig -3 // tuple tail
	frame_dig -2 // head offset
	retsub

*process_dynamic_tuple_element:
	proto 4 3
	frame_dig -4 // tuple head
	frame_dig -2 // head offset
	concat
	frame_bury -4 // tuple head
	frame_dig -1 // element
	dup
	len
	frame_dig -2 // head offset
	btoi
	+
	itob
	extract 6 2
	frame_bury -2 // head offset
	frame_dig -3 // tuple tail
	swap
	concat
	frame_bury -3 // tuple tail
	frame_dig -4 // tuple head
	frame_dig -3 // tuple tail
	frame_dig -2 // head offset
	retsub