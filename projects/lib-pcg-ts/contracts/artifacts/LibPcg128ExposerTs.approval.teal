#pragma version 10
intcblock 0 1 16 32 1442695040888963407 1442695040888963409 1442695040888963411 1442695040888963413 2 128
bytecblock 0x 0x00000000000000000000000000000000 0x0000000000000000000000000000000100000000000000000000000000000000 0x00000000000000000000000000000001 0xffffffffffffffffffffffffffffffff 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF

// This TEAL was generated by TEALScript v0.105.5
// https://github.com/algorandfoundation/TEALScript

// This contract is compliant with and/or implements the following ARCs: [ ARC4 ]

// The following ten lines of TEAL handle initial program flow
// This pattern is used to make it easy for anyone to parse the start of the program and determine if a specific action is allowed
// Here, action refers to the OnComplete in combination with whether the app is being created or called
// Every possible action for this contract is represented in the switch statement
// If the action is not implemented in the contract, its respective branch will be "*NOT_IMPLEMENTED" which just contains "err"
txn ApplicationID
!
pushint 6
*
txn OnCompletion
+
switch *call_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *call_UpdateApplication *NOT_IMPLEMENTED *create_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED

*NOT_IMPLEMENTED:
	// The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?
	err

// bounded_rand_uint128(byte[32],uint128,uint128,uint16)uint128[]
*abi_route_bounded_rand_uint128:
	// The ABI return prefix
	pushbytes 0x151f7c75

	// length: uint16
	txna ApplicationArgs 4
	dup
	len
	intc 8 // 2
	==

	// argument 0 (length) for bounded_rand_uint128 must be a uint16
	assert
	btoi

	// upper_bound: uint128
	txna ApplicationArgs 3
	dup
	len
	intc 2 // 16
	==

	// argument 1 (upper_bound) for bounded_rand_uint128 must be a uint128
	assert

	// lower_bound: uint128
	txna ApplicationArgs 2
	dup
	len
	intc 2 // 16
	==

	// argument 2 (lower_bound) for bounded_rand_uint128 must be a uint128
	assert

	// seed: byte[32]
	txna ApplicationArgs 1
	dup
	len
	intc 3 // 32
	==

	// argument 3 (seed) for bounded_rand_uint128 must be a byte[32]
	assert

	// execute bounded_rand_uint128(byte[32],uint128,uint128,uint16)uint128[]
	callsub bounded_rand_uint128
	dup
	len
	intc 2 // 16
	/
	itob
	extract 6 2
	swap
	concat
	concat
	log
	intc 1 // 1
	return

// bounded_rand_uint128(seed: bytes<32>, lower_bound: uint128, upper_bound: uint128, length: uint16): uint128[]
bounded_rand_uint128:
	proto 4 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 0 // 0x
	dup

	// contracts\lib-pcg128-exposer-ts.algo.ts:7
	// state = pcg128Init(seed)
	frame_dig -1 // seed: bytes<32>
	callsub pcg128Init
	frame_bury 0 // state: (uint64,uint64,uint64,uint64)

	// contracts\lib-pcg128-exposer-ts.algo.ts:9
	// result = pcg128Random(state, lower_bound, upper_bound, length as uint64)
	frame_dig -4 // length: uint16
	frame_dig -3 // upper_bound: uint128
	frame_dig -2 // lower_bound: uint128
	frame_dig 0 // state: (uint64,uint64,uint64,uint64)
	callsub pcg128Random
	frame_bury 1 // result: ((uint64,uint64,uint64,uint64),uint128[])

	// contracts\lib-pcg128-exposer-ts.algo.ts:10
	// state = result[0]
	frame_dig 1 // result: ((uint64,uint64,uint64,uint64),uint128[])
	store 255 // full array
	load 255 // full array
	extract 0 32
	frame_bury 0 // state: (uint64,uint64,uint64,uint64)

	// contracts\lib-pcg128-exposer-ts.algo.ts:12
	// return result[1];
	frame_dig 1 // result: ((uint64,uint64,uint64,uint64),uint128[])
	store 255 // full array
	intc 3 // 32
	load 255 // full array
	load 255 // full array
	uncover 2
	extract_uint16
	dup // duplicate start of element
	load 255 // full array
	swap
	extract_uint16 // get number of elements
	intc 2 //  get type length
	* // multiply by type length
	intc 8 // 2
	+ // add two for length
	extract3
	extract 2 0

	// set the subroutine return value
	frame_bury 0

	// pop all local variables from the stack
	popn 1
	retsub

// updateApplication()void
*abi_route_updateApplication:
	// execute updateApplication()void
	callsub updateApplication
	intc 1 // 1
	return

// updateApplication(): void
updateApplication:
	proto 0 0

	// contracts\lib-pcg128-exposer-ts.algo.ts:16
	// assert(globals.creatorAddress === this.txn.sender)
	global CreatorAddress
	txn Sender
	==
	assert
	retsub

*abi_route_createApplication:
	intc 1 // 1
	return

*create_NoOp:
	pushbytes 0xb8447b36 // method "createApplication()void"
	txna ApplicationArgs 0
	match *abi_route_createApplication

	// this contract does not implement the given ABI method for create NoOp
	err

*call_NoOp:
	pushbytes 0xc35e095d // method "bounded_rand_uint128(byte[32],uint128,uint128,uint16)uint128[]"
	txna ApplicationArgs 0
	match *abi_route_bounded_rand_uint128

	// this contract does not implement the given ABI method for call NoOp
	err

*call_UpdateApplication:
	pushbytes 0x46f76533 // method "updateApplication()void"
	txna ApplicationArgs 0
	match *abi_route_updateApplication

	// this contract does not implement the given ABI method for call UpdateApplication
	err

// pcg128Random(state: PCG128STATE, lowerBound: uint128, upperBound: uint128, length: uint64): [PCG128STATE, uint128[]]
pcg128Random:
	proto 4 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 0 // 0x
	dupn 7

	// lib_pcg\pcg128.algo.ts:44
	// result: uint128[] = []
	bytec 0 // 0x
	frame_bury 0 // result: uint128[]

	// lib_pcg\pcg128.algo.ts:48
	// newState = clone(state)
	frame_dig -1 // state: PCG128STATE
	frame_bury 3 // newState: (uint64,uint64,uint64,uint64)

	// *if0_condition
	// lib_pcg\pcg128.algo.ts:50
	// lowerBound === 0 && upperBound === 0
	frame_dig -2 // lowerBound: uint128
	bytec 1 // 0x00000000000000000000000000000000
	b==
	dup
	bz *skip_and0
	frame_dig -3 // upperBound: uint128
	bytec 1 // 0x00000000000000000000000000000000
	b==
	&&

*skip_and0:
	bz *if0_else

	// *if0_consequent
	// lib_pcg\pcg128.algo.ts:51
	// for (let i = 0; i < length; i = i + 1)
	intc 0 // 0
	frame_bury 4 // i: uint64

*for_0:
	// lib_pcg\pcg128.algo.ts:51
	// i < length
	frame_dig 4 // i: uint64
	frame_dig -4 // length: uint64
	<
	bz *for_0_end

	// lib_pcg\pcg128.algo.ts:52
	// stepResult = __pcg128Random(newState)
	frame_dig 3 // newState: (uint64,uint64,uint64,uint64)
	callsub __pcg128Random
	frame_bury 5 // stepResult: ((uint64,uint64,uint64,uint64),uint128)

	// lib_pcg\pcg128.algo.ts:53
	// newState = stepResult[0]
	frame_dig 5 // stepResult: ((uint64,uint64,uint64,uint64),uint128)
	extract 0 32
	frame_bury 3 // newState: (uint64,uint64,uint64,uint64)

	// lib_pcg\pcg128.algo.ts:54
	// result.push(stepResult[1])
	frame_dig 0 // result: uint128[]
	frame_dig 5 // stepResult: ((uint64,uint64,uint64,uint64),uint128)
	extract 32 16
	concat
	frame_bury 0 // result: uint128[]

*for_0_continue:
	// lib_pcg\pcg128.algo.ts:51
	// i = i + 1
	frame_dig 4 // i: uint64
	intc 1 // 1
	+
	frame_bury 4 // i: uint64
	b *for_0

*for_0_end:
	b *if0_end

*if0_else:
	// *if1_condition
	// lib_pcg\pcg128.algo.ts:57
	// upperBound !== 0
	frame_dig -3 // upperBound: uint128
	bytec 1 // 0x00000000000000000000000000000000
	b!=
	bz *if1_else

	// *if1_consequent
	// lib_pcg\pcg128.algo.ts:58
	// assert(upperBound > 1)
	frame_dig -3 // upperBound: uint128
	bytec 3 // 0x00000000000000000000000000000001
	b>
	assert

	// lib_pcg\pcg128.algo.ts:60
	// assert((upperBound as uint256) < Uint<256>('340282366920938463463374607431768211456'))
	frame_dig -3 // upperBound: uint128
	bytec 2 // 0x0000000000000000000000000000000100000000000000000000000000000000
	b<
	assert

	// lib_pcg\pcg128.algo.ts:61
	// assert(lowerBound < upperBound - 1)
	frame_dig -2 // lowerBound: uint128
	frame_dig -3 // upperBound: uint128
	bytec 3 // 0x00000000000000000000000000000001
	b-
	b<
	assert

	// lib_pcg\pcg128.algo.ts:63
	// absoluteBound = upperBound - lowerBound
	frame_dig -3 // upperBound: uint128
	frame_dig -2 // lowerBound: uint128
	b-
	frame_bury 1 // absoluteBound: uint128
	b *if1_end

*if1_else:
	// lib_pcg\pcg128.algo.ts:66
	// assert(lowerBound < Uint<128>('340282366920938463463374607431768211455'))
	frame_dig -2 // lowerBound: uint128
	bytec 4 // 0xffffffffffffffffffffffffffffffff
	b<
	assert

	// lib_pcg\pcg128.algo.ts:71
	// absoluteBound = (Uint<256>('340282366920938463463374607431768211456') - (lowerBound as uint256)) as uint128
	bytec 2 // 0x0000000000000000000000000000000100000000000000000000000000000000
	frame_dig -2 // lowerBound: uint128
	b-
	frame_bury 1 // absoluteBound: uint128

*if1_end:
	// lib_pcg\pcg128.algo.ts:74
	// threshold = __uint128Twos(absoluteBound) % absoluteBound
	frame_dig 1 // absoluteBound: uint128
	callsub __uint128Twos
	frame_dig 1 // absoluteBound: uint128
	b%
	frame_bury 2 // threshold: uint128

	// lib_pcg\pcg128.algo.ts:76
	// for (let i = 0; i < length; i = i + 1)
	intc 0 // 0
	frame_bury 6 // i: uint64

*for_1:
	// lib_pcg\pcg128.algo.ts:76
	// i < length
	frame_dig 6 // i: uint64
	frame_dig -4 // length: uint64
	<
	bz *for_1_end

*while_0:

*while_0_continue:
	// lib_pcg\pcg128.algo.ts:78
	// true
	intc 1 // 1
	bz *while_0_end

	// lib_pcg\pcg128.algo.ts:79
	// stepResult = __pcg128Random(newState)
	frame_dig 3 // newState: (uint64,uint64,uint64,uint64)
	callsub __pcg128Random
	frame_bury 7 // stepResult: ((uint64,uint64,uint64,uint64),uint128)

	// lib_pcg\pcg128.algo.ts:80
	// newState = stepResult[0]
	frame_dig 7 // stepResult: ((uint64,uint64,uint64,uint64),uint128)
	extract 0 32
	frame_bury 3 // newState: (uint64,uint64,uint64,uint64)

	// *if2_condition
	// lib_pcg\pcg128.algo.ts:81
	// stepResult[1] >= threshold
	frame_dig 7 // stepResult: ((uint64,uint64,uint64,uint64),uint128)
	extract 32 16
	frame_dig 2 // threshold: uint128
	b>=
	bz *if2_end

	// *if2_consequent
	// lib_pcg\pcg128.algo.ts:82
	// result.push((stepResult[1] % absoluteBound) + lowerBound)
	frame_dig 0 // result: uint128[]
	frame_dig 7 // stepResult: ((uint64,uint64,uint64,uint64),uint128)
	extract 32 16
	frame_dig 1 // absoluteBound: uint128
	b%
	frame_dig -2 // lowerBound: uint128
	b+
	dup
	bitlen
	intc 9 // 128
	<=

	// (stepResult[1] % absoluteBound) + lowerBound overflowed 128 bits
	assert
	bytec 5 // 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	b&
	dup
	len
	dup
	intc 2 // 16
	-
	swap
	substring3
	concat
	frame_bury 0 // result: uint128[]
	b *while_0_end

*if2_end:
	b *while_0

*while_0_end:

*for_1_continue:
	// lib_pcg\pcg128.algo.ts:76
	// i = i + 1
	frame_dig 6 // i: uint64
	intc 1 // 1
	+
	frame_bury 6 // i: uint64
	b *for_1

*for_1_end:

*if0_end:
	// lib_pcg\pcg128.algo.ts:89
	// return [newState, result];
	bytec 0 //  initial head
	bytec 0 //  initial tail
	pushbytes 0x0022 // initial head offset
	frame_dig 3 // newState: (uint64,uint64,uint64,uint64)
	callsub *process_static_tuple_element
	frame_dig 0 // result: uint128[]
	dup
	len
	intc 2 // 16
	/
	itob
	extract 6 2
	swap
	concat
	callsub *process_dynamic_tuple_element
	pop // pop head offset
	concat // concat head and tail

	// set the subroutine return value
	frame_bury 0

	// pop all local variables from the stack
	popn 7
	retsub

// __uint128Twos(value: uint128): uint128
__uint128Twos:
	proto 1 1

	// lib_pcg\pcg128.algo.ts:7
	// return (
	//     (((~rawBytes(value) as uint256) + Uint<256>('1')) as uint128) & Uint<128>('340282366920938463463374607431768211455')
	//   );
	frame_dig -1 // value: uint128
	b~
	pushbytes 0x0000000000000000000000000000000000000000000000000000000000000001
	b+
	bytec 4 // 0xffffffffffffffffffffffffffffffff
	b&
	retsub

// __pcg128Random(state: PCG128STATE): [PCG128STATE, uint128]
__pcg128Random:
	proto 1 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 0 // 0x
	dupn 3

	// lib_pcg\pcg128.algo.ts:13
	// state1 = __pcg32Step(state[0], pcgFirstIncrement)
	// lib_pcg\consts.algo.ts:3
	// Uint<64>('1442695040888963407')
	intc 4 // 1442695040888963407

	// lib_pcg\pcg128.algo.ts:13
	// state[0]
	frame_dig -1 // state: PCG128STATE
	extract 0 8
	btoi
	callsub __pcg32Step
	frame_bury 0 // state1: uint64

	// lib_pcg\pcg128.algo.ts:14
	// state2 = __pcg32Step(state[1], pcgSecondIncrement << (state1 === 0 ? 1 : 0))
	// lib_pcg\consts.algo.ts:5
	// Uint<64>('1442695040888963409')
	intc 5 // 1442695040888963409

	// lib_pcg\pcg128.algo.ts:14
	// state1 === 0
	frame_dig 0 // state1: uint64
	intc 0 // 0
	==
	bz *ternary1_false
	intc 1 // 1
	b *ternary1_end

*ternary1_false:
	intc 0 // 0

*ternary1_end:
	shl

	// lib_pcg\pcg128.algo.ts:14
	// state[1]
	frame_dig -1 // state: PCG128STATE
	extract 8 8
	btoi
	callsub __pcg32Step
	frame_bury 1 // state2: uint64

	// lib_pcg\pcg128.algo.ts:15
	// state3 = __pcg32Step(state[2], pcgThirdIncrement << (state2 === 0 ? 1 : 0))
	// lib_pcg\consts.algo.ts:7
	// Uint<64>('1442695040888963411')
	intc 6 // 1442695040888963411

	// lib_pcg\pcg128.algo.ts:15
	// state2 === 0
	frame_dig 1 // state2: uint64
	intc 0 // 0
	==
	bz *ternary3_false
	intc 1 // 1
	b *ternary3_end

*ternary3_false:
	intc 0 // 0

*ternary3_end:
	shl

	// lib_pcg\pcg128.algo.ts:15
	// state[2]
	frame_dig -1 // state: PCG128STATE
	extract 16 8
	btoi
	callsub __pcg32Step
	frame_bury 2 // state3: uint64

	// lib_pcg\pcg128.algo.ts:16
	// state4 = __pcg32Step(state[3], pcgFourthIncrement << (state3 === 0 ? 1 : 0))
	// lib_pcg\consts.algo.ts:9
	// Uint<64>('1442695040888963413')
	intc 7 // 1442695040888963413

	// lib_pcg\pcg128.algo.ts:16
	// state3 === 0
	frame_dig 2 // state3: uint64
	intc 0 // 0
	==
	bz *ternary5_false
	intc 1 // 1
	b *ternary5_end

*ternary5_false:
	intc 0 // 0

*ternary5_end:
	shl

	// lib_pcg\pcg128.algo.ts:16
	// state[3]
	frame_dig -1 // state: PCG128STATE
	extract 24 8
	btoi
	callsub __pcg32Step
	frame_bury 3 // state4: uint64

	// lib_pcg\pcg128.algo.ts:18
	// return [
	//     [state1, state2, state3, state4],
	//     ((__pcg32Output(state[0]) as uint128) * Uint<128>('79228162514264337593543950336')) |
	//       ((__pcg32Output(state[1]) as uint128) * Uint<128>('18446744073709551616')) |
	//       ((__pcg32Output(state[2]) as uint128) * Uint<128>('4294967296')) |
	//       (__pcg32Output(state[3]) as uint128),
	//   ];
	frame_dig 0 // state1: uint64
	itob
	frame_dig 1 // state2: uint64
	itob
	concat
	frame_dig 2 // state3: uint64
	itob
	concat
	frame_dig 3 // state4: uint64
	itob
	concat
	frame_dig -1 // state: PCG128STATE
	extract 0 8
	btoi
	callsub __pcg32Output
	itob
	pushbytes 0x00000001000000000000000000000000
	b*
	frame_dig -1 // state: PCG128STATE
	extract 8 8
	btoi
	callsub __pcg32Output
	itob
	pushbytes 0x00000000000000010000000000000000
	b*
	b|
	frame_dig -1 // state: PCG128STATE
	extract 16 8
	btoi
	callsub __pcg32Output
	itob
	pushbytes 0x00000000000000000000000100000000
	b*
	b|
	frame_dig -1 // state: PCG128STATE
	extract 24 8
	btoi
	callsub __pcg32Output
	itob
	b|
	dup
	bitlen
	intc 9 // 128
	<=

	// ((__pcg32Output(state[0]) as uint128) * Uint<128>('79228162514264337593543950336')) |\n      ((__pcg32Output(state[1]) as uint128) * Uint<128>('18446744073709551616')) |\n      ((__pcg32Output(state[2]) as uint128) * Uint<128>('4294967296')) |\n      (__pcg32Output(state[3]) as uint128) overflowed 128 bits
	assert
	bytec 5 // 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	b&
	dup
	len
	dup
	intc 2 // 16
	-
	swap
	substring3
	concat

	// set the subroutine return value
	frame_bury 0

	// pop all local variables from the stack
	popn 3
	retsub

// __pcg32Output(state: PCG32STATE): uint64
__pcg32Output:
	proto 1 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 0 // 0x
	dup

	// lib_pcg\pcg32.algo.ts:23
	// xorshifted = __maskToUint32(((state >> 18) ^ state) >> 27)
	frame_dig -1 // state: PCG32STATE
	pushint 18
	shr
	frame_dig -1 // state: PCG32STATE
	^
	pushint 27
	shr
	callsub __maskToUint32
	frame_bury 0 // xorshifted: uint64

	// lib_pcg\pcg32.algo.ts:24
	// rot = state >> 59
	frame_dig -1 // state: PCG32STATE
	pushint 59
	shr
	frame_bury 1 // rot: uint64

	// lib_pcg\pcg32.algo.ts:25
	// return (xorshifted >> rot) | __maskToUint32(xorshifted << (__uint64Twos(rot) & 31));
	frame_dig 0 // xorshifted: uint64
	frame_dig 1 // rot: uint64
	shr
	frame_dig 0 // xorshifted: uint64
	frame_dig 1 // rot: uint64
	callsub __uint64Twos
	pushint 31
	&
	shl
	callsub __maskToUint32
	|

	// set the subroutine return value
	frame_bury 0

	// pop all local variables from the stack
	popn 1
	retsub

// __uint64Twos(value: uint64): uint64
__uint64Twos:
	proto 1 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 0 // 0x
	dup

	// lib_pcg\pcg32.algo.ts:6
	// addwResult = addw(~value, 1)
	frame_dig -1 // value: uint64
	~
	intc 1 // 1
	addw
	frame_bury 0 // addwResult low: uint64
	frame_bury 1 // addwResult high: uint64

	// lib_pcg\pcg32.algo.ts:7
	// return addwResult.low;
	frame_dig 0 // addwResult low: uint64

	// set the subroutine return value
	frame_bury 0

	// pop all local variables from the stack
	popn 1
	retsub

// __maskToUint32(value: uint64): uint64
__maskToUint32:
	proto 1 1

	// lib_pcg\pcg32.algo.ts:12
	// return value & 4294967295;
	frame_dig -1 // value: uint64
	pushint 4294967295
	&
	retsub

// __pcg32Step(state: PCG32STATE, incr: uint64): uint64
__pcg32Step:
	proto 2 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 0 // 0x
	dupn 3

	// lib_pcg\pcg32.algo.ts:16
	// mulwResult = mulw(state, pcgMultiplier)
	frame_dig -1 // state: PCG32STATE

	// lib_pcg\consts.algo.ts:1
	// Uint<64>('6364136223846793005')
	pushint 6364136223846793005
	mulw
	frame_bury 0 // mulwResult low: uint64
	frame_bury 1 // mulwResult high: uint64

	// lib_pcg\pcg32.algo.ts:17
	// addwResult = addw(mulwResult.low, incr)
	frame_dig 0 // mulwResult low: uint64
	frame_dig -2 // incr: uint64
	addw
	frame_bury 2 // addwResult low: uint64
	frame_bury 3 // addwResult high: uint64

	// lib_pcg\pcg32.algo.ts:19
	// return addwResult.low;
	frame_dig 2 // addwResult low: uint64

	// set the subroutine return value
	frame_bury 0

	// pop all local variables from the stack
	popn 3
	retsub

// pcg128Init(seed: bytes<32>): PCG128STATE
pcg128Init:
	proto 1 1

	// lib_pcg\pcg128.algo.ts:28
	// assert(seed.length === 32)
	intc 3 // 32
	dup
	==
	assert

	// lib_pcg\pcg128.algo.ts:30
	// return [
	//     __pcg32Init(extractUint64(seed, 0), pcgFirstIncrement),
	//     __pcg32Init(extractUint64(seed, 8), pcgSecondIncrement),
	//     __pcg32Init(extractUint64(seed, 16), pcgThirdIncrement),
	//     __pcg32Init(extractUint64(seed, 24), pcgFourthIncrement),
	//   ];
	// lib_pcg\consts.algo.ts:3
	// Uint<64>('1442695040888963407')
	intc 4 // 1442695040888963407

	// lib_pcg\pcg128.algo.ts:31
	// extractUint64(seed, 0)
	frame_dig -1 // seed: bytes<32>
	intc 0 // 0
	extract_uint64
	callsub __pcg32Init
	itob

	// lib_pcg\pcg128.algo.ts:32
	// __pcg32Init(extractUint64(seed, 8), pcgSecondIncrement)
	// lib_pcg\consts.algo.ts:5
	// Uint<64>('1442695040888963409')
	intc 5 // 1442695040888963409

	// lib_pcg\pcg128.algo.ts:32
	// extractUint64(seed, 8)
	frame_dig -1 // seed: bytes<32>
	pushint 8
	extract_uint64
	callsub __pcg32Init
	itob
	concat

	// lib_pcg\pcg128.algo.ts:33
	// __pcg32Init(extractUint64(seed, 16), pcgThirdIncrement)
	// lib_pcg\consts.algo.ts:7
	// Uint<64>('1442695040888963411')
	intc 6 // 1442695040888963411

	// lib_pcg\pcg128.algo.ts:33
	// extractUint64(seed, 16)
	frame_dig -1 // seed: bytes<32>
	intc 2 // 16
	extract_uint64
	callsub __pcg32Init
	itob
	concat

	// lib_pcg\pcg128.algo.ts:34
	// __pcg32Init(extractUint64(seed, 24), pcgFourthIncrement)
	// lib_pcg\consts.algo.ts:9
	// Uint<64>('1442695040888963413')
	intc 7 // 1442695040888963413

	// lib_pcg\pcg128.algo.ts:34
	// extractUint64(seed, 24)
	frame_dig -1 // seed: bytes<32>
	pushint 24
	extract_uint64
	callsub __pcg32Init
	itob
	concat
	retsub

// __pcg32Init(initialState: PCG32STATE, incr: uint64): PCG32STATE
__pcg32Init:
	proto 2 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 0 // 0x
	dupn 2

	// lib_pcg\pcg32.algo.ts:89
	// state = __pcg32Step(0, incr)
	frame_dig -2 // incr: uint64
	intc 0 // 0
	callsub __pcg32Step
	frame_bury 0 // state: uint64

	// lib_pcg\pcg32.algo.ts:90
	// addwResult = addw(state, initialState)
	frame_dig 0 // state: uint64
	frame_dig -1 // initialState: PCG32STATE
	addw
	frame_bury 1 // addwResult low: uint64
	frame_bury 2 // addwResult high: uint64

	// lib_pcg\pcg32.algo.ts:92
	// return __pcg32Step(addwResult.low, incr);
	frame_dig -2 // incr: uint64
	frame_dig 1 // addwResult low: uint64
	callsub __pcg32Step

	// set the subroutine return value
	frame_bury 0

	// pop all local variables from the stack
	popn 2
	retsub

*process_static_tuple_element:
	proto 4 3
	frame_dig -4 // tuple head
	frame_dig -1 // element
	concat
	frame_dig -3 // tuple tail
	frame_dig -2 // head offset
	retsub

*process_dynamic_tuple_element:
	proto 4 3
	frame_dig -4 // tuple head
	frame_dig -2 // head offset
	concat
	frame_bury -4 // tuple head
	frame_dig -1 // element
	dup
	len
	frame_dig -2 // head offset
	btoi
	+
	itob
	extract 6 2
	frame_bury -2 // head offset
	frame_dig -3 // tuple tail
	swap
	concat
	frame_bury -3 // tuple tail
	frame_dig -4 // tuple head
	frame_dig -3 // tuple tail
	frame_dig -2 // head offset
	retsub