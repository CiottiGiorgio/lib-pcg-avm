{
  "hints": {
    "bounded_rand_uint32(uint64,uint64,uint64,uint64)uint32[]": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "bounded_rand_uint16(uint64,uint64,uint64,uint64)uint16[]": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "bounded_rand_uint8(uint64,uint64,uint64,uint64)uint8[]": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "createApplication()void": {
      "call_config": {
        "no_op": "CREATE"
      }
    }
  },
  "bare_call_config": {
    "no_op": "NEVER",
    "opt_in": "NEVER",
    "close_out": "NEVER",
    "update_application": "NEVER",
    "delete_application": "NEVER"
  },
  "schema": {
    "local": {
      "declared": {},
      "reserved": {}
    },
    "global": {
      "declared": {},
      "reserved": {}
    }
  },
  "state": {
    "global": {
      "num_byte_slices": 0,
      "num_uints": 0
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0
    }
  },
  "source": {
    "approval": "",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDEw"
  },
  "contract": {
    "name": "LibPcg32TsExposer",
    "desc": "",
    "methods": [
      {
        "name": "bounded_rand_uint32",
        "args": [
          {
            "name": "seed",
            "type": "uint64"
          },
          {
            "name": "lower_bound",
            "type": "uint64"
          },
          {
            "name": "upper_bound",
            "type": "uint64"
          },
          {
            "name": "length",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "uint32[]"
        }
      },
      {
        "name": "bounded_rand_uint16",
        "args": [
          {
            "name": "seed",
            "type": "uint64"
          },
          {
            "name": "lower_bound",
            "type": "uint64"
          },
          {
            "name": "upper_bound",
            "type": "uint64"
          },
          {
            "name": "length",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "uint16[]"
        }
      },
      {
        "name": "bounded_rand_uint8",
        "args": [
          {
            "name": "seed",
            "type": "uint64"
          },
          {
            "name": "lower_bound",
            "type": "uint64"
          },
          {
            "name": "upper_bound",
            "type": "uint64"
          },
          {
            "name": "length",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "uint8[]"
        }
      },
      {
        "name": "createApplication",
        "args": [],
        "returns": {
          "type": "void"
        }
      }
    ]
  }
}