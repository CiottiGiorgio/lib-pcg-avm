{
  "hints": {
    "bounded_rand_uint64(byte[16],uint64,uint64,uint16)uint64[]": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "createApplication()void": {
      "call_config": {
        "no_op": "CREATE"
      }
    },
    "updateApplication()void": {
      "call_config": {
        "update_application": "CALL"
      }
    }
  },
  "bare_call_config": {
    "no_op": "CREATE",
    "opt_in": "NEVER",
    "close_out": "NEVER",
    "update_application": "CALL",
    "delete_application": "NEVER"
  },
  "schema": {
    "local": {
      "declared": {},
      "reserved": {}
    },
    "global": {
      "declared": {},
      "reserved": {}
    }
  },
  "state": {
    "global": {
      "num_byte_slices": 0,
      "num_uints": 0
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0
    }
  },
  "source": {
    "approval": "",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDEw"
  },
  "contract": {
    "name": "LibPcg64ExposerTs",
    "desc": "",
    "methods": [
      {
        "name": "bounded_rand_uint64",
        "args": [
          {
            "name": "seed",
            "type": "byte[16]"
          },
          {
            "name": "lower_bound",
            "type": "uint64"
          },
          {
            "name": "upper_bound",
            "type": "uint64"
          },
          {
            "name": "length",
            "type": "uint16"
          }
        ],
        "returns": {
          "type": "uint64[]"
        }
      },
      {
        "name": "createApplication",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "updateApplication",
        "args": [],
        "returns": {
          "type": "void"
        }
      }
    ]
  }
}